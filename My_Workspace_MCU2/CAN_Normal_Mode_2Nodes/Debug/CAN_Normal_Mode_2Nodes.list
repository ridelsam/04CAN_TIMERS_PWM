
CAN_Normal_Mode_2Nodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004108  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b4  080043b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  0800442c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800442c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010df1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2a  00000000  00000000  00030e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00032dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002271f  00000000  00000000  000347b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f662  00000000  00000000  00056ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3800  00000000  00000000  00066539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  00139d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042c0 	.word	0x080042c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080042c0 	.word	0x080042c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
TIM_HandleTypeDef htimer6;
uint8_t req_counter = 0;
CAN_RxHeaderTypeDef RxHeader;

int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	HAL_Init();
 80005bc:	f000 fd26 	bl	800100c <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_84_MHZ);
 80005c0:	2054      	movs	r0, #84	; 0x54
 80005c2:	f000 f81f 	bl	8000604 <SystemClock_Config_HSE>

	GPIO_Init();
 80005c6:	f000 f913 	bl	80007f0 <GPIO_Init>

	UART2_Init();
 80005ca:	f000 f99d 	bl	8000908 <UART2_Init>

	TIMER6_Init();
 80005ce:	f000 f97f 	bl	80008d0 <TIMER6_Init>

	CAN1_Init();
 80005d2:	f000 f9bf 	bl	8000954 <CAN1_Init>

	CAN_Filter_Config();
 80005d6:	f000 f8e5 	bl	80007a4 <CAN_Filter_Config>

	if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 80005da:	f240 4103 	movw	r1, #1027	; 0x403
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <main+0x48>)
 80005e0:	f001 f993 	bl	800190a <HAL_CAN_ActivateNotification>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x36>
	{
			Error_handler();
 80005ea:	f000 fb85 	bl	8000cf8 <Error_handler>
	}


	if( HAL_CAN_Start(&hcan1) != HAL_OK)
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x48>)
 80005f0:	f000 ff5a 	bl	80014a8 <HAL_CAN_Start>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x46>
	{
		Error_handler();
 80005fa:	f000 fb7d 	bl	8000cf8 <Error_handler>
	}



	while(1);
 80005fe:	e7fe      	b.n	80005fe <main+0x46>
 8000600:	20000128 	.word	0x20000128

08000604 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b78      	cmp	r3, #120	; 0x78
 800062c:	d038      	beq.n	80006a0 <SystemClock_Config_HSE+0x9c>
 800062e:	2b78      	cmp	r3, #120	; 0x78
 8000630:	dc7c      	bgt.n	800072c <SystemClock_Config_HSE+0x128>
 8000632:	2b32      	cmp	r3, #50	; 0x32
 8000634:	d002      	beq.n	800063c <SystemClock_Config_HSE+0x38>
 8000636:	2b54      	cmp	r3, #84	; 0x54
 8000638:	d019      	beq.n	800066e <SystemClock_Config_HSE+0x6a>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 800063a:	e077      	b.n	800072c <SystemClock_Config_HSE+0x128>
		  Osc_Init.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8000640:	2332      	movs	r3, #50	; 0x32
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800066c:	e032      	b.n	80006d4 <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 8000672:	2354      	movs	r3, #84	; 0x54
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800069e:	e019      	b.n	80006d4 <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 80006a4:	2378      	movs	r3, #120	; 0x78
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80006d2:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f941 	bl	8002960 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config_HSE+0xe4>
	{
			Error_handler();
 80006e4:	f000 fb08 	bl	8000cf8 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 80006e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fe68 	bl	80023c8 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config_HSE+0xfe>
	{
		Error_handler();
 80006fe:	f000 fafb 	bl	8000cf8 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000702:	f001 ff47 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 8000706:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <SystemClock_Config_HSE+0x130>)
 800070c:	fba2 2303 	umull	r2, r3, r2, r3
 8000710:	099b      	lsrs	r3, r3, #6
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fc35 	bl	8001f82 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000718:	2004      	movs	r0, #4
 800071a:	f001 fc3f 	bl	8001f9c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	f04f 30ff 	mov.w	r0, #4294967295
 8000726:	f001 fc02 	bl	8001f2e <HAL_NVIC_SetPriority>
 800072a:	e000      	b.n	800072e <SystemClock_Config_HSE+0x12a>
	   return ;
 800072c:	bf00      	nop



 }
 800072e:	3758      	adds	r7, #88	; 0x58
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	10624dd3 	.word	0x10624dd3

08000738 <CAN1_Tx>:

uint8_t led_no=0;

void CAN1_Tx()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

	uint32_t TxMailbox;

	uint8_t message;

	TxHeader.DLC = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x65D;
 8000742:	f240 635d 	movw	r3, #1629	; 0x65d
 8000746:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE   = CAN_ID_STD;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]


	message = ++led_no;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <CAN1_Tx+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <CAN1_Tx+0x60>)
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <CAN1_Tx+0x60>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	70fb      	strb	r3, [r7, #3]

	if(led_no == 4)
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <CAN1_Tx+0x60>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b04      	cmp	r3, #4
 8000768:	d102      	bne.n	8000770 <CAN1_Tx+0x38>
	{
	    led_no = 0;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <CAN1_Tx+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000770:	2120      	movs	r1, #32
 8000772:	480a      	ldr	r0, [pc, #40]	; (800079c <CAN1_Tx+0x64>)
 8000774:	f001 fde9 	bl	800234a <HAL_GPIO_TogglePin>

	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	1cfa      	adds	r2, r7, #3
 800077c:	f107 0108 	add.w	r1, r7, #8
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <CAN1_Tx+0x68>)
 8000782:	f000 fed5 	bl	8001530 <HAL_CAN_AddTxMessage>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <CAN1_Tx+0x58>
	{
		Error_handler();
 800078c:	f000 fab4 	bl	8000cf8 <Error_handler>
	}

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000008d 	.word	0x2000008d
 800079c:	40020000 	.word	0x40020000
 80007a0:	20000128 	.word	0x20000128

080007a4 <CAN_Filter_Config>:



void CAN_Filter_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X01C0;
 80007be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80007c2:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <CAN_Filter_Config+0x48>)
 80007d6:	f000 fd87 	bl	80012e8 <HAL_CAN_ConfigFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <CAN_Filter_Config+0x40>
	{
		Error_handler();
 80007e0:	f000 fa8a 	bl	8000cf8 <Error_handler>
	}

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000128 	.word	0x20000128

080007f0 <GPIO_Init>:


void GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <GPIO_Init+0xd0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <GPIO_Init+0xd0>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <GPIO_Init+0xd0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]


	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800084a:	2320      	movs	r3, #32
 800084c:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <GPIO_Init+0xd4>)
 800085e:	f001 fbc7 	bl	8001ff0 <HAL_GPIO_Init>


	ledgpio.Pin = GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_6;
 8000862:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000866:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&ledgpio);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <GPIO_Init+0xd8>)
 8000878:	f001 fbba 	bl	8001ff0 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_8;
 800087c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000880:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB,&ledgpio);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <GPIO_Init+0xdc>)
 8000892:	f001 fbad 	bl	8001ff0 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_13;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_IT_FALLING;
 800089c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a0:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&ledgpio);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <GPIO_Init+0xd8>)
 80008ae:	f001 fb9f 	bl	8001ff0 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b2:	2028      	movs	r0, #40	; 0x28
 80008b4:	f001 fb57 	bl	8001f66 <HAL_NVIC_EnableIRQ>


}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020400 	.word	0x40020400

080008d0 <TIMER6_Init>:


void TIMER6_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <TIMER6_Init+0x30>)
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <TIMER6_Init+0x34>)
 80008d8:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <TIMER6_Init+0x30>)
 80008dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80008e0:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 10000-1;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <TIMER6_Init+0x30>)
 80008e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80008e8:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <TIMER6_Init+0x30>)
 80008ec:	f002 fad6 	bl	8002e9c <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <TIMER6_Init+0x2a>
	{
		Error_handler();
 80008f6:	f000 f9ff 	bl	8000cf8 <Error_handler>
	}

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000009c 	.word	0x2000009c
 8000904:	40001000 	.word	0x40001000

08000908 <UART2_Init>:

void UART2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <UART2_Init+0x44>)
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <UART2_Init+0x48>)
 8000910:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <UART2_Init+0x44>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <UART2_Init+0x44>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <UART2_Init+0x44>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <UART2_Init+0x44>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <UART2_Init+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <UART2_Init+0x44>)
 8000934:	220c      	movs	r2, #12
 8000936:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <UART2_Init+0x44>)
 800093a:	f002 fd53 	bl	80033e4 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000944:	f000 f9d8 	bl	8000cf8 <Error_handler>
	}


}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000e4 	.word	0x200000e4
 8000950:	40004400 	.word	0x40004400

08000954 <CAN1_Init>:


void CAN1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <CAN1_Init+0x64>)
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <CAN1_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <CAN1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <CAN1_Init+0x64>)
 8000966:	2201      	movs	r2, #1
 8000968:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <CAN1_Init+0x64>)
 800096c:	2201      	movs	r2, #1
 800096e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <CAN1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <CAN1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <CAN1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <CAN1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	775a      	strb	r2, [r3, #29]

	//Settings related to CAN bit timings
	hcan1.Init.Prescaler = 3;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <CAN1_Init+0x64>)
 800098a:	2203      	movs	r2, #3
 800098c:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <CAN1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <CAN1_Init+0x64>)
 8000996:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800099a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <CAN1_Init+0x64>)
 800099e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009a2:	615a      	str	r2, [r3, #20]

	if ( HAL_CAN_Init (&hcan1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <CAN1_Init+0x64>)
 80009a6:	f000 fba3 	bl	80010f0 <HAL_CAN_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <CAN1_Init+0x60>
	{
		Error_handler();
 80009b0:	f000 f9a2 	bl	8000cf8 <Error_handler>
	}

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000128 	.word	0x20000128
 80009bc:	40006400 	.word	0x40006400

080009c0 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b090      	sub	sp, #64	; 0x40
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M0\r\n");
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	490a      	ldr	r1, [pc, #40]	; (80009f8 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f848 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fc19 	bl	8000210 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f107 010c 	add.w	r1, r7, #12
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009ec:	f002 fd47 	bl	800347e <HAL_UART_Transmit>

}
 80009f0:	bf00      	nop
 80009f2:	3740      	adds	r7, #64	; 0x40
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	080042d8 	.word	0x080042d8
 80009fc:	200000e4 	.word	0x200000e4

08000a00 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	; 0x40
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M1\r\n");
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	490a      	ldr	r1, [pc, #40]	; (8000a38 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 f828 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fbf9 	bl	8000210 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f107 010c 	add.w	r1, r7, #12
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a2c:	f002 fd27 	bl	800347e <HAL_UART_Transmit>

}
 8000a30:	bf00      	nop
 8000a32:	3740      	adds	r7, #64	; 0x40
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	080042f4 	.word	0x080042f4
 8000a3c:	200000e4 	.word	0x200000e4

08000a40 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b090      	sub	sp, #64	; 0x40
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M2\r\n");
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	490a      	ldr	r1, [pc, #40]	; (8000a78 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 f808 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fbd9 	bl	8000210 <strlen>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f107 010c 	add.w	r1, r7, #12
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a6c:	f002 fd07 	bl	800347e <HAL_UART_Transmit>

}
 8000a70:	bf00      	nop
 8000a72:	3740      	adds	r7, #64	; 0x40
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	08004310 	.word	0x08004310
 8000a7c:	200000e4 	.word	0x200000e4

08000a80 <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b092      	sub	sp, #72	; 0x48
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];

	char msg[50];

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a8c:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fe28 	bl	80016e6 <HAL_CAN_GetRxMessage>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_handler();
 8000a9c:	f000 f92c 	bl	8000cf8 <Error_handler>
	}

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0 )
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f240 625d 	movw	r2, #1629	; 0x65d
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d112      	bne.n	8000ad2 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10e      	bne.n	8000ad2 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		//This is data frame sent by n1 to n2
		LED_Manage_Output(rcvd_msg[0]);
 8000ab4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f87d 	bl	8000bb8 <LED_Manage_Output>
		sprintf(msg,"Message Received : #%x\r\n",rcvd_msg[0]);
 8000abe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	491e      	ldr	r1, [pc, #120]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 ffca 	bl	8003a64 <siprintf>
 8000ad0:	e025      	b.n	8000b1e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	}
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f240 6251 	movw	r2, #1617	; 0x651
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d109      	bne.n	8000af2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d105      	bne.n	8000af2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
	{
		//This is a remote frame sent by n1 to n2
		Send_response(RxHeader.StdId);
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8e0 	bl	8000cb0 <Send_response>
 8000af0:	e023      	b.n	8000b3a <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
		return;
	}
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f240 6251 	movw	r2, #1617	; 0x651
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10f      	bne.n	8000b1e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10b      	bne.n	8000b1e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	{
		//its a reply ( data frame) by n2 to n1
		sprintf(msg,"Reply Received : %#X\r\n",rcvd_msg[0] << 8 | rcvd_msg[1]);
 8000b06:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000b10:	431a      	orrs	r2, r3
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	490c      	ldr	r1, [pc, #48]	; (8000b48 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 ffa3 	bl	8003a64 <siprintf>
	}

	 HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb74 	bl	8000210 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f107 010c 	add.w	r1, r7, #12
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b36:	f002 fca2 	bl	800347e <HAL_UART_Transmit>

}
 8000b3a:	3748      	adds	r7, #72	; 0x48
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000150 	.word	0x20000150
 8000b44:	0800432c 	.word	0x0800432c
 8000b48:	08004348 	.word	0x08004348
 8000b4c:	200000e4 	.word	0x200000e4

08000b50 <HAL_TIM_PeriodElapsedCallback>:



 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	 uint32_t TxMailbox;

	 uint8_t message; //no meaning for data frame

	if ( req_counter  == 4)
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d11a      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		//N1 sending Remote frame to N2
		TxHeader.DLC = 2; //N1 demanding 2 bytes of reply
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x651;
 8000b64:	f240 6351 	movw	r3, #1617	; 0x651
 8000b68:	613b      	str	r3, [r7, #16]
		TxHeader.IDE   = CAN_ID_STD;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]

		if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	f107 020b 	add.w	r2, r7, #11
 8000b7a:	f107 0110 	add.w	r1, r7, #16
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b80:	f000 fcd6 	bl	8001530 <HAL_CAN_AddTxMessage>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			Error_handler();
 8000b8a:	f000 f8b5 	bl	8000cf8 <Error_handler>
		}
		req_counter = 0;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	{
		CAN1_Tx();
		req_counter++;
	}

 }
 8000b94:	e007      	b.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x56>
		CAN1_Tx();
 8000b96:	f7ff fdcf 	bl	8000738 <CAN1_Tx>
		req_counter++;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ba4:	701a      	strb	r2, [r3, #0]
 }
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	20000128 	.word	0x20000128

08000bb8 <LED_Manage_Output>:

 void LED_Manage_Output(uint8_t led_no)
 {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 	switch(led_no)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d86a      	bhi.n	8000ca0 <LED_Manage_Output+0xe8>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <LED_Manage_Output+0x18>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000c11 	.word	0x08000c11
 8000bd8:	08000c41 	.word	0x08000c41
 8000bdc:	08000c71 	.word	0x08000c71
 	{
 	case 1 :
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4830      	ldr	r0, [pc, #192]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000be8:	f001 fb96 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000bf4:	f001 fb90 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfe:	482b      	ldr	r0, [pc, #172]	; (8000cac <LED_Manage_Output+0xf4>)
 8000c00:	f001 fb8a 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c0a:	f001 fb85 	bl	8002318 <HAL_GPIO_WritePin>
 		break;
 8000c0e:	e047      	b.n	8000ca0 <LED_Manage_Output+0xe8>
 	case 2 :
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c18:	f001 fb7e 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	4821      	ldr	r0, [pc, #132]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c24:	f001 fb78 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2e:	481f      	ldr	r0, [pc, #124]	; (8000cac <LED_Manage_Output+0xf4>)
 8000c30:	f001 fb72 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c3a:	f001 fb6d 	bl	8002318 <HAL_GPIO_WritePin>
 		break;
 8000c3e:	e02f      	b.n	8000ca0 <LED_Manage_Output+0xe8>
 	case 3 :
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c48:	f001 fb66 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c54:	f001 fb60 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <LED_Manage_Output+0xf4>)
 8000c60:	f001 fb5a 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c6a:	f001 fb55 	bl	8002318 <HAL_GPIO_WritePin>
 		break;
 8000c6e:	e017      	b.n	8000ca0 <LED_Manage_Output+0xe8>
 	case 4 :
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c78:	f001 fb4e 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c84:	f001 fb48 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <LED_Manage_Output+0xf4>)
 8000c90:	f001 fb42 	bl	8002318 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <LED_Manage_Output+0xf0>)
 8000c9a:	f001 fb3d 	bl	8002318 <HAL_GPIO_WritePin>
 		break;
 8000c9e:	bf00      	nop
 	}
 }
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <Send_response>:


 void Send_response(uint32_t StdId)
 {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

 	CAN_TxHeaderTypeDef TxHeader;

 	uint32_t TxMailbox;

 	uint8_t response[2] = { 0xAB,0XCD};
 8000cb8:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 8000cbc:	813b      	strh	r3, [r7, #8]

 	TxHeader.DLC = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	623b      	str	r3, [r7, #32]
 	TxHeader.StdId = StdId;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	613b      	str	r3, [r7, #16]
 	TxHeader.IDE   = CAN_ID_STD;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 	TxHeader.RTR = CAN_RTR_DATA;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]

 	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,response,&TxMailbox) != HAL_OK)
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	f107 0208 	add.w	r2, r7, #8
 8000cd6:	f107 0110 	add.w	r1, r7, #16
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <Send_response+0x44>)
 8000cdc:	f000 fc28 	bl	8001530 <HAL_CAN_AddTxMessage>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <Send_response+0x3a>
 	{
 		Error_handler();
 8000ce6:	f000 f807 	bl	8000cf8 <Error_handler>
 	}

 }
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000128 	.word	0x20000128

08000cf8 <Error_handler>:


void Error_handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	while(1);
 8000cfc:	e7fe      	b.n	8000cfc <Error_handler+0x4>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END Header */

#include "main.h"

void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f001 f907 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_MspInit+0x40>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_MspInit+0x40>)
 8000d10:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000d14:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f06f 000b 	mvn.w	r0, #11
 8000d1e:	f001 f906 	bl	8001f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	f06f 000a 	mvn.w	r0, #10
 8000d2a:	f001 f900 	bl	8001f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	f06f 0009 	mvn.w	r0, #9
 8000d36:	f001 f8fa 	bl	8001f2e <HAL_NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000d84:	2304      	movs	r3, #4
 8000d86:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000d94:	2307      	movs	r3, #7
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000da0:	f001 f926 	bl	8001ff0 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000da4:	2308      	movs	r3, #8
 8000da6:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000db0:	f001 f91e 	bl	8001ff0 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db4:	2026      	movs	r0, #38	; 0x26
 8000db6:	f001 f8d6 	bl	8001f66 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	2026      	movs	r0, #38	; 0x26
 8000dc0:	f001 f8b5 	bl	8001f2e <HAL_NVIC_SetPriority>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_CAN_MspInit>:


  void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_CAN_MspInit+0x90>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_CAN_MspInit+0x90>)
 8000de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_CAN_MspInit+0x90>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]

	/**CAN1 GPIO Configuration
	PA11     ------> CAN1_RX
	PA12     ------> CAN1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000df8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dfc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e0a:	2309      	movs	r3, #9
 8000e0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	4814      	ldr	r0, [pc, #80]	; (8000e68 <HAL_CAN_MspInit+0x94>)
 8000e16:	f001 f8eb 	bl	8001ff0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	2013      	movs	r0, #19
 8000e20:	f001 f885 	bl	8001f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	210f      	movs	r1, #15
 8000e28:	2014      	movs	r0, #20
 8000e2a:	f001 f880 	bl	8001f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	210f      	movs	r1, #15
 8000e32:	2015      	movs	r0, #21
 8000e34:	f001 f87b 	bl	8001f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	2016      	movs	r0, #22
 8000e3e:	f001 f876 	bl	8001f2e <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e42:	2013      	movs	r0, #19
 8000e44:	f001 f88f 	bl	8001f66 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e48:	2014      	movs	r0, #20
 8000e4a:	f001 f88c 	bl	8001f66 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e4e:	2015      	movs	r0, #21
 8000e50:	f001 f889 	bl	8001f66 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e54:	2016      	movs	r0, #22
 8000e56:	f001 f886 	bl	8001f66 <HAL_NVIC_EnableIRQ>

 }
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_TIM_Base_MspInit>:


  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
  {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  	//1. enable the clock for the TIM6 peripheral
  	__HAL_RCC_TIM6_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

  	//2. Enable the IRQ of TIM6
  	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f001 f868 	bl	8001f66 <HAL_NVIC_EnableIRQ>

  	//3. setup the priority for TIM6_DAC_IRQn
  	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	210f      	movs	r1, #15
 8000e9a:	2036      	movs	r0, #54	; 0x36
 8000e9c:	f001 f847 	bl	8001f2e <HAL_NVIC_SetPriority>

  }
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800

08000eac <SysTick_Handler>:
extern TIM_HandleTypeDef htimer6;
extern void CAN1_Tx(uint8_t remote);


void SysTick_Handler (void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000eb0:	f000 f8fe 	bl	80010b0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000eb4:	f001 f88e 	bl	8001fd4 <HAL_SYSTICK_IRQHandler>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <CAN1_TX_IRQHandler>:


void CAN1_TX_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <CAN1_TX_IRQHandler+0x10>)
 8000ec2:	f000 fd48 	bl	8001956 <HAL_CAN_IRQHandler>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000128 	.word	0x20000128

08000ed0 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <CAN1_RX0_IRQHandler+0x10>)
 8000ed6:	f000 fd3e 	bl	8001956 <HAL_CAN_IRQHandler>

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000128 	.word	0x20000128

08000ee4 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <CAN1_SCE_IRQHandler+0x10>)
 8000eea:	f000 fd34 	bl	8001956 <HAL_CAN_IRQHandler>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000128 	.word	0x20000128

08000ef8 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <TIM6_DAC_IRQHandler+0x10>)
 8000efe:	f002 f88d 	bl	800301c <HAL_TIM_IRQHandler>

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000009c 	.word	0x2000009c

08000f0c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <EXTI15_10_IRQHandler+0x18>)
 8000f12:	f002 f813 	bl	8002f3c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1a:	f001 fa31 	bl	8002380 <HAL_GPIO_EXTI_IRQHandler>

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000009c 	.word	0x2000009c

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f002 fd5a 	bl	8003a10 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20020000 	.word	0x20020000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	20000180 	.word	0x20000180

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f002 fd19 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fae5 	bl	80005b8 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ffc:	080043bc 	.word	0x080043bc
  ldr r2, =_sbss
 8001000:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001004:	20000180 	.word	0x20000180

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 ff6f 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fe5e 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 ff87 	bl	8001f82 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 ff4f 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	2000016c 	.word	0x2000016c

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000016c 	.word	0x2000016c

080010f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0ed      	b.n	80012de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe60 	bl	8000dd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001124:	f7ff ffd8 	bl	80010d8 <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800112a:	e012      	b.n	8001152 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800112c:	f7ff ffd4 	bl	80010d8 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b0a      	cmp	r3, #10
 8001138:	d90b      	bls.n	8001152 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0c5      	b.n	80012de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0e5      	beq.n	800112c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0202 	bic.w	r2, r2, #2
 800116e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001170:	f7ff ffb2 	bl	80010d8 <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001176:	e012      	b.n	800119e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001178:	f7ff ffae 	bl	80010d8 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b0a      	cmp	r3, #10
 8001184:	d90b      	bls.n	800119e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2205      	movs	r2, #5
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e09f      	b.n	80012de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1e5      	bne.n	8001178 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7e1b      	ldrb	r3, [r3, #24]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e007      	b.n	80011d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7e5b      	ldrb	r3, [r3, #25]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e007      	b.n	8001200 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7e9b      	ldrb	r3, [r3, #26]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d108      	bne.n	800121a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0220 	orr.w	r2, r2, #32
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e007      	b.n	800122a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0220 	bic.w	r2, r2, #32
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7edb      	ldrb	r3, [r3, #27]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d108      	bne.n	8001244 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0210 	bic.w	r2, r2, #16
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e007      	b.n	8001254 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0210 	orr.w	r2, r2, #16
 8001252:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7f1b      	ldrb	r3, [r3, #28]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0208 	orr.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e007      	b.n	800127e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0208 	bic.w	r2, r2, #8
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7f5b      	ldrb	r3, [r3, #29]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d108      	bne.n	8001298 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0204 	orr.w	r2, r2, #4
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e007      	b.n	80012a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	ea42 0103 	orr.w	r1, r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001300:	7cfb      	ldrb	r3, [r7, #19]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d003      	beq.n	800130e <HAL_CAN_ConfigFilter+0x26>
 8001306:	7cfb      	ldrb	r3, [r7, #19]
 8001308:	2b02      	cmp	r3, #2
 800130a:	f040 80be 	bne.w	800148a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800130e:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001310:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001328:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	431a      	orrs	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2201      	movs	r2, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d123      	bne.n	80013b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001392:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3248      	adds	r2, #72	; 0x48
 8001398:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ae:	6979      	ldr	r1, [r7, #20]
 80013b0:	3348      	adds	r3, #72	; 0x48
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d122      	bne.n	8001406 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3248      	adds	r2, #72	; 0x48
 80013e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fc:	6979      	ldr	r1, [r7, #20]
 80013fe:	3348      	adds	r3, #72	; 0x48
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001420:	e007      	b.n	8001432 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800144c:	e007      	b.n	800145e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	431a      	orrs	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800147c:	f023 0201 	bic.w	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e006      	b.n	8001498 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40006400 	.word	0x40006400

080014a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d12e      	bne.n	800151a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fe00 	bl	80010d8 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014da:	e012      	b.n	8001502 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014dc:	f7ff fdfc 	bl	80010d8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d90b      	bls.n	8001502 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2205      	movs	r2, #5
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e012      	b.n	8001528 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e5      	bne.n	80014dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e006      	b.n	8001528 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d003      	beq.n	800155c <HAL_CAN_AddTxMessage+0x2c>
 8001554:	7ffb      	ldrb	r3, [r7, #31]
 8001556:	2b02      	cmp	r3, #2
 8001558:	f040 80b8 	bne.w	80016cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10a      	bne.n	800157c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80a0 	beq.w	80016bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	0e1b      	lsrs	r3, r3, #24
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d907      	bls.n	800159c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e09e      	b.n	80016da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800159c:	2201      	movs	r2, #1
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	409a      	lsls	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3318      	adds	r3, #24
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	440b      	add	r3, r1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e00f      	b.n	80015ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3318      	adds	r3, #24
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	440b      	add	r3, r1
 80015e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3318      	adds	r3, #24
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	440b      	add	r3, r1
 80015fa:	3304      	adds	r3, #4
 80015fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	7d1b      	ldrb	r3, [r3, #20]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d111      	bne.n	800162a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3318      	adds	r3, #24
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	3304      	adds	r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3318      	adds	r3, #24
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	3304      	adds	r3, #4
 8001628:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3307      	adds	r3, #7
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	061a      	lsls	r2, r3, #24
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3306      	adds	r3, #6
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3305      	adds	r3, #5
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	4313      	orrs	r3, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	3204      	adds	r2, #4
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	4610      	mov	r0, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6811      	ldr	r1, [r2, #0]
 8001652:	ea43 0200 	orr.w	r2, r3, r0
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001660:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3303      	adds	r3, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	061a      	lsls	r2, r3, #24
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3301      	adds	r3, #1
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	4313      	orrs	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	4610      	mov	r0, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	6811      	ldr	r1, [r2, #0]
 8001688:	ea43 0200 	orr.w	r2, r3, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	440b      	add	r3, r1
 8001692:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001696:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3318      	adds	r3, #24
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	6811      	ldr	r1, [r2, #0]
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3318      	adds	r3, #24
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	440b      	add	r3, r1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e00e      	b.n	80016da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e006      	b.n	80016da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016e6:	b480      	push	{r7}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d003      	beq.n	800170a <HAL_CAN_GetRxMessage+0x24>
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f040 80f3 	bne.w	80018f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10e      	bne.n	800172e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0e7      	b.n	80018fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0d8      	b.n	80018fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	331b      	adds	r3, #27
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0204 	and.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	331b      	adds	r3, #27
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0d5b      	lsrs	r3, r3, #21
 800177a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00b      	b.n	800179c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	331b      	adds	r3, #27
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	331b      	adds	r3, #27
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0202 	and.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	331b      	adds	r3, #27
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	3304      	adds	r3, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 020f 	and.w	r2, r3, #15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	331b      	adds	r3, #27
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	331b      	adds	r3, #27
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0a1a      	lsrs	r2, r3, #8
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0c1a      	lsrs	r2, r3, #16
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3302      	adds	r3, #2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e1a      	lsrs	r2, r3, #24
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3303      	adds	r3, #3
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3304      	adds	r3, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0a1a      	lsrs	r2, r3, #8
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	3305      	adds	r3, #5
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0c1a      	lsrs	r2, r3, #16
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3306      	adds	r3, #6
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e1a      	lsrs	r2, r3, #24
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	3307      	adds	r3, #7
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	e007      	b.n	80018ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0220 	orr.w	r2, r2, #32
 80018ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e006      	b.n	80018fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d002      	beq.n	8001928 <HAL_CAN_ActivateNotification+0x1e>
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d109      	bne.n	800193c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6959      	ldr	r1, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e006      	b.n	800194a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b08a      	sub	sp, #40	; 0x28
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d07c      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff f801 	bl	80009c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80019be:	e016      	b.n	80019ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	e00c      	b.n	80019ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	e002      	b.n	80019ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f96b 	bl	8001cc4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d024      	beq.n	8001a42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7fe fff7 	bl	8000a00 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a12:	e016      	b.n	8001a42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e00c      	b.n	8001a42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	e002      	b.n	8001a42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f94b 	bl	8001cd8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d024      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe ffed 	bl	8000a40 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a66:	e016      	b.n	8001a96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	e00c      	b.n	8001a96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	e002      	b.n	8001a96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f92b 	bl	8001cec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f912 	bl	8001d00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7fe ffc3 	bl	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00c      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2208      	movs	r2, #8
 8001b38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8f4 	bl	8001d28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8db 	bl	8001d14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2210      	movs	r2, #16
 8001b78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8de 	bl	8001d3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2208      	movs	r2, #8
 8001b9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8d7 	bl	8001d50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d07b      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d072      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d043      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d03e      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c24:	2b60      	cmp	r3, #96	; 0x60
 8001c26:	d02b      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x32a>
 8001c28:	2b60      	cmp	r3, #96	; 0x60
 8001c2a:	d82e      	bhi.n	8001c8a <HAL_CAN_IRQHandler+0x334>
 8001c2c:	2b50      	cmp	r3, #80	; 0x50
 8001c2e:	d022      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x320>
 8001c30:	2b50      	cmp	r3, #80	; 0x50
 8001c32:	d82a      	bhi.n	8001c8a <HAL_CAN_IRQHandler+0x334>
 8001c34:	2b40      	cmp	r3, #64	; 0x40
 8001c36:	d019      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x316>
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d826      	bhi.n	8001c8a <HAL_CAN_IRQHandler+0x334>
 8001c3c:	2b30      	cmp	r3, #48	; 0x30
 8001c3e:	d010      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x30c>
 8001c40:	2b30      	cmp	r3, #48	; 0x30
 8001c42:	d822      	bhi.n	8001c8a <HAL_CAN_IRQHandler+0x334>
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d002      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x2f8>
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d005      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c4c:	e01d      	b.n	8001c8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c56:	e019      	b.n	8001c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c60:	e014      	b.n	8001c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c6a:	e00f      	b.n	8001c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c74:	e00a      	b.n	8001c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c7e:	e005      	b.n	8001c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c88:	e000      	b.n	8001c8c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f854 	bl	8001d64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d106      	bne.n	8001fb8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001fb6:	e005      	b.n	8001fc4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001fd8:	f000 f802 	bl	8001fe0 <HAL_SYSTICK_Callback>
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e165      	b.n	80022d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8154 	bne.w	80022d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d005      	beq.n	8002042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203e:	2b02      	cmp	r3, #2
 8002040:	d130      	bne.n	80020a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 0201 	and.w	r2, r3, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d017      	beq.n	80020e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d123      	bne.n	8002134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80ae 	beq.w	80022d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_GPIO_Init+0x300>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_GPIO_Init+0x304>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <HAL_GPIO_Init+0x308>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x21a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <HAL_GPIO_Init+0x30c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x216>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4d      	ldr	r2, [pc, #308]	; (8002300 <HAL_GPIO_Init+0x310>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x212>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4c      	ldr	r2, [pc, #304]	; (8002304 <HAL_GPIO_Init+0x314>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x20e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_GPIO_Init+0x318>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x20a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4a      	ldr	r2, [pc, #296]	; (800230c <HAL_GPIO_Init+0x31c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x206>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a49      	ldr	r2, [pc, #292]	; (8002310 <HAL_GPIO_Init+0x320>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x202>
 80021ee:	2306      	movs	r3, #6
 80021f0:	e00c      	b.n	800220c <HAL_GPIO_Init+0x21c>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00a      	b.n	800220c <HAL_GPIO_Init+0x21c>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x21c>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x21c>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x21c>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x21c>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x21c>
 800220a:	2300      	movs	r3, #0
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221c:	4935      	ldr	r1, [pc, #212]	; (80022f4 <HAL_GPIO_Init+0x304>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_GPIO_Init+0x324>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224e:	4a31      	ldr	r2, [pc, #196]	; (8002314 <HAL_GPIO_Init+0x324>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x324>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_GPIO_Init+0x324>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_GPIO_Init+0x324>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_GPIO_Init+0x324>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_GPIO_Init+0x324>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_GPIO_Init+0x324>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	f67f ae96 	bls.w	800200c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40021400 	.word	0x40021400
 8002310:	40021800 	.word	0x40021800
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	041a      	lsls	r2, r3, #16
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43d9      	mvns	r1, r3
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	400b      	ands	r3, r1
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f806 	bl	80023b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cc      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d044      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e067      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fe0e 	bl	80010d8 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe fe0a 	bl	80010d8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f855 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fd6e 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	08004360 	.word	0x08004360
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08004370 	.word	0x08004370

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d8:	f7ff ffdc 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08004370 	.word	0x08004370

080025fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002600:	b088      	sub	sp, #32
 8002602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002618:	4bce      	ldr	r3, [pc, #824]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b0c      	cmp	r3, #12
 8002622:	f200 818d 	bhi.w	8002940 <HAL_RCC_GetSysClockFreq+0x344>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_RCC_GetSysClockFreq+0x30>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002661 	.word	0x08002661
 8002630:	08002941 	.word	0x08002941
 8002634:	08002941 	.word	0x08002941
 8002638:	08002941 	.word	0x08002941
 800263c:	08002667 	.word	0x08002667
 8002640:	08002941 	.word	0x08002941
 8002644:	08002941 	.word	0x08002941
 8002648:	08002941 	.word	0x08002941
 800264c:	0800266d 	.word	0x0800266d
 8002650:	08002941 	.word	0x08002941
 8002654:	08002941 	.word	0x08002941
 8002658:	08002941 	.word	0x08002941
 800265c:	080027e1 	.word	0x080027e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4bbd      	ldr	r3, [pc, #756]	; (8002958 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002662:	61bb      	str	r3, [r7, #24]
       break;
 8002664:	e16f      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002666:	4bbd      	ldr	r3, [pc, #756]	; (800295c <HAL_RCC_GetSysClockFreq+0x360>)
 8002668:	61bb      	str	r3, [r7, #24]
      break;
 800266a:	e16c      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266c:	4bb9      	ldr	r3, [pc, #740]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002674:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002676:	4bb7      	ldr	r3, [pc, #732]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d053      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4bb4      	ldr	r3, [pc, #720]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	461a      	mov	r2, r3
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	ea02 0400 	and.w	r4, r2, r0
 800269a:	603c      	str	r4, [r7, #0]
 800269c:	400b      	ands	r3, r1
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	014b      	lsls	r3, r1, #5
 80026b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026b6:	0142      	lsls	r2, r0, #5
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	1ac0      	subs	r0, r0, r3
 80026c0:	462b      	mov	r3, r5
 80026c2:	eb61 0103 	sbc.w	r1, r1, r3
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	018b      	lsls	r3, r1, #6
 80026d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026d4:	0182      	lsls	r2, r0, #6
 80026d6:	1a12      	subs	r2, r2, r0
 80026d8:	eb63 0301 	sbc.w	r3, r3, r1
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	00d9      	lsls	r1, r3, #3
 80026e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ea:	00d0      	lsls	r0, r2, #3
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4621      	mov	r1, r4
 80026f2:	1852      	adds	r2, r2, r1
 80026f4:	4629      	mov	r1, r5
 80026f6:	eb43 0101 	adc.w	r1, r3, r1
 80026fa:	460b      	mov	r3, r1
 80026fc:	f04f 0000 	mov.w	r0, #0
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	0259      	lsls	r1, r3, #9
 8002706:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800270a:	0250      	lsls	r0, r2, #9
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	461a      	mov	r2, r3
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f7fd fdd0 	bl	80002c0 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	e04c      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b8a      	ldr	r3, [pc, #552]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	461a      	mov	r2, r3
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	ea02 0a00 	and.w	sl, r2, r0
 8002742:	ea03 0b01 	and.w	fp, r3, r1
 8002746:	4650      	mov	r0, sl
 8002748:	4659      	mov	r1, fp
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	014b      	lsls	r3, r1, #5
 8002754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002758:	0142      	lsls	r2, r0, #5
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	ebb0 000a 	subs.w	r0, r0, sl
 8002762:	eb61 010b 	sbc.w	r1, r1, fp
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	018b      	lsls	r3, r1, #6
 8002770:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002774:	0182      	lsls	r2, r0, #6
 8002776:	1a12      	subs	r2, r2, r0
 8002778:	eb63 0301 	sbc.w	r3, r3, r1
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	00d9      	lsls	r1, r3, #3
 8002786:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800278a:	00d0      	lsls	r0, r2, #3
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	eb12 020a 	adds.w	r2, r2, sl
 8002794:	eb43 030b 	adc.w	r3, r3, fp
 8002798:	f04f 0000 	mov.w	r0, #0
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	0299      	lsls	r1, r3, #10
 80027a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027a6:	0290      	lsls	r0, r2, #10
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	f7fd fd82 	bl	80002c0 <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4613      	mov	r3, r2
 80027c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c4:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	61bb      	str	r3, [r7, #24]
      break;
 80027de:	e0b2      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e0:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04d      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	461a      	mov	r2, r3
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	ea02 0800 	and.w	r8, r2, r0
 800280e:	ea03 0901 	and.w	r9, r3, r1
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	014b      	lsls	r3, r1, #5
 8002820:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002824:	0142      	lsls	r2, r0, #5
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	ebb0 0008 	subs.w	r0, r0, r8
 800282e:	eb61 0109 	sbc.w	r1, r1, r9
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002840:	0182      	lsls	r2, r0, #6
 8002842:	1a12      	subs	r2, r2, r0
 8002844:	eb63 0301 	sbc.w	r3, r3, r1
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	00d9      	lsls	r1, r3, #3
 8002852:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002856:	00d0      	lsls	r0, r2, #3
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	eb12 0208 	adds.w	r2, r2, r8
 8002860:	eb43 0309 	adc.w	r3, r3, r9
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	0259      	lsls	r1, r3, #9
 800286e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002872:	0250      	lsls	r0, r2, #9
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	461a      	mov	r2, r3
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	f7fd fd1c 	bl	80002c0 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4613      	mov	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	e04a      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	461a      	mov	r2, r3
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	ea02 0400 	and.w	r4, r2, r0
 80028aa:	ea03 0501 	and.w	r5, r3, r1
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	014b      	lsls	r3, r1, #5
 80028bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028c0:	0142      	lsls	r2, r0, #5
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	1b00      	subs	r0, r0, r4
 80028c8:	eb61 0105 	sbc.w	r1, r1, r5
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	018b      	lsls	r3, r1, #6
 80028d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028da:	0182      	lsls	r2, r0, #6
 80028dc:	1a12      	subs	r2, r2, r0
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	00d9      	lsls	r1, r3, #3
 80028ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f0:	00d0      	lsls	r0, r2, #3
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	1912      	adds	r2, r2, r4
 80028f8:	eb45 0303 	adc.w	r3, r5, r3
 80028fc:	f04f 0000 	mov.w	r0, #0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	0299      	lsls	r1, r3, #10
 8002906:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800290a:	0290      	lsls	r0, r2, #10
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	461a      	mov	r2, r3
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f7fd fcd0 	bl	80002c0 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_GetSysClockFreq+0x358>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0f1b      	lsrs	r3, r3, #28
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	61bb      	str	r3, [r7, #24]
      break;
 800293e:	e002      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002942:	61bb      	str	r3, [r7, #24]
      break;
 8002944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002946:	69bb      	ldr	r3, [r7, #24]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400
 800295c:	007a1200 	.word	0x007a1200

08002960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e28d      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8083 	beq.w	8002a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002980:	4b94      	ldr	r3, [pc, #592]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d019      	beq.n	80029c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800298c:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002994:	2b08      	cmp	r3, #8
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002998:	4b8e      	ldr	r3, [pc, #568]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d112      	bne.n	80029d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b84      	ldr	r3, [pc, #528]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05b      	beq.n	8002a84 <HAL_RCC_OscConfig+0x124>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d157      	bne.n	8002a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e25a      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x90>
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xcc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0xb4>
 80029fa:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a75      	ldr	r2, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a72      	ldr	r2, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xcc>
 8002a14:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6b      	ldr	r2, [pc, #428]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fb50 	bl	80010d8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fb4c 	bl	80010d8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e21f      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xdc>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fb3c 	bl	80010d8 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fb38 	bl	80010d8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e20b      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x104>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d06f      	beq.n	8002b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a92:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d11c      	bne.n	8002afc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x186>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1d3      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4937      	ldr	r1, [pc, #220]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e03a      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_OscConfig+0x278>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fae5 	bl	80010d8 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fae1 	bl	80010d8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e1b4      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4925      	ldr	r1, [pc, #148]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x278>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fac4 	bl	80010d8 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fac0 	bl	80010d8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e193      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d036      	beq.n	8002bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_RCC_OscConfig+0x27c>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe faa4 	bl	80010d8 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe faa0 	bl	80010d8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e173      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x234>
 8002bb2:	e01b      	b.n	8002bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fa8d 	bl	80010d8 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	e00e      	b.n	8002be0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fa89 	bl	80010d8 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d907      	bls.n	8002be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e15c      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	42470000 	.word	0x42470000
 8002bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b8a      	ldr	r3, [pc, #552]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ea      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8097 	beq.w	8002d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fa49 	bl	80010d8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe fa45 	bl	80010d8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e118      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x4b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x31e>
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x358>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x340>
 8002c86:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a5d      	ldr	r2, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x358>
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a59      	ldr	r2, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fa0a 	bl	80010d8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fa06 	bl	80010d8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0d7      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ee      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x368>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe f9f4 	bl	80010d8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f9f0 	bl	80010d8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0c1      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0a:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ee      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80ad 	beq.w	8002e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d060      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d145      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x4b4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f9c4 	bl	80010d8 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe f9c0 	bl	80010d8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e093      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	071b      	lsls	r3, r3, #28
 8002d9e:	491b      	ldr	r1, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4b4>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe f995 	bl	80010d8 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe f991 	bl	80010d8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e064      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x452>
 8002dd0:	e05c      	b.n	8002e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x4b4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f97e 	bl	80010d8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f97a 	bl	80010d8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e04d      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x480>
 8002dfe:	e045      	b.n	8002e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e040      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCC_OscConfig+0x538>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d030      	beq.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d129      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d122      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d119      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10f      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e041      	b.n	8002f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd ffd2 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f000 f9ce 	bl	800327c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04e      	b.n	8002ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a23      	ldr	r2, [pc, #140]	; (8003000 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d022      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d01d      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d111      	bne.n	8002fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d010      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	e007      	b.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40010400 	.word	0x40010400
 8003014:	40014000 	.word	0x40014000
 8003018:	40001800 	.word	0x40001800

0800301c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0202 	mvn.w	r2, #2
 8003048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8ee 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8e0 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8f1 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0204 	mvn.w	r2, #4
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8c4 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8b6 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8c7 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0208 	mvn.w	r2, #8
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f89a 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f88c 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f89d 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b10      	cmp	r3, #16
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0210 	mvn.w	r2, #16
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2208      	movs	r2, #8
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f870 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f862 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f873 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0201 	mvn.w	r2, #1
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fcd8 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f902 	bl	80033d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f838 	bl	8003268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b20      	cmp	r3, #32
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0220 	mvn.w	r2, #32
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8cc 	bl	80033bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <TIM_Base_SetConfig+0x114>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d00f      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <TIM_Base_SetConfig+0x118>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <TIM_Base_SetConfig+0x11c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3b      	ldr	r2, [pc, #236]	; (800339c <TIM_Base_SetConfig+0x120>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <TIM_Base_SetConfig+0x114>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d027      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <TIM_Base_SetConfig+0x118>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d023      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2b      	ldr	r2, [pc, #172]	; (8003398 <TIM_Base_SetConfig+0x11c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <TIM_Base_SetConfig+0x120>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d017      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <TIM_Base_SetConfig+0x128>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <TIM_Base_SetConfig+0x12c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <TIM_Base_SetConfig+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <TIM_Base_SetConfig+0x134>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <TIM_Base_SetConfig+0x138>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <TIM_Base_SetConfig+0x13c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <TIM_Base_SetConfig+0x114>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0xf8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d103      	bne.n	800337c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	615a      	str	r2, [r3, #20]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800
 80033b0:	40001800 	.word	0x40001800
 80033b4:	40001c00 	.word	0x40001c00
 80033b8:	40002000 	.word	0x40002000

080033bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e03f      	b.n	8003476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fc9a 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f929 	bl	8003680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800345c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af02      	add	r7, sp, #8
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	d17c      	bne.n	8003598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_UART_Transmit+0x2c>
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e075      	b.n	800359a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Transmit+0x3e>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e06e      	b.n	800359a <HAL_UART_Transmit+0x11c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2221      	movs	r2, #33	; 0x21
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d2:	f7fd fe01 	bl	80010d8 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d108      	bne.n	8003500 <HAL_UART_Transmit+0x82>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e003      	b.n	8003508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003510:	e02a      	b.n	8003568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f840 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e036      	b.n	800359a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3302      	adds	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e007      	b.n	800355a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1cf      	bne.n	8003512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2140      	movs	r1, #64	; 0x40
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f810 	bl	80035a2 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e006      	b.n	800359a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b090      	sub	sp, #64	; 0x40
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	e050      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d04c      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c2:	f7fd fd89 	bl	80010d8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d241      	bcs.n	8003656 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f2:	637a      	str	r2, [r7, #52]	; 0x34
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	613b      	str	r3, [r7, #16]
   return(result);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003626:	623a      	str	r2, [r7, #32]
 8003628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	61bb      	str	r3, [r7, #24]
   return(result);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e00f      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	d09f      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3740      	adds	r7, #64	; 0x40
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003684:	b09f      	sub	sp, #124	; 0x7c
 8003686:	af00      	add	r7, sp, #0
 8003688:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003696:	68d9      	ldr	r1, [r3, #12]
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	ea40 0301 	orr.w	r3, r0, r1
 80036a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c4:	f021 010c 	bic.w	r1, r1, #12
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ce:	430b      	orrs	r3, r1
 80036d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036de:	6999      	ldr	r1, [r3, #24]
 80036e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	ea40 0301 	orr.w	r3, r0, r1
 80036e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4bc5      	ldr	r3, [pc, #788]	; (8003a04 <UART_SetConfig+0x384>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d004      	beq.n	80036fe <UART_SetConfig+0x7e>
 80036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4bc3      	ldr	r3, [pc, #780]	; (8003a08 <UART_SetConfig+0x388>)
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d103      	bne.n	8003706 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036fe:	f7fe ff69 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 8003702:	6778      	str	r0, [r7, #116]	; 0x74
 8003704:	e002      	b.n	800370c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003706:	f7fe ff51 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 800370a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003714:	f040 80b6 	bne.w	8003884 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371a:	461c      	mov	r4, r3
 800371c:	f04f 0500 	mov.w	r5, #0
 8003720:	4622      	mov	r2, r4
 8003722:	462b      	mov	r3, r5
 8003724:	1891      	adds	r1, r2, r2
 8003726:	6439      	str	r1, [r7, #64]	; 0x40
 8003728:	415b      	adcs	r3, r3
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
 800372c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003730:	1912      	adds	r2, r2, r4
 8003732:	eb45 0303 	adc.w	r3, r5, r3
 8003736:	f04f 0000 	mov.w	r0, #0
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	00d9      	lsls	r1, r3, #3
 8003740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003744:	00d0      	lsls	r0, r2, #3
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	1911      	adds	r1, r2, r4
 800374c:	6639      	str	r1, [r7, #96]	; 0x60
 800374e:	416b      	adcs	r3, r5
 8003750:	667b      	str	r3, [r7, #100]	; 0x64
 8003752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	1891      	adds	r1, r2, r2
 800375e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003760:	415b      	adcs	r3, r3
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003768:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800376c:	f7fc fda8 	bl	80002c0 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4ba5      	ldr	r3, [pc, #660]	; (8003a0c <UART_SetConfig+0x38c>)
 8003776:	fba3 2302 	umull	r2, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	011e      	lsls	r6, r3, #4
 800377e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003780:	461c      	mov	r4, r3
 8003782:	f04f 0500 	mov.w	r5, #0
 8003786:	4622      	mov	r2, r4
 8003788:	462b      	mov	r3, r5
 800378a:	1891      	adds	r1, r2, r2
 800378c:	6339      	str	r1, [r7, #48]	; 0x30
 800378e:	415b      	adcs	r3, r3
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003796:	1912      	adds	r2, r2, r4
 8003798:	eb45 0303 	adc.w	r3, r5, r3
 800379c:	f04f 0000 	mov.w	r0, #0
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	00d9      	lsls	r1, r3, #3
 80037a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037aa:	00d0      	lsls	r0, r2, #3
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	1911      	adds	r1, r2, r4
 80037b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80037b4:	416b      	adcs	r3, r5
 80037b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	461a      	mov	r2, r3
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	1891      	adds	r1, r2, r2
 80037c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80037c6:	415b      	adcs	r3, r3
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037d2:	f7fc fd75 	bl	80002c0 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4b8c      	ldr	r3, [pc, #560]	; (8003a0c <UART_SetConfig+0x38c>)
 80037dc:	fba3 1302 	umull	r1, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	3332      	adds	r3, #50	; 0x32
 80037ee:	4a87      	ldr	r2, [pc, #540]	; (8003a0c <UART_SetConfig+0x38c>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037fc:	441e      	add	r6, r3
 80037fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003800:	4618      	mov	r0, r3
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	1894      	adds	r4, r2, r2
 800380c:	623c      	str	r4, [r7, #32]
 800380e:	415b      	adcs	r3, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003816:	1812      	adds	r2, r2, r0
 8003818:	eb41 0303 	adc.w	r3, r1, r3
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	f04f 0500 	mov.w	r5, #0
 8003824:	00dd      	lsls	r5, r3, #3
 8003826:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800382a:	00d4      	lsls	r4, r2, #3
 800382c:	4622      	mov	r2, r4
 800382e:	462b      	mov	r3, r5
 8003830:	1814      	adds	r4, r2, r0
 8003832:	653c      	str	r4, [r7, #80]	; 0x50
 8003834:	414b      	adcs	r3, r1
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
 8003838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	461a      	mov	r2, r3
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	1891      	adds	r1, r2, r2
 8003844:	61b9      	str	r1, [r7, #24]
 8003846:	415b      	adcs	r3, r3
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003852:	f7fc fd35 	bl	80002c0 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <UART_SetConfig+0x38c>)
 800385c:	fba3 1302 	umull	r1, r3, r3, r2
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	2164      	movs	r1, #100	; 0x64
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	3332      	adds	r3, #50	; 0x32
 800386e:	4a67      	ldr	r2, [pc, #412]	; (8003a0c <UART_SetConfig+0x38c>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	f003 0207 	and.w	r2, r3, #7
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4432      	add	r2, r6
 8003880:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003882:	e0b9      	b.n	80039f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003886:	461c      	mov	r4, r3
 8003888:	f04f 0500 	mov.w	r5, #0
 800388c:	4622      	mov	r2, r4
 800388e:	462b      	mov	r3, r5
 8003890:	1891      	adds	r1, r2, r2
 8003892:	6139      	str	r1, [r7, #16]
 8003894:	415b      	adcs	r3, r3
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800389c:	1912      	adds	r2, r2, r4
 800389e:	eb45 0303 	adc.w	r3, r5, r3
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	00d9      	lsls	r1, r3, #3
 80038ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b0:	00d0      	lsls	r0, r2, #3
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	eb12 0804 	adds.w	r8, r2, r4
 80038ba:	eb43 0905 	adc.w	r9, r3, r5
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	008b      	lsls	r3, r1, #2
 80038d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038d6:	0082      	lsls	r2, r0, #2
 80038d8:	4640      	mov	r0, r8
 80038da:	4649      	mov	r1, r9
 80038dc:	f7fc fcf0 	bl	80002c0 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <UART_SetConfig+0x38c>)
 80038e6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	011e      	lsls	r6, r3, #4
 80038ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f0:	4618      	mov	r0, r3
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	1894      	adds	r4, r2, r2
 80038fc:	60bc      	str	r4, [r7, #8]
 80038fe:	415b      	adcs	r3, r3
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003906:	1812      	adds	r2, r2, r0
 8003908:	eb41 0303 	adc.w	r3, r1, r3
 800390c:	f04f 0400 	mov.w	r4, #0
 8003910:	f04f 0500 	mov.w	r5, #0
 8003914:	00dd      	lsls	r5, r3, #3
 8003916:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800391a:	00d4      	lsls	r4, r2, #3
 800391c:	4622      	mov	r2, r4
 800391e:	462b      	mov	r3, r5
 8003920:	1814      	adds	r4, r2, r0
 8003922:	64bc      	str	r4, [r7, #72]	; 0x48
 8003924:	414b      	adcs	r3, r1
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	008b      	lsls	r3, r1, #2
 800393c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003940:	0082      	lsls	r2, r0, #2
 8003942:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003946:	f7fc fcbb 	bl	80002c0 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <UART_SetConfig+0x38c>)
 8003950:	fba3 1302 	umull	r1, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	2164      	movs	r1, #100	; 0x64
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	3332      	adds	r3, #50	; 0x32
 8003962:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <UART_SetConfig+0x38c>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396e:	441e      	add	r6, r3
 8003970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003972:	4618      	mov	r0, r3
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	1894      	adds	r4, r2, r2
 800397e:	603c      	str	r4, [r7, #0]
 8003980:	415b      	adcs	r3, r3
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003988:	1812      	adds	r2, r2, r0
 800398a:	eb41 0303 	adc.w	r3, r1, r3
 800398e:	f04f 0400 	mov.w	r4, #0
 8003992:	f04f 0500 	mov.w	r5, #0
 8003996:	00dd      	lsls	r5, r3, #3
 8003998:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800399c:	00d4      	lsls	r4, r2, #3
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	eb12 0a00 	adds.w	sl, r2, r0
 80039a6:	eb43 0b01 	adc.w	fp, r3, r1
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	008b      	lsls	r3, r1, #2
 80039be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039c2:	0082      	lsls	r2, r0, #2
 80039c4:	4650      	mov	r0, sl
 80039c6:	4659      	mov	r1, fp
 80039c8:	f7fc fc7a 	bl	80002c0 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <UART_SetConfig+0x38c>)
 80039d2:	fba3 1302 	umull	r1, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2164      	movs	r1, #100	; 0x64
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <UART_SetConfig+0x38c>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	f003 020f 	and.w	r2, r3, #15
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4432      	add	r2, r6
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	377c      	adds	r7, #124	; 0x7c
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	bf00      	nop
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4d0d      	ldr	r5, [pc, #52]	; (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2600      	movs	r6, #0
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4d0b      	ldr	r5, [pc, #44]	; (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	; (8003a60 <__libc_init_array+0x44>)
 8003a30:	f000 fc46 	bl	80042c0 <_init>
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2600      	movs	r6, #0
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	080043b4 	.word	0x080043b4
 8003a58:	080043b4 	.word	0x080043b4
 8003a5c:	080043b4 	.word	0x080043b4
 8003a60:	080043b8 	.word	0x080043b8

08003a64 <siprintf>:
 8003a64:	b40e      	push	{r1, r2, r3}
 8003a66:	b500      	push	{lr}
 8003a68:	b09c      	sub	sp, #112	; 0x70
 8003a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a6c:	9002      	str	r0, [sp, #8]
 8003a6e:	9006      	str	r0, [sp, #24]
 8003a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a74:	4809      	ldr	r0, [pc, #36]	; (8003a9c <siprintf+0x38>)
 8003a76:	9107      	str	r1, [sp, #28]
 8003a78:	9104      	str	r1, [sp, #16]
 8003a7a:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <siprintf+0x3c>)
 8003a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a80:	9105      	str	r1, [sp, #20]
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	a902      	add	r1, sp, #8
 8003a88:	f000 f868 	bl	8003b5c <_svfiprintf_r>
 8003a8c:	9b02      	ldr	r3, [sp, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	b01c      	add	sp, #112	; 0x70
 8003a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a98:	b003      	add	sp, #12
 8003a9a:	4770      	bx	lr
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	ffff0208 	.word	0xffff0208

08003aa4 <__ssputs_r>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	688e      	ldr	r6, [r1, #8]
 8003aaa:	429e      	cmp	r6, r3
 8003aac:	4682      	mov	sl, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	4690      	mov	r8, r2
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	d838      	bhi.n	8003b28 <__ssputs_r+0x84>
 8003ab6:	898a      	ldrh	r2, [r1, #12]
 8003ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003abc:	d032      	beq.n	8003b24 <__ssputs_r+0x80>
 8003abe:	6825      	ldr	r5, [r4, #0]
 8003ac0:	6909      	ldr	r1, [r1, #16]
 8003ac2:	eba5 0901 	sub.w	r9, r5, r1
 8003ac6:	6965      	ldr	r5, [r4, #20]
 8003ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	444b      	add	r3, r9
 8003ad4:	106d      	asrs	r5, r5, #1
 8003ad6:	429d      	cmp	r5, r3
 8003ad8:	bf38      	it	cc
 8003ada:	461d      	movcc	r5, r3
 8003adc:	0553      	lsls	r3, r2, #21
 8003ade:	d531      	bpl.n	8003b44 <__ssputs_r+0xa0>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f000 fb47 	bl	8004174 <_malloc_r>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	b950      	cbnz	r0, 8003b00 <__ssputs_r+0x5c>
 8003aea:	230c      	movs	r3, #12
 8003aec:	f8ca 3000 	str.w	r3, [sl]
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	6921      	ldr	r1, [r4, #16]
 8003b02:	464a      	mov	r2, r9
 8003b04:	f000 fabe 	bl	8004084 <memcpy>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	6126      	str	r6, [r4, #16]
 8003b16:	6165      	str	r5, [r4, #20]
 8003b18:	444e      	add	r6, r9
 8003b1a:	eba5 0509 	sub.w	r5, r5, r9
 8003b1e:	6026      	str	r6, [r4, #0]
 8003b20:	60a5      	str	r5, [r4, #8]
 8003b22:	463e      	mov	r6, r7
 8003b24:	42be      	cmp	r6, r7
 8003b26:	d900      	bls.n	8003b2a <__ssputs_r+0x86>
 8003b28:	463e      	mov	r6, r7
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	4641      	mov	r1, r8
 8003b30:	f000 fab6 	bl	80040a0 <memmove>
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	1b9b      	subs	r3, r3, r6
 8003b3a:	4432      	add	r2, r6
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	6022      	str	r2, [r4, #0]
 8003b40:	2000      	movs	r0, #0
 8003b42:	e7db      	b.n	8003afc <__ssputs_r+0x58>
 8003b44:	462a      	mov	r2, r5
 8003b46:	f000 fb6f 	bl	8004228 <_realloc_r>
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d1e1      	bne.n	8003b14 <__ssputs_r+0x70>
 8003b50:	6921      	ldr	r1, [r4, #16]
 8003b52:	4650      	mov	r0, sl
 8003b54:	f000 fabe 	bl	80040d4 <_free_r>
 8003b58:	e7c7      	b.n	8003aea <__ssputs_r+0x46>
	...

08003b5c <_svfiprintf_r>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	4698      	mov	r8, r3
 8003b62:	898b      	ldrh	r3, [r1, #12]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	b09d      	sub	sp, #116	; 0x74
 8003b68:	4607      	mov	r7, r0
 8003b6a:	460d      	mov	r5, r1
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	d50e      	bpl.n	8003b8e <_svfiprintf_r+0x32>
 8003b70:	690b      	ldr	r3, [r1, #16]
 8003b72:	b963      	cbnz	r3, 8003b8e <_svfiprintf_r+0x32>
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	f000 fafd 	bl	8004174 <_malloc_r>
 8003b7a:	6028      	str	r0, [r5, #0]
 8003b7c:	6128      	str	r0, [r5, #16]
 8003b7e:	b920      	cbnz	r0, 8003b8a <_svfiprintf_r+0x2e>
 8003b80:	230c      	movs	r3, #12
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	e0d1      	b.n	8003d2e <_svfiprintf_r+0x1d2>
 8003b8a:	2340      	movs	r3, #64	; 0x40
 8003b8c:	616b      	str	r3, [r5, #20]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
 8003b92:	2320      	movs	r3, #32
 8003b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b9c:	2330      	movs	r3, #48	; 0x30
 8003b9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d48 <_svfiprintf_r+0x1ec>
 8003ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ba6:	f04f 0901 	mov.w	r9, #1
 8003baa:	4623      	mov	r3, r4
 8003bac:	469a      	mov	sl, r3
 8003bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bb2:	b10a      	cbz	r2, 8003bb8 <_svfiprintf_r+0x5c>
 8003bb4:	2a25      	cmp	r2, #37	; 0x25
 8003bb6:	d1f9      	bne.n	8003bac <_svfiprintf_r+0x50>
 8003bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bbc:	d00b      	beq.n	8003bd6 <_svfiprintf_r+0x7a>
 8003bbe:	465b      	mov	r3, fp
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7ff ff6d 	bl	8003aa4 <__ssputs_r>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	f000 80aa 	beq.w	8003d24 <_svfiprintf_r+0x1c8>
 8003bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bd2:	445a      	add	r2, fp
 8003bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a2 	beq.w	8003d24 <_svfiprintf_r+0x1c8>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bea:	f10a 0a01 	add.w	sl, sl, #1
 8003bee:	9304      	str	r3, [sp, #16]
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8003bf8:	4654      	mov	r4, sl
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c00:	4851      	ldr	r0, [pc, #324]	; (8003d48 <_svfiprintf_r+0x1ec>)
 8003c02:	f7fc fb0d 	bl	8000220 <memchr>
 8003c06:	9a04      	ldr	r2, [sp, #16]
 8003c08:	b9d8      	cbnz	r0, 8003c42 <_svfiprintf_r+0xe6>
 8003c0a:	06d0      	lsls	r0, r2, #27
 8003c0c:	bf44      	itt	mi
 8003c0e:	2320      	movmi	r3, #32
 8003c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c14:	0711      	lsls	r1, r2, #28
 8003c16:	bf44      	itt	mi
 8003c18:	232b      	movmi	r3, #43	; 0x2b
 8003c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c22:	2b2a      	cmp	r3, #42	; 0x2a
 8003c24:	d015      	beq.n	8003c52 <_svfiprintf_r+0xf6>
 8003c26:	9a07      	ldr	r2, [sp, #28]
 8003c28:	4654      	mov	r4, sl
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f04f 0c0a 	mov.w	ip, #10
 8003c30:	4621      	mov	r1, r4
 8003c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c36:	3b30      	subs	r3, #48	; 0x30
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d94e      	bls.n	8003cda <_svfiprintf_r+0x17e>
 8003c3c:	b1b0      	cbz	r0, 8003c6c <_svfiprintf_r+0x110>
 8003c3e:	9207      	str	r2, [sp, #28]
 8003c40:	e014      	b.n	8003c6c <_svfiprintf_r+0x110>
 8003c42:	eba0 0308 	sub.w	r3, r0, r8
 8003c46:	fa09 f303 	lsl.w	r3, r9, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	46a2      	mov	sl, r4
 8003c50:	e7d2      	b.n	8003bf8 <_svfiprintf_r+0x9c>
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	1d19      	adds	r1, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9103      	str	r1, [sp, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfbb      	ittet	lt
 8003c5e:	425b      	neglt	r3, r3
 8003c60:	f042 0202 	orrlt.w	r2, r2, #2
 8003c64:	9307      	strge	r3, [sp, #28]
 8003c66:	9307      	strlt	r3, [sp, #28]
 8003c68:	bfb8      	it	lt
 8003c6a:	9204      	strlt	r2, [sp, #16]
 8003c6c:	7823      	ldrb	r3, [r4, #0]
 8003c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c70:	d10c      	bne.n	8003c8c <_svfiprintf_r+0x130>
 8003c72:	7863      	ldrb	r3, [r4, #1]
 8003c74:	2b2a      	cmp	r3, #42	; 0x2a
 8003c76:	d135      	bne.n	8003ce4 <_svfiprintf_r+0x188>
 8003c78:	9b03      	ldr	r3, [sp, #12]
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	9203      	str	r2, [sp, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bfb8      	it	lt
 8003c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c88:	3402      	adds	r4, #2
 8003c8a:	9305      	str	r3, [sp, #20]
 8003c8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d58 <_svfiprintf_r+0x1fc>
 8003c90:	7821      	ldrb	r1, [r4, #0]
 8003c92:	2203      	movs	r2, #3
 8003c94:	4650      	mov	r0, sl
 8003c96:	f7fc fac3 	bl	8000220 <memchr>
 8003c9a:	b140      	cbz	r0, 8003cae <_svfiprintf_r+0x152>
 8003c9c:	2340      	movs	r3, #64	; 0x40
 8003c9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ca6:	9b04      	ldr	r3, [sp, #16]
 8003ca8:	4303      	orrs	r3, r0
 8003caa:	3401      	adds	r4, #1
 8003cac:	9304      	str	r3, [sp, #16]
 8003cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb2:	4826      	ldr	r0, [pc, #152]	; (8003d4c <_svfiprintf_r+0x1f0>)
 8003cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cb8:	2206      	movs	r2, #6
 8003cba:	f7fc fab1 	bl	8000220 <memchr>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d038      	beq.n	8003d34 <_svfiprintf_r+0x1d8>
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <_svfiprintf_r+0x1f4>)
 8003cc4:	bb1b      	cbnz	r3, 8003d0e <_svfiprintf_r+0x1b2>
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	3307      	adds	r3, #7
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	3308      	adds	r3, #8
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd4:	4433      	add	r3, r6
 8003cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd8:	e767      	b.n	8003baa <_svfiprintf_r+0x4e>
 8003cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cde:	460c      	mov	r4, r1
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	e7a5      	b.n	8003c30 <_svfiprintf_r+0xd4>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	3401      	adds	r4, #1
 8003ce8:	9305      	str	r3, [sp, #20]
 8003cea:	4619      	mov	r1, r3
 8003cec:	f04f 0c0a 	mov.w	ip, #10
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cf6:	3a30      	subs	r2, #48	; 0x30
 8003cf8:	2a09      	cmp	r2, #9
 8003cfa:	d903      	bls.n	8003d04 <_svfiprintf_r+0x1a8>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0c5      	beq.n	8003c8c <_svfiprintf_r+0x130>
 8003d00:	9105      	str	r1, [sp, #20]
 8003d02:	e7c3      	b.n	8003c8c <_svfiprintf_r+0x130>
 8003d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d08:	4604      	mov	r4, r0
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e7f0      	b.n	8003cf0 <_svfiprintf_r+0x194>
 8003d0e:	ab03      	add	r3, sp, #12
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	462a      	mov	r2, r5
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <_svfiprintf_r+0x1f8>)
 8003d16:	a904      	add	r1, sp, #16
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f3af 8000 	nop.w
 8003d1e:	1c42      	adds	r2, r0, #1
 8003d20:	4606      	mov	r6, r0
 8003d22:	d1d6      	bne.n	8003cd2 <_svfiprintf_r+0x176>
 8003d24:	89ab      	ldrh	r3, [r5, #12]
 8003d26:	065b      	lsls	r3, r3, #25
 8003d28:	f53f af2c 	bmi.w	8003b84 <_svfiprintf_r+0x28>
 8003d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d2e:	b01d      	add	sp, #116	; 0x74
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	ab03      	add	r3, sp, #12
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	462a      	mov	r2, r5
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <_svfiprintf_r+0x1f8>)
 8003d3c:	a904      	add	r1, sp, #16
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f000 f87a 	bl	8003e38 <_printf_i>
 8003d44:	e7eb      	b.n	8003d1e <_svfiprintf_r+0x1c2>
 8003d46:	bf00      	nop
 8003d48:	08004378 	.word	0x08004378
 8003d4c:	08004382 	.word	0x08004382
 8003d50:	00000000 	.word	0x00000000
 8003d54:	08003aa5 	.word	0x08003aa5
 8003d58:	0800437e 	.word	0x0800437e

08003d5c <_printf_common>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	4616      	mov	r6, r2
 8003d62:	4699      	mov	r9, r3
 8003d64:	688a      	ldr	r2, [r1, #8]
 8003d66:	690b      	ldr	r3, [r1, #16]
 8003d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	bfb8      	it	lt
 8003d70:	4613      	movlt	r3, r2
 8003d72:	6033      	str	r3, [r6, #0]
 8003d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d78:	4607      	mov	r7, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	b10a      	cbz	r2, 8003d82 <_printf_common+0x26>
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	0699      	lsls	r1, r3, #26
 8003d86:	bf42      	ittt	mi
 8003d88:	6833      	ldrmi	r3, [r6, #0]
 8003d8a:	3302      	addmi	r3, #2
 8003d8c:	6033      	strmi	r3, [r6, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	f015 0506 	ands.w	r5, r5, #6
 8003d94:	d106      	bne.n	8003da4 <_printf_common+0x48>
 8003d96:	f104 0a19 	add.w	sl, r4, #25
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dc26      	bgt.n	8003df2 <_printf_common+0x96>
 8003da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da8:	1e13      	subs	r3, r2, #0
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	bf18      	it	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	0692      	lsls	r2, r2, #26
 8003db2:	d42b      	bmi.n	8003e0c <_printf_common+0xb0>
 8003db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db8:	4649      	mov	r1, r9
 8003dba:	4638      	mov	r0, r7
 8003dbc:	47c0      	blx	r8
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d01e      	beq.n	8003e00 <_printf_common+0xa4>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	68e5      	ldr	r5, [r4, #12]
 8003dc6:	6832      	ldr	r2, [r6, #0]
 8003dc8:	f003 0306 	and.w	r3, r3, #6
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	bf08      	it	eq
 8003dd0:	1aad      	subeq	r5, r5, r2
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	6922      	ldr	r2, [r4, #16]
 8003dd6:	bf0c      	ite	eq
 8003dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ddc:	2500      	movne	r5, #0
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bfc4      	itt	gt
 8003de2:	1a9b      	subgt	r3, r3, r2
 8003de4:	18ed      	addgt	r5, r5, r3
 8003de6:	2600      	movs	r6, #0
 8003de8:	341a      	adds	r4, #26
 8003dea:	42b5      	cmp	r5, r6
 8003dec:	d11a      	bne.n	8003e24 <_printf_common+0xc8>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e008      	b.n	8003e04 <_printf_common+0xa8>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4652      	mov	r2, sl
 8003df6:	4649      	mov	r1, r9
 8003df8:	4638      	mov	r0, r7
 8003dfa:	47c0      	blx	r8
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d103      	bne.n	8003e08 <_printf_common+0xac>
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	3501      	adds	r5, #1
 8003e0a:	e7c6      	b.n	8003d9a <_printf_common+0x3e>
 8003e0c:	18e1      	adds	r1, r4, r3
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	2030      	movs	r0, #48	; 0x30
 8003e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e16:	4422      	add	r2, r4
 8003e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e20:	3302      	adds	r3, #2
 8003e22:	e7c7      	b.n	8003db4 <_printf_common+0x58>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4622      	mov	r2, r4
 8003e28:	4649      	mov	r1, r9
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	47c0      	blx	r8
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d0e6      	beq.n	8003e00 <_printf_common+0xa4>
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7d9      	b.n	8003dea <_printf_common+0x8e>
	...

08003e38 <_printf_i>:
 8003e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	4691      	mov	r9, r2
 8003e40:	7e27      	ldrb	r7, [r4, #24]
 8003e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e44:	2f78      	cmp	r7, #120	; 0x78
 8003e46:	4680      	mov	r8, r0
 8003e48:	469a      	mov	sl, r3
 8003e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4e:	d807      	bhi.n	8003e60 <_printf_i+0x28>
 8003e50:	2f62      	cmp	r7, #98	; 0x62
 8003e52:	d80a      	bhi.n	8003e6a <_printf_i+0x32>
 8003e54:	2f00      	cmp	r7, #0
 8003e56:	f000 80d8 	beq.w	800400a <_printf_i+0x1d2>
 8003e5a:	2f58      	cmp	r7, #88	; 0x58
 8003e5c:	f000 80a3 	beq.w	8003fa6 <_printf_i+0x16e>
 8003e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e68:	e03a      	b.n	8003ee0 <_printf_i+0xa8>
 8003e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e6e:	2b15      	cmp	r3, #21
 8003e70:	d8f6      	bhi.n	8003e60 <_printf_i+0x28>
 8003e72:	a001      	add	r0, pc, #4	; (adr r0, 8003e78 <_printf_i+0x40>)
 8003e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e78:	08003ed1 	.word	0x08003ed1
 8003e7c:	08003ee5 	.word	0x08003ee5
 8003e80:	08003e61 	.word	0x08003e61
 8003e84:	08003e61 	.word	0x08003e61
 8003e88:	08003e61 	.word	0x08003e61
 8003e8c:	08003e61 	.word	0x08003e61
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003e61 	.word	0x08003e61
 8003e98:	08003e61 	.word	0x08003e61
 8003e9c:	08003e61 	.word	0x08003e61
 8003ea0:	08003e61 	.word	0x08003e61
 8003ea4:	08003ff1 	.word	0x08003ff1
 8003ea8:	08003f15 	.word	0x08003f15
 8003eac:	08003fd3 	.word	0x08003fd3
 8003eb0:	08003e61 	.word	0x08003e61
 8003eb4:	08003e61 	.word	0x08003e61
 8003eb8:	08004013 	.word	0x08004013
 8003ebc:	08003e61 	.word	0x08003e61
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003e61 	.word	0x08003e61
 8003ec8:	08003e61 	.word	0x08003e61
 8003ecc:	08003fdb 	.word	0x08003fdb
 8003ed0:	680b      	ldr	r3, [r1, #0]
 8003ed2:	1d1a      	adds	r2, r3, #4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	600a      	str	r2, [r1, #0]
 8003ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a3      	b.n	800402c <_printf_i+0x1f4>
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	6808      	ldr	r0, [r1, #0]
 8003ee8:	062e      	lsls	r6, r5, #24
 8003eea:	f100 0304 	add.w	r3, r0, #4
 8003eee:	d50a      	bpl.n	8003f06 <_printf_i+0xce>
 8003ef0:	6805      	ldr	r5, [r0, #0]
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	da03      	bge.n	8003f00 <_printf_i+0xc8>
 8003ef8:	232d      	movs	r3, #45	; 0x2d
 8003efa:	426d      	negs	r5, r5
 8003efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f00:	485e      	ldr	r0, [pc, #376]	; (800407c <_printf_i+0x244>)
 8003f02:	230a      	movs	r3, #10
 8003f04:	e019      	b.n	8003f3a <_printf_i+0x102>
 8003f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f0a:	6805      	ldr	r5, [r0, #0]
 8003f0c:	600b      	str	r3, [r1, #0]
 8003f0e:	bf18      	it	ne
 8003f10:	b22d      	sxthne	r5, r5
 8003f12:	e7ef      	b.n	8003ef4 <_printf_i+0xbc>
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	1d18      	adds	r0, r3, #4
 8003f1a:	6008      	str	r0, [r1, #0]
 8003f1c:	0628      	lsls	r0, r5, #24
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0xec>
 8003f20:	681d      	ldr	r5, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <_printf_i+0xf2>
 8003f24:	0669      	lsls	r1, r5, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0xe8>
 8003f28:	881d      	ldrh	r5, [r3, #0]
 8003f2a:	4854      	ldr	r0, [pc, #336]	; (800407c <_printf_i+0x244>)
 8003f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f2e:	bf0c      	ite	eq
 8003f30:	2308      	moveq	r3, #8
 8003f32:	230a      	movne	r3, #10
 8003f34:	2100      	movs	r1, #0
 8003f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f3a:	6866      	ldr	r6, [r4, #4]
 8003f3c:	60a6      	str	r6, [r4, #8]
 8003f3e:	2e00      	cmp	r6, #0
 8003f40:	bfa2      	ittt	ge
 8003f42:	6821      	ldrge	r1, [r4, #0]
 8003f44:	f021 0104 	bicge.w	r1, r1, #4
 8003f48:	6021      	strge	r1, [r4, #0]
 8003f4a:	b90d      	cbnz	r5, 8003f50 <_printf_i+0x118>
 8003f4c:	2e00      	cmp	r6, #0
 8003f4e:	d04d      	beq.n	8003fec <_printf_i+0x1b4>
 8003f50:	4616      	mov	r6, r2
 8003f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f56:	fb03 5711 	mls	r7, r3, r1, r5
 8003f5a:	5dc7      	ldrb	r7, [r0, r7]
 8003f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f60:	462f      	mov	r7, r5
 8003f62:	42bb      	cmp	r3, r7
 8003f64:	460d      	mov	r5, r1
 8003f66:	d9f4      	bls.n	8003f52 <_printf_i+0x11a>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d10b      	bne.n	8003f84 <_printf_i+0x14c>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	07df      	lsls	r7, r3, #31
 8003f70:	d508      	bpl.n	8003f84 <_printf_i+0x14c>
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	6861      	ldr	r1, [r4, #4]
 8003f76:	4299      	cmp	r1, r3
 8003f78:	bfde      	ittt	le
 8003f7a:	2330      	movle	r3, #48	; 0x30
 8003f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f84:	1b92      	subs	r2, r2, r6
 8003f86:	6122      	str	r2, [r4, #16]
 8003f88:	f8cd a000 	str.w	sl, [sp]
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	aa03      	add	r2, sp, #12
 8003f90:	4621      	mov	r1, r4
 8003f92:	4640      	mov	r0, r8
 8003f94:	f7ff fee2 	bl	8003d5c <_printf_common>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d14c      	bne.n	8004036 <_printf_i+0x1fe>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	b004      	add	sp, #16
 8003fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa6:	4835      	ldr	r0, [pc, #212]	; (800407c <_printf_i+0x244>)
 8003fa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	680e      	ldr	r6, [r1, #0]
 8003fb0:	061f      	lsls	r7, r3, #24
 8003fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fb6:	600e      	str	r6, [r1, #0]
 8003fb8:	d514      	bpl.n	8003fe4 <_printf_i+0x1ac>
 8003fba:	07d9      	lsls	r1, r3, #31
 8003fbc:	bf44      	itt	mi
 8003fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc2:	6023      	strmi	r3, [r4, #0]
 8003fc4:	b91d      	cbnz	r5, 8003fce <_printf_i+0x196>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	f023 0320 	bic.w	r3, r3, #32
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	2310      	movs	r3, #16
 8003fd0:	e7b0      	b.n	8003f34 <_printf_i+0xfc>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	f043 0320 	orr.w	r3, r3, #32
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	2378      	movs	r3, #120	; 0x78
 8003fdc:	4828      	ldr	r0, [pc, #160]	; (8004080 <_printf_i+0x248>)
 8003fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe2:	e7e3      	b.n	8003fac <_printf_i+0x174>
 8003fe4:	065e      	lsls	r6, r3, #25
 8003fe6:	bf48      	it	mi
 8003fe8:	b2ad      	uxthmi	r5, r5
 8003fea:	e7e6      	b.n	8003fba <_printf_i+0x182>
 8003fec:	4616      	mov	r6, r2
 8003fee:	e7bb      	b.n	8003f68 <_printf_i+0x130>
 8003ff0:	680b      	ldr	r3, [r1, #0]
 8003ff2:	6826      	ldr	r6, [r4, #0]
 8003ff4:	6960      	ldr	r0, [r4, #20]
 8003ff6:	1d1d      	adds	r5, r3, #4
 8003ff8:	600d      	str	r5, [r1, #0]
 8003ffa:	0635      	lsls	r5, r6, #24
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	d501      	bpl.n	8004004 <_printf_i+0x1cc>
 8004000:	6018      	str	r0, [r3, #0]
 8004002:	e002      	b.n	800400a <_printf_i+0x1d2>
 8004004:	0671      	lsls	r1, r6, #25
 8004006:	d5fb      	bpl.n	8004000 <_printf_i+0x1c8>
 8004008:	8018      	strh	r0, [r3, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	4616      	mov	r6, r2
 8004010:	e7ba      	b.n	8003f88 <_printf_i+0x150>
 8004012:	680b      	ldr	r3, [r1, #0]
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	600a      	str	r2, [r1, #0]
 8004018:	681e      	ldr	r6, [r3, #0]
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	2100      	movs	r1, #0
 800401e:	4630      	mov	r0, r6
 8004020:	f7fc f8fe 	bl	8000220 <memchr>
 8004024:	b108      	cbz	r0, 800402a <_printf_i+0x1f2>
 8004026:	1b80      	subs	r0, r0, r6
 8004028:	6060      	str	r0, [r4, #4]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	6123      	str	r3, [r4, #16]
 800402e:	2300      	movs	r3, #0
 8004030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004034:	e7a8      	b.n	8003f88 <_printf_i+0x150>
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	4632      	mov	r2, r6
 800403a:	4649      	mov	r1, r9
 800403c:	4640      	mov	r0, r8
 800403e:	47d0      	blx	sl
 8004040:	3001      	adds	r0, #1
 8004042:	d0ab      	beq.n	8003f9c <_printf_i+0x164>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	079b      	lsls	r3, r3, #30
 8004048:	d413      	bmi.n	8004072 <_printf_i+0x23a>
 800404a:	68e0      	ldr	r0, [r4, #12]
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	4298      	cmp	r0, r3
 8004050:	bfb8      	it	lt
 8004052:	4618      	movlt	r0, r3
 8004054:	e7a4      	b.n	8003fa0 <_printf_i+0x168>
 8004056:	2301      	movs	r3, #1
 8004058:	4632      	mov	r2, r6
 800405a:	4649      	mov	r1, r9
 800405c:	4640      	mov	r0, r8
 800405e:	47d0      	blx	sl
 8004060:	3001      	adds	r0, #1
 8004062:	d09b      	beq.n	8003f9c <_printf_i+0x164>
 8004064:	3501      	adds	r5, #1
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	9903      	ldr	r1, [sp, #12]
 800406a:	1a5b      	subs	r3, r3, r1
 800406c:	42ab      	cmp	r3, r5
 800406e:	dcf2      	bgt.n	8004056 <_printf_i+0x21e>
 8004070:	e7eb      	b.n	800404a <_printf_i+0x212>
 8004072:	2500      	movs	r5, #0
 8004074:	f104 0619 	add.w	r6, r4, #25
 8004078:	e7f5      	b.n	8004066 <_printf_i+0x22e>
 800407a:	bf00      	nop
 800407c:	08004389 	.word	0x08004389
 8004080:	0800439a 	.word	0x0800439a

08004084 <memcpy>:
 8004084:	440a      	add	r2, r1
 8004086:	4291      	cmp	r1, r2
 8004088:	f100 33ff 	add.w	r3, r0, #4294967295
 800408c:	d100      	bne.n	8004090 <memcpy+0xc>
 800408e:	4770      	bx	lr
 8004090:	b510      	push	{r4, lr}
 8004092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800409a:	4291      	cmp	r1, r2
 800409c:	d1f9      	bne.n	8004092 <memcpy+0xe>
 800409e:	bd10      	pop	{r4, pc}

080040a0 <memmove>:
 80040a0:	4288      	cmp	r0, r1
 80040a2:	b510      	push	{r4, lr}
 80040a4:	eb01 0402 	add.w	r4, r1, r2
 80040a8:	d902      	bls.n	80040b0 <memmove+0x10>
 80040aa:	4284      	cmp	r4, r0
 80040ac:	4623      	mov	r3, r4
 80040ae:	d807      	bhi.n	80040c0 <memmove+0x20>
 80040b0:	1e43      	subs	r3, r0, #1
 80040b2:	42a1      	cmp	r1, r4
 80040b4:	d008      	beq.n	80040c8 <memmove+0x28>
 80040b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040be:	e7f8      	b.n	80040b2 <memmove+0x12>
 80040c0:	4402      	add	r2, r0
 80040c2:	4601      	mov	r1, r0
 80040c4:	428a      	cmp	r2, r1
 80040c6:	d100      	bne.n	80040ca <memmove+0x2a>
 80040c8:	bd10      	pop	{r4, pc}
 80040ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040d2:	e7f7      	b.n	80040c4 <memmove+0x24>

080040d4 <_free_r>:
 80040d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d048      	beq.n	800416c <_free_r+0x98>
 80040da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040de:	9001      	str	r0, [sp, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f1a1 0404 	sub.w	r4, r1, #4
 80040e6:	bfb8      	it	lt
 80040e8:	18e4      	addlt	r4, r4, r3
 80040ea:	f000 f8d3 	bl	8004294 <__malloc_lock>
 80040ee:	4a20      	ldr	r2, [pc, #128]	; (8004170 <_free_r+0x9c>)
 80040f0:	9801      	ldr	r0, [sp, #4]
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	4615      	mov	r5, r2
 80040f6:	b933      	cbnz	r3, 8004106 <_free_r+0x32>
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	6014      	str	r4, [r2, #0]
 80040fc:	b003      	add	sp, #12
 80040fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004102:	f000 b8cd 	b.w	80042a0 <__malloc_unlock>
 8004106:	42a3      	cmp	r3, r4
 8004108:	d90b      	bls.n	8004122 <_free_r+0x4e>
 800410a:	6821      	ldr	r1, [r4, #0]
 800410c:	1862      	adds	r2, r4, r1
 800410e:	4293      	cmp	r3, r2
 8004110:	bf04      	itt	eq
 8004112:	681a      	ldreq	r2, [r3, #0]
 8004114:	685b      	ldreq	r3, [r3, #4]
 8004116:	6063      	str	r3, [r4, #4]
 8004118:	bf04      	itt	eq
 800411a:	1852      	addeq	r2, r2, r1
 800411c:	6022      	streq	r2, [r4, #0]
 800411e:	602c      	str	r4, [r5, #0]
 8004120:	e7ec      	b.n	80040fc <_free_r+0x28>
 8004122:	461a      	mov	r2, r3
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b10b      	cbz	r3, 800412c <_free_r+0x58>
 8004128:	42a3      	cmp	r3, r4
 800412a:	d9fa      	bls.n	8004122 <_free_r+0x4e>
 800412c:	6811      	ldr	r1, [r2, #0]
 800412e:	1855      	adds	r5, r2, r1
 8004130:	42a5      	cmp	r5, r4
 8004132:	d10b      	bne.n	800414c <_free_r+0x78>
 8004134:	6824      	ldr	r4, [r4, #0]
 8004136:	4421      	add	r1, r4
 8004138:	1854      	adds	r4, r2, r1
 800413a:	42a3      	cmp	r3, r4
 800413c:	6011      	str	r1, [r2, #0]
 800413e:	d1dd      	bne.n	80040fc <_free_r+0x28>
 8004140:	681c      	ldr	r4, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	6053      	str	r3, [r2, #4]
 8004146:	4421      	add	r1, r4
 8004148:	6011      	str	r1, [r2, #0]
 800414a:	e7d7      	b.n	80040fc <_free_r+0x28>
 800414c:	d902      	bls.n	8004154 <_free_r+0x80>
 800414e:	230c      	movs	r3, #12
 8004150:	6003      	str	r3, [r0, #0]
 8004152:	e7d3      	b.n	80040fc <_free_r+0x28>
 8004154:	6825      	ldr	r5, [r4, #0]
 8004156:	1961      	adds	r1, r4, r5
 8004158:	428b      	cmp	r3, r1
 800415a:	bf04      	itt	eq
 800415c:	6819      	ldreq	r1, [r3, #0]
 800415e:	685b      	ldreq	r3, [r3, #4]
 8004160:	6063      	str	r3, [r4, #4]
 8004162:	bf04      	itt	eq
 8004164:	1949      	addeq	r1, r1, r5
 8004166:	6021      	streq	r1, [r4, #0]
 8004168:	6054      	str	r4, [r2, #4]
 800416a:	e7c7      	b.n	80040fc <_free_r+0x28>
 800416c:	b003      	add	sp, #12
 800416e:	bd30      	pop	{r4, r5, pc}
 8004170:	20000094 	.word	0x20000094

08004174 <_malloc_r>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	1ccd      	adds	r5, r1, #3
 8004178:	f025 0503 	bic.w	r5, r5, #3
 800417c:	3508      	adds	r5, #8
 800417e:	2d0c      	cmp	r5, #12
 8004180:	bf38      	it	cc
 8004182:	250c      	movcc	r5, #12
 8004184:	2d00      	cmp	r5, #0
 8004186:	4606      	mov	r6, r0
 8004188:	db01      	blt.n	800418e <_malloc_r+0x1a>
 800418a:	42a9      	cmp	r1, r5
 800418c:	d903      	bls.n	8004196 <_malloc_r+0x22>
 800418e:	230c      	movs	r3, #12
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	2000      	movs	r0, #0
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004196:	f000 f87d 	bl	8004294 <__malloc_lock>
 800419a:	4921      	ldr	r1, [pc, #132]	; (8004220 <_malloc_r+0xac>)
 800419c:	680a      	ldr	r2, [r1, #0]
 800419e:	4614      	mov	r4, r2
 80041a0:	b99c      	cbnz	r4, 80041ca <_malloc_r+0x56>
 80041a2:	4f20      	ldr	r7, [pc, #128]	; (8004224 <_malloc_r+0xb0>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b923      	cbnz	r3, 80041b2 <_malloc_r+0x3e>
 80041a8:	4621      	mov	r1, r4
 80041aa:	4630      	mov	r0, r6
 80041ac:	f000 f862 	bl	8004274 <_sbrk_r>
 80041b0:	6038      	str	r0, [r7, #0]
 80041b2:	4629      	mov	r1, r5
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f85d 	bl	8004274 <_sbrk_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d123      	bne.n	8004206 <_malloc_r+0x92>
 80041be:	230c      	movs	r3, #12
 80041c0:	6033      	str	r3, [r6, #0]
 80041c2:	4630      	mov	r0, r6
 80041c4:	f000 f86c 	bl	80042a0 <__malloc_unlock>
 80041c8:	e7e3      	b.n	8004192 <_malloc_r+0x1e>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	1b5b      	subs	r3, r3, r5
 80041ce:	d417      	bmi.n	8004200 <_malloc_r+0x8c>
 80041d0:	2b0b      	cmp	r3, #11
 80041d2:	d903      	bls.n	80041dc <_malloc_r+0x68>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	441c      	add	r4, r3
 80041d8:	6025      	str	r5, [r4, #0]
 80041da:	e004      	b.n	80041e6 <_malloc_r+0x72>
 80041dc:	6863      	ldr	r3, [r4, #4]
 80041de:	42a2      	cmp	r2, r4
 80041e0:	bf0c      	ite	eq
 80041e2:	600b      	streq	r3, [r1, #0]
 80041e4:	6053      	strne	r3, [r2, #4]
 80041e6:	4630      	mov	r0, r6
 80041e8:	f000 f85a 	bl	80042a0 <__malloc_unlock>
 80041ec:	f104 000b 	add.w	r0, r4, #11
 80041f0:	1d23      	adds	r3, r4, #4
 80041f2:	f020 0007 	bic.w	r0, r0, #7
 80041f6:	1ac2      	subs	r2, r0, r3
 80041f8:	d0cc      	beq.n	8004194 <_malloc_r+0x20>
 80041fa:	1a1b      	subs	r3, r3, r0
 80041fc:	50a3      	str	r3, [r4, r2]
 80041fe:	e7c9      	b.n	8004194 <_malloc_r+0x20>
 8004200:	4622      	mov	r2, r4
 8004202:	6864      	ldr	r4, [r4, #4]
 8004204:	e7cc      	b.n	80041a0 <_malloc_r+0x2c>
 8004206:	1cc4      	adds	r4, r0, #3
 8004208:	f024 0403 	bic.w	r4, r4, #3
 800420c:	42a0      	cmp	r0, r4
 800420e:	d0e3      	beq.n	80041d8 <_malloc_r+0x64>
 8004210:	1a21      	subs	r1, r4, r0
 8004212:	4630      	mov	r0, r6
 8004214:	f000 f82e 	bl	8004274 <_sbrk_r>
 8004218:	3001      	adds	r0, #1
 800421a:	d1dd      	bne.n	80041d8 <_malloc_r+0x64>
 800421c:	e7cf      	b.n	80041be <_malloc_r+0x4a>
 800421e:	bf00      	nop
 8004220:	20000094 	.word	0x20000094
 8004224:	20000098 	.word	0x20000098

08004228 <_realloc_r>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	4607      	mov	r7, r0
 800422c:	4614      	mov	r4, r2
 800422e:	460e      	mov	r6, r1
 8004230:	b921      	cbnz	r1, 800423c <_realloc_r+0x14>
 8004232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004236:	4611      	mov	r1, r2
 8004238:	f7ff bf9c 	b.w	8004174 <_malloc_r>
 800423c:	b922      	cbnz	r2, 8004248 <_realloc_r+0x20>
 800423e:	f7ff ff49 	bl	80040d4 <_free_r>
 8004242:	4625      	mov	r5, r4
 8004244:	4628      	mov	r0, r5
 8004246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004248:	f000 f830 	bl	80042ac <_malloc_usable_size_r>
 800424c:	42a0      	cmp	r0, r4
 800424e:	d20f      	bcs.n	8004270 <_realloc_r+0x48>
 8004250:	4621      	mov	r1, r4
 8004252:	4638      	mov	r0, r7
 8004254:	f7ff ff8e 	bl	8004174 <_malloc_r>
 8004258:	4605      	mov	r5, r0
 800425a:	2800      	cmp	r0, #0
 800425c:	d0f2      	beq.n	8004244 <_realloc_r+0x1c>
 800425e:	4631      	mov	r1, r6
 8004260:	4622      	mov	r2, r4
 8004262:	f7ff ff0f 	bl	8004084 <memcpy>
 8004266:	4631      	mov	r1, r6
 8004268:	4638      	mov	r0, r7
 800426a:	f7ff ff33 	bl	80040d4 <_free_r>
 800426e:	e7e9      	b.n	8004244 <_realloc_r+0x1c>
 8004270:	4635      	mov	r5, r6
 8004272:	e7e7      	b.n	8004244 <_realloc_r+0x1c>

08004274 <_sbrk_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d06      	ldr	r5, [pc, #24]	; (8004290 <_sbrk_r+0x1c>)
 8004278:	2300      	movs	r3, #0
 800427a:	4604      	mov	r4, r0
 800427c:	4608      	mov	r0, r1
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	f7fc fe52 	bl	8000f28 <_sbrk>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_sbrk_r+0x1a>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_sbrk_r+0x1a>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000170 	.word	0x20000170

08004294 <__malloc_lock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_lock+0x8>)
 8004296:	f000 b811 	b.w	80042bc <__retarget_lock_acquire_recursive>
 800429a:	bf00      	nop
 800429c:	20000178 	.word	0x20000178

080042a0 <__malloc_unlock>:
 80042a0:	4801      	ldr	r0, [pc, #4]	; (80042a8 <__malloc_unlock+0x8>)
 80042a2:	f000 b80c 	b.w	80042be <__retarget_lock_release_recursive>
 80042a6:	bf00      	nop
 80042a8:	20000178 	.word	0x20000178

080042ac <_malloc_usable_size_r>:
 80042ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b0:	1f18      	subs	r0, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bfbc      	itt	lt
 80042b6:	580b      	ldrlt	r3, [r1, r0]
 80042b8:	18c0      	addlt	r0, r0, r3
 80042ba:	4770      	bx	lr

080042bc <__retarget_lock_acquire_recursive>:
 80042bc:	4770      	bx	lr

080042be <__retarget_lock_release_recursive>:
 80042be:	4770      	bx	lr

080042c0 <_init>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr

080042cc <_fini>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr
