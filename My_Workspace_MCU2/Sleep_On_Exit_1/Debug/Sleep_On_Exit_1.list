
Sleep_On_Exit_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800251c  0800251c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002524  08002524  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800252c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000034  08002560  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002560  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eebc  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cee  00000000  00000000  0002ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00030c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000220e1  00000000  00000000  00031888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e789  00000000  00000000  00053969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d0ae0  00000000  00000000  000620f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00132bd2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bb8  00000000  00000000  00132c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003410  00000000  00000000  001337e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080024fc 	.word	0x080024fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	080024fc 	.word	0x080024fc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
UART_HandleTypeDef huart2;
extern uint8_t some_data[];


int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0


	HAL_Init();
 8000510:	f000 f9ba 	bl	8000888 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);

	GPIO_Init();
 8000514:	f000 f82a 	bl	800056c <GPIO_Init>

	//HAL_SuspendTick();

	UART2_Init();
 8000518:	f000 f858 	bl	80005cc <UART2_Init>

	TIMER6_Init();
 800051c:	f000 f87c 	bl	8000618 <TIMER6_Init>

	GPIO_AnalogConfig();
 8000520:	f000 f80e 	bl	8000540 <GPIO_AnalogConfig>

	//SCB->SCR |= ( 1 << 1);
	HAL_PWR_EnableSleepOnExit();
 8000524:	f000 fd80 	bl	8001028 <HAL_PWR_EnableSleepOnExit>

/* lets start with fresh Status register of Timer to avoid any spurious interrupts */
    TIM6->SR = 0;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <main+0x2c>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]

	//Lets start the timer in interrupt mode
	HAL_TIM_Base_Start_IT(&htimer6);
 800052e:	4803      	ldr	r0, [pc, #12]	; (800053c <main+0x30>)
 8000530:	f000 fe0e 	bl	8001150 <HAL_TIM_Base_Start_IT>

	while(1);
 8000534:	e7fe      	b.n	8000534 <main+0x28>
 8000536:	bf00      	nop
 8000538:	40001000 	.word	0x40001000
 800053c:	20000050 	.word	0x20000050

08000540 <GPIO_AnalogConfig>:

 }


void GPIO_AnalogConfig(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioA;

	uint32_t gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_4 | \
 8000546:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800054a:	617b      	str	r3, [r7, #20]
						 GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7 |\
						 GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |\
						 GPIO_PIN_11 | GPIO_PIN_12 |GPIO_PIN_13 | \
						 GPIO_PIN_14 | GPIO_PIN_15;

	GpioA.Pin = gpio_pins;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	603b      	str	r3, [r7, #0]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000550:	2303      	movs	r3, #3
 8000552:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA,&GpioA);
 8000554:	463b      	mov	r3, r7
 8000556:	4619      	mov	r1, r3
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <GPIO_AnalogConfig+0x28>)
 800055a:	f000 fbb7 	bl	8000ccc <HAL_GPIO_Init>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40020000 	.word	0x40020000

0800056c <GPIO_Init>:

void GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <GPIO_Init+0x58>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <GPIO_Init+0x58>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <GPIO_Init+0x58>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio ;
	ledgpio.Pin = GPIO_PIN_5;
 800058e:	2320      	movs	r3, #32
 8000590:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOA,&ledgpio);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4619      	mov	r1, r3
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <GPIO_Init+0x5c>)
 80005a0:	f000 fb94 	bl	8000ccc <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_12;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <GPIO_Init+0x5c>)
 80005b8:	f000 fb88 	bl	8000ccc <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000

080005cc <UART2_Init>:



void UART2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <UART2_Init+0x44>)
 80005d2:	4a10      	ldr	r2, [pc, #64]	; (8000614 <UART2_Init+0x48>)
 80005d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <UART2_Init+0x44>)
 80005d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80005dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <UART2_Init+0x44>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <UART2_Init+0x44>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <UART2_Init+0x44>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <UART2_Init+0x44>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <UART2_Init+0x44>)
 80005f8:	2208      	movs	r2, #8
 80005fa:	615a      	str	r2, [r3, #20]

	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <UART2_Init+0x44>)
 80005fe:	f000 fffb 	bl	80015f8 <HAL_UART_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000608:	f000 f852 	bl	80006b0 <Error_handler>
	}

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000098 	.word	0x20000098
 8000614:	40004400 	.word	0x40004400

08000618 <TIMER6_Init>:


void TIMER6_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <TIMER6_Init+0x2c>)
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <TIMER6_Init+0x30>)
 8000620:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <TIMER6_Init+0x2c>)
 8000624:	f241 3287 	movw	r2, #4999	; 0x1387
 8000628:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 100-1;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <TIMER6_Init+0x2c>)
 800062c:	2263      	movs	r2, #99	; 0x63
 800062e:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <TIMER6_Init+0x2c>)
 8000632:	f000 fd3d 	bl	80010b0 <HAL_TIM_Base_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <TIMER6_Init+0x28>
	{
		Error_handler();
 800063c:	f000 f838 	bl	80006b0 <Error_handler>
	}

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000050 	.word	0x20000050
 8000648:	40001000 	.word	0x40001000

0800064c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	 if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000656:	f7ff fdd5 	bl	8000204 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	4906      	ldr	r1, [pc, #24]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000666:	f001 f814 	bl	8001692 <HAL_UART_Transmit>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <HAL_TIM_PeriodElapsedCallback+0x28>
	 {
		 Error_handler();
 8000670:	f000 f81e 	bl	80006b0 <Error_handler>
	 }

}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000098 	.word	0x20000098

08000684 <HAL_UART_TxCpltCallback>:


 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <HAL_UART_TxCpltCallback+0x28>)
 8000694:	f000 fcae 	bl	8000ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <HAL_UART_TxCpltCallback+0x28>)
 80006a0:	f000 fca8 	bl	8000ff4 <HAL_GPIO_WritePin>


}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40020000 	.word	0x40020000

080006b0 <Error_handler>:


void Error_handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	while(1);
 80006b4:	e7fe      	b.n	80006b4 <Error_handler+0x4>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END Header */

#include "main.h"

void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 fa25 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_MspInit+0x40>)
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <HAL_MspInit+0x40>)
 80006c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006cc:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	f06f 000b 	mvn.w	r0, #11
 80006d6:	f000 fa24 	bl	8000b22 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	f06f 000a 	mvn.w	r0, #10
 80006e2:	f000 fa1e 	bl	8000b22 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	f06f 0009 	mvn.w	r0, #9
 80006ee:	f000 fa18 	bl	8000b22 <HAL_NVIC_SetPriority>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_TIM_Base_MspInit+0x3c>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_TIM_Base_MspInit+0x3c>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_TIM_Base_MspInit+0x3c>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000720:	2036      	movs	r0, #54	; 0x36
 8000722:	f000 fa1a 	bl	8000b5a <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,0,0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2036      	movs	r0, #54	; 0x36
 800072c:	f000 f9f9 	bl	8000b22 <HAL_NVIC_SetPriority>

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral

	 __HAL_RCC_USART2_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <HAL_UART_MspInit+0x94>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <HAL_UART_MspInit+0x94>)
 800074e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <HAL_UART_MspInit+0x94>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <HAL_UART_MspInit+0x94>)
 8000762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000764:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <HAL_UART_MspInit+0x94>)
 8000766:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800076a:	6613      	str	r3, [r2, #96]	; 0x60

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_MspInit+0x94>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <HAL_UART_MspInit+0x94>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_UART_MspInit+0x94>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000788:	2304      	movs	r3, #4
 800078a:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000798:	2307      	movs	r3, #7
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_MspInit+0x98>)
 80007a4:	f000 fa92 	bl	8000ccc <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80007a8:	2308      	movs	r3, #8
 80007aa:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <HAL_UART_MspInit+0x98>)
 80007b4:	f000 fa8a 	bl	8000ccc <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007b8:	2026      	movs	r0, #38	; 0x26
 80007ba:	f000 f9ce 	bl	8000b5a <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80007be:	2200      	movs	r2, #0
 80007c0:	210f      	movs	r1, #15
 80007c2:	2026      	movs	r0, #38	; 0x26
 80007c4:	f000 f9ad 	bl	8000b22 <HAL_NVIC_SetPriority>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000

080007d8 <SysTick_Handler>:

extern TIM_HandleTypeDef htimer6;
extern UART_HandleTypeDef huart2;

void SysTick_Handler (void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007dc:	f000 f8a6 	bl	800092c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80007e0:	f000 f9d5 	bl	8000b8e <HAL_SYSTICK_IRQHandler>

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
	HAL_TIM_IRQHandler(&htimer6);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <TIM6_DAC_IRQHandler+0x10>)
 80007ee:	f000 fd1f 	bl	8001230 <HAL_TIM_IRQHandler>
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000050 	.word	0x20000050

080007fc <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USART2_IRQHandler+0x10>)
 8000802:	f000 ffd9 	bl	80017b8 <HAL_UART_IRQHandler>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000098 	.word	0x20000098

08000810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000850:	4c0b      	ldr	r4, [pc, #44]	; (8000880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800085e:	f7ff ffd7 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000862:	f001 fe27 	bl	80024b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000866:	f7ff fe51 	bl	800050c <main>
  bx  lr    
 800086a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800086c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000878:	0800252c 	.word	0x0800252c
  ldr r2, =_sbss
 800087c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000880:	200000e0 	.word	0x200000e0

08000884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <HAL_Init+0x40>)
 8000892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_Init+0x40>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x40>)
 80008aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f92b 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fefc 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023c00 	.word	0x40023c00

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f943 	bl	8000b76 <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f90b 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000028 	.word	0x20000028
 8000924:	20000030 	.word	0x20000030
 8000928:	2000002c 	.word	0x2000002c

0800092c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x20>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x24>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_IncTick+0x24>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000030 	.word	0x20000030
 8000950:	200000dc 	.word	0x200000dc

08000954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_GetTick+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	200000dc 	.word	0x200000dc

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff31 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b92:	f000 f802 	bl	8000b9a <HAL_SYSTICK_Callback>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bb6:	f7ff fecd 	bl	8000954 <HAL_GetTick>
 8000bba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d008      	beq.n	8000bda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e052      	b.n	8000c80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0216 	bic.w	r2, r2, #22
 8000be8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <HAL_DMA_Abort+0x62>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0201 	bic.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c2a:	e013      	b.n	8000c54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c2c:	f7ff fe92 	bl	8000954 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d90c      	bls.n	8000c54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2203      	movs	r2, #3
 8000c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e015      	b.n	8000c80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1e4      	bne.n	8000c2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c66:	223f      	movs	r2, #63	; 0x3f
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d004      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00c      	b.n	8000cc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2205      	movs	r2, #5
 8000caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	e165      	b.n	8000fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8154 	bne.w	8000fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d130      	bne.n	8000d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	f003 0201 	and.w	r2, r3, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d017      	beq.n	8000dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d123      	bne.n	8000e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	69b9      	ldr	r1, [r7, #24]
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0203 	and.w	r2, r3, #3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80ae 	beq.w	8000fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a5c      	ldr	r2, [pc, #368]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6e:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <HAL_GPIO_Init+0x308>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d025      	beq.n	8000ee6 <HAL_GPIO_Init+0x21a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <HAL_GPIO_Init+0x30c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01f      	beq.n	8000ee2 <HAL_GPIO_Init+0x216>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <HAL_GPIO_Init+0x310>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d019      	beq.n	8000ede <HAL_GPIO_Init+0x212>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_GPIO_Init+0x314>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x20e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_GPIO_Init+0x318>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x20a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a49      	ldr	r2, [pc, #292]	; (8000fec <HAL_GPIO_Init+0x320>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x202>
 8000eca:	2306      	movs	r3, #6
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x21c>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2a:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae96 	bls.w	8000ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	041a      	lsls	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6113      	str	r3, [r2, #16]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_RCC_GetHCLKFreq+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000028 	.word	0x20000028

08001060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001064:	f7ff fff0 	bl	8001048 <HAL_RCC_GetHCLKFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	0a9b      	lsrs	r3, r3, #10
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	4903      	ldr	r1, [pc, #12]	; (8001084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	08002514 	.word	0x08002514

08001088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800108c:	f7ff ffdc 	bl	8001048 <HAL_RCC_GetHCLKFreq>
 8001090:	4602      	mov	r2, r0
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	0b5b      	lsrs	r3, r3, #13
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	4903      	ldr	r1, [pc, #12]	; (80010ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800109e:	5ccb      	ldrb	r3, [r1, r3]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	08002514 	.word	0x08002514

080010b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e041      	b.n	8001146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fb10 	bl	80006fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2202      	movs	r2, #2
 80010e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3304      	adds	r3, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4610      	mov	r0, r2
 80010f0:	f000 f9ce 	bl	8001490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d001      	beq.n	8001168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e04e      	b.n	8001206 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2202      	movs	r2, #2
 800116c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <HAL_TIM_Base_Start_IT+0xc4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d022      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001192:	d01d      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <HAL_TIM_Base_Start_IT+0xc8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d018      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_TIM_Base_Start_IT+0xcc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d013      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_TIM_Base_Start_IT+0xd0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00e      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_TIM_Base_Start_IT+0xd4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d009      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_TIM_Base_Start_IT+0xd8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d004      	beq.n	80011d0 <HAL_TIM_Base_Start_IT+0x80>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_TIM_Base_Start_IT+0xdc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d111      	bne.n	80011f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d010      	beq.n	8001204 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011f2:	e007      	b.n	8001204 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40010000 	.word	0x40010000
 8001218:	40000400 	.word	0x40000400
 800121c:	40000800 	.word	0x40000800
 8001220:	40000c00 	.word	0x40000c00
 8001224:	40010400 	.word	0x40010400
 8001228:	40014000 	.word	0x40014000
 800122c:	40001800 	.word	0x40001800

08001230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b02      	cmp	r3, #2
 8001244:	d122      	bne.n	800128c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b02      	cmp	r3, #2
 8001252:	d11b      	bne.n	800128c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0202 	mvn.w	r2, #2
 800125c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f8ee 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 8001278:	e005      	b.n	8001286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f8e0 	bl	8001440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8f1 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b04      	cmp	r3, #4
 8001298:	d122      	bne.n	80012e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d11b      	bne.n	80012e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0204 	mvn.w	r2, #4
 80012b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2202      	movs	r2, #2
 80012b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f8c4 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 80012cc:	e005      	b.n	80012da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8b6 	bl	8001440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f8c7 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d122      	bne.n	8001334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d11b      	bne.n	8001334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 0208 	mvn.w	r2, #8
 8001304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f89a 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 8001320:	e005      	b.n	800132e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f88c 	bl	8001440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f89d 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b10      	cmp	r3, #16
 8001340:	d122      	bne.n	8001388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b10      	cmp	r3, #16
 800134e:	d11b      	bne.n	8001388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f06f 0210 	mvn.w	r2, #16
 8001358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2208      	movs	r2, #8
 800135e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f870 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 8001374:	e005      	b.n	8001382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f862 	bl	8001440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f873 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10e      	bne.n	80013b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d107      	bne.n	80013b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 0201 	mvn.w	r2, #1
 80013ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff f94c 	bl	800064c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	2b80      	cmp	r3, #128	; 0x80
 80013c0:	d10e      	bne.n	80013e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013cc:	2b80      	cmp	r3, #128	; 0x80
 80013ce:	d107      	bne.n	80013e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f902 	bl	80015e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ea:	2b40      	cmp	r3, #64	; 0x40
 80013ec:	d10e      	bne.n	800140c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f8:	2b40      	cmp	r3, #64	; 0x40
 80013fa:	d107      	bne.n	800140c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f838 	bl	800147c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	2b20      	cmp	r3, #32
 8001418:	d10e      	bne.n	8001438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	2b20      	cmp	r3, #32
 8001426:	d107      	bne.n	8001438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f06f 0220 	mvn.w	r2, #32
 8001430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f8cc 	bl	80015d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <TIM_Base_SetConfig+0x114>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d013      	beq.n	80014d0 <TIM_Base_SetConfig+0x40>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ae:	d00f      	beq.n	80014d0 <TIM_Base_SetConfig+0x40>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a3d      	ldr	r2, [pc, #244]	; (80015a8 <TIM_Base_SetConfig+0x118>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d00b      	beq.n	80014d0 <TIM_Base_SetConfig+0x40>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <TIM_Base_SetConfig+0x11c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d007      	beq.n	80014d0 <TIM_Base_SetConfig+0x40>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <TIM_Base_SetConfig+0x120>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d003      	beq.n	80014d0 <TIM_Base_SetConfig+0x40>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <TIM_Base_SetConfig+0x124>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d108      	bne.n	80014e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <TIM_Base_SetConfig+0x114>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d02b      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d027      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <TIM_Base_SetConfig+0x118>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d023      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <TIM_Base_SetConfig+0x11c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <TIM_Base_SetConfig+0x120>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01b      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <TIM_Base_SetConfig+0x124>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d017      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <TIM_Base_SetConfig+0x128>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <TIM_Base_SetConfig+0x12c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00f      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <TIM_Base_SetConfig+0x130>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00b      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <TIM_Base_SetConfig+0x134>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <TIM_Base_SetConfig+0x138>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d003      	beq.n	8001542 <TIM_Base_SetConfig+0xb2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <TIM_Base_SetConfig+0x13c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d108      	bne.n	8001554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <TIM_Base_SetConfig+0x114>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d003      	beq.n	8001588 <TIM_Base_SetConfig+0xf8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <TIM_Base_SetConfig+0x124>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d103      	bne.n	8001590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	615a      	str	r2, [r3, #20]
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40010000 	.word	0x40010000
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40000800 	.word	0x40000800
 80015b0:	40000c00 	.word	0x40000c00
 80015b4:	40010400 	.word	0x40010400
 80015b8:	40014000 	.word	0x40014000
 80015bc:	40014400 	.word	0x40014400
 80015c0:	40014800 	.word	0x40014800
 80015c4:	40001800 	.word	0x40001800
 80015c8:	40001c00 	.word	0x40001c00
 80015cc:	40002000 	.word	0x40002000

080015d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e03f      	b.n	800168a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff f88c 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800163a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fd71 	bl	8002124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b08a      	sub	sp, #40	; 0x28
 8001696:	af02      	add	r7, sp, #8
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	d17c      	bne.n	80017ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_UART_Transmit+0x2c>
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e075      	b.n	80017ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_UART_Transmit+0x3e>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e06e      	b.n	80017ae <HAL_UART_Transmit+0x11c>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2221      	movs	r2, #33	; 0x21
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016e6:	f7ff f935 	bl	8000954 <HAL_GetTick>
 80016ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001700:	d108      	bne.n	8001714 <HAL_UART_Transmit+0x82>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d104      	bne.n	8001714 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	e003      	b.n	800171c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001724:	e02a      	b.n	800177c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2200      	movs	r2, #0
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 faef 	bl	8001d14 <UART_WaitOnFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e036      	b.n	80017ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10b      	bne.n	800175e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	3302      	adds	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	e007      	b.n	800176e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1cf      	bne.n	8001726 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2200      	movs	r2, #0
 800178e:	2140      	movs	r1, #64	; 0x40
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 fabf 	bl	8001d14 <UART_WaitOnFlagUntilTimeout>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e006      	b.n	80017ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2220      	movs	r2, #32
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e000      	b.n	80017ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017ac:	2302      	movs	r3, #2
  }
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0ba      	sub	sp, #232	; 0xe8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80017f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_UART_IRQHandler+0x66>
 800180a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fbc9 	bl	8001fae <UART_Receive_IT>
      return;
 800181c:	e256      	b.n	8001ccc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800181e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80de 	beq.w	80019e4 <HAL_UART_IRQHandler+0x22c>
 8001828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d106      	bne.n	8001842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001838:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80d1 	beq.w	80019e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_UART_IRQHandler+0xae>
 800184e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_UART_IRQHandler+0xd2>
 8001872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800188a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_UART_IRQHandler+0xf6>
 8001896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f043 0204 	orr.w	r2, r3, #4
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80018ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d011      	beq.n	80018de <HAL_UART_IRQHandler+0x126>
 80018ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80018c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f043 0208 	orr.w	r2, r3, #8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 81ed 	beq.w	8001cc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_UART_IRQHandler+0x14e>
 80018f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fb54 	bl	8001fae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001910:	2b40      	cmp	r3, #64	; 0x40
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_UART_IRQHandler+0x17a>
 800192a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d04f      	beq.n	80019d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fa5c 	bl	8001df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d141      	bne.n	80019ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3314      	adds	r3, #20
 800194c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001954:	e853 3f00 	ldrex	r3, [r3]
 8001958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800195c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3314      	adds	r3, #20
 800196e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800197a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800197e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001982:	e841 2300 	strex	r3, r2, [r1]
 8001986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800198a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1d9      	bne.n	8001946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	2b00      	cmp	r3, #0
 8001998:	d013      	beq.n	80019c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	4a7d      	ldr	r2, [pc, #500]	; (8001b94 <HAL_UART_IRQHandler+0x3dc>)
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f96e 	bl	8000c88 <HAL_DMA_Abort_IT>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019bc:	4610      	mov	r0, r2
 80019be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019c0:	e00e      	b.n	80019e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f990 	bl	8001ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019c8:	e00a      	b.n	80019e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f98c 	bl	8001ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d0:	e006      	b.n	80019e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f988 	bl	8001ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80019de:	e170      	b.n	8001cc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019e0:	bf00      	nop
    return;
 80019e2:	e16e      	b.n	8001cc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	f040 814a 	bne.w	8001c82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80019ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8143 	beq.w	8001c82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80019fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 813c 	beq.w	8001c82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	2b40      	cmp	r3, #64	; 0x40
 8001a2c:	f040 80b4 	bne.w	8001b98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8140 	beq.w	8001cc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	f080 8139 	bcs.w	8001cc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a66:	f000 8088 	beq.w	8001b7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	330c      	adds	r3, #12
 8001a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a78:	e853 3f00 	ldrex	r3, [r3]
 8001a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	330c      	adds	r3, #12
 8001a92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001a96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aa6:	e841 2300 	strex	r3, r2, [r1]
 8001aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1d9      	bne.n	8001a6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3314      	adds	r3, #20
 8001abc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac0:	e853 3f00 	ldrex	r3, [r3]
 8001ac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3314      	adds	r3, #20
 8001ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001ade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ae6:	e841 2300 	strex	r3, r2, [r1]
 8001aea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e1      	bne.n	8001ab6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3314      	adds	r3, #20
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001afc:	e853 3f00 	ldrex	r3, [r3]
 8001b00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3314      	adds	r3, #20
 8001b12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b1e:	e841 2300 	strex	r3, r2, [r1]
 8001b22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1e3      	bne.n	8001af2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b42:	e853 3f00 	ldrex	r3, [r3]
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b4a:	f023 0310 	bic.w	r3, r3, #16
 8001b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	330c      	adds	r3, #12
 8001b58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b64:	e841 2300 	strex	r3, r2, [r1]
 8001b68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e3      	bne.n	8001b38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f817 	bl	8000ba8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8b6 	bl	8001cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b90:	e099      	b.n	8001cc6 <HAL_UART_IRQHandler+0x50e>
 8001b92:	bf00      	nop
 8001b94:	08001eb7 	.word	0x08001eb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 808b 	beq.w	8001cca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8086 	beq.w	8001cca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	330c      	adds	r3, #12
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc8:	e853 3f00 	ldrex	r3, [r3]
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001be2:	647a      	str	r2, [r7, #68]	; 0x44
 8001be4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bea:	e841 2300 	strex	r3, r2, [r1]
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e3      	bne.n	8001bbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3314      	adds	r3, #20
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	e853 3f00 	ldrex	r3, [r3]
 8001c04:	623b      	str	r3, [r7, #32]
   return(result);
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3314      	adds	r3, #20
 8001c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c1a:	633a      	str	r2, [r7, #48]	; 0x30
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c22:	e841 2300 	strex	r3, r2, [r1]
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e3      	bne.n	8001bf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	e853 3f00 	ldrex	r3, [r3]
 8001c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0310 	bic.w	r3, r3, #16
 8001c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c60:	61fa      	str	r2, [r7, #28]
 8001c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c64:	69b9      	ldr	r1, [r7, #24]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	e841 2300 	strex	r3, r2, [r1]
 8001c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e3      	bne.n	8001c3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f83e 	bl	8001cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c80:	e023      	b.n	8001cca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x4ea>
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f91f 	bl	8001ede <UART_Transmit_IT>
    return;
 8001ca0:	e014      	b.n	8001ccc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00e      	beq.n	8001ccc <HAL_UART_IRQHandler+0x514>
 8001cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f95f 	bl	8001f7e <UART_EndTransmit_IT>
    return;
 8001cc0:	e004      	b.n	8001ccc <HAL_UART_IRQHandler+0x514>
    return;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <HAL_UART_IRQHandler+0x514>
      return;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <HAL_UART_IRQHandler+0x514>
      return;
 8001cca:	bf00      	nop
  }
}
 8001ccc:	37e8      	adds	r7, #232	; 0xe8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop

08001cd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b090      	sub	sp, #64	; 0x40
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d24:	e050      	b.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d04c      	beq.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d34:	f7fe fe0e 	bl	8000954 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d241      	bcs.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	e853 3f00 	ldrex	r3, [r3]
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	330c      	adds	r3, #12
 8001d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d64:	637a      	str	r2, [r7, #52]	; 0x34
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d6c:	e841 2300 	strex	r3, r2, [r1]
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e5      	bne.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	e853 3f00 	ldrex	r3, [r3]
 8001d86:	613b      	str	r3, [r7, #16]
   return(result);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3314      	adds	r3, #20
 8001d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d98:	623a      	str	r2, [r7, #32]
 8001d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	69f9      	ldr	r1, [r7, #28]
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	e841 2300 	strex	r3, r2, [r1]
 8001da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e00f      	b.n	8001de8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d09f      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3740      	adds	r7, #64	; 0x40
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b095      	sub	sp, #84	; 0x54
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	e853 3f00 	ldrex	r3, [r3]
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	330c      	adds	r3, #12
 8001e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e18:	643a      	str	r2, [r7, #64]	; 0x40
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e20:	e841 2300 	strex	r3, r2, [r1]
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e5      	bne.n	8001df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3314      	adds	r3, #20
 8001e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	e853 3f00 	ldrex	r3, [r3]
 8001e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3314      	adds	r3, #20
 8001e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e54:	e841 2300 	strex	r3, r2, [r1]
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e5      	bne.n	8001e2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d119      	bne.n	8001e9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	e853 3f00 	ldrex	r3, [r3]
 8001e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f023 0310 	bic.w	r3, r3, #16
 8001e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e88:	61ba      	str	r2, [r7, #24]
 8001e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8c:	6979      	ldr	r1, [r7, #20]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	e841 2300 	strex	r3, r2, [r1]
 8001e94:	613b      	str	r3, [r7, #16]
   return(result);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e5      	bne.n	8001e68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001eaa:	bf00      	nop
 8001eac:	3754      	adds	r7, #84	; 0x54
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff ff09 	bl	8001ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b21      	cmp	r3, #33	; 0x21
 8001ef0:	d13e      	bne.n	8001f70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efa:	d114      	bne.n	8001f26 <UART_Transmit_IT+0x48>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d110      	bne.n	8001f26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	1c9a      	adds	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	621a      	str	r2, [r3, #32]
 8001f24:	e008      	b.n	8001f38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6211      	str	r1, [r2, #32]
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4619      	mov	r1, r3
 8001f46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10f      	bne.n	8001f6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fb70 	bl	8000684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b08c      	sub	sp, #48	; 0x30
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b22      	cmp	r3, #34	; 0x22
 8001fc0:	f040 80ab 	bne.w	800211a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d117      	bne.n	8001ffe <UART_Receive_IT+0x50>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d113      	bne.n	8001ffe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	1c9a      	adds	r2, r3, #2
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8001ffc:	e026      	b.n	800204c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002010:	d007      	beq.n	8002022 <UART_Receive_IT+0x74>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <UART_Receive_IT+0x82>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e008      	b.n	8002042 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800203c:	b2da      	uxtb	r2, r3
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4619      	mov	r1, r3
 800205a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800205c:	2b00      	cmp	r3, #0
 800205e:	d15a      	bne.n	8002116 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0220 	bic.w	r2, r2, #32
 800206e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800207e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2b01      	cmp	r3, #1
 800209e:	d135      	bne.n	800210c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	330c      	adds	r3, #12
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	e853 3f00 	ldrex	r3, [r3]
 80020b4:	613b      	str	r3, [r7, #16]
   return(result);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f023 0310 	bic.w	r3, r3, #16
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	330c      	adds	r3, #12
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	623a      	str	r2, [r7, #32]
 80020c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	e841 2300 	strex	r3, r2, [r1]
 80020d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1e5      	bne.n	80020a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d10a      	bne.n	80020fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fdf9 	bl	8001cfc <HAL_UARTEx_RxEventCallback>
 800210a:	e002      	b.n	8002112 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fde1 	bl	8001cd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e002      	b.n	800211c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800211a:	2302      	movs	r3, #2
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002128:	b09f      	sub	sp, #124	; 0x7c
 800212a:	af00      	add	r7, sp, #0
 800212c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213a:	68d9      	ldr	r1, [r3, #12]
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	ea40 0301 	orr.w	r3, r0, r1
 8002144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	431a      	orrs	r2, r3
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	431a      	orrs	r2, r3
 8002156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4313      	orrs	r3, r2
 800215c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002168:	f021 010c 	bic.w	r1, r1, #12
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002172:	430b      	orrs	r3, r1
 8002174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	6999      	ldr	r1, [r3, #24]
 8002184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	ea40 0301 	orr.w	r3, r0, r1
 800218c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4bc5      	ldr	r3, [pc, #788]	; (80024a8 <UART_SetConfig+0x384>)
 8002194:	429a      	cmp	r2, r3
 8002196:	d004      	beq.n	80021a2 <UART_SetConfig+0x7e>
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4bc3      	ldr	r3, [pc, #780]	; (80024ac <UART_SetConfig+0x388>)
 800219e:	429a      	cmp	r2, r3
 80021a0:	d103      	bne.n	80021aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a2:	f7fe ff71 	bl	8001088 <HAL_RCC_GetPCLK2Freq>
 80021a6:	6778      	str	r0, [r7, #116]	; 0x74
 80021a8:	e002      	b.n	80021b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021aa:	f7fe ff59 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 80021ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b8:	f040 80b6 	bne.w	8002328 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021be:	461c      	mov	r4, r3
 80021c0:	f04f 0500 	mov.w	r5, #0
 80021c4:	4622      	mov	r2, r4
 80021c6:	462b      	mov	r3, r5
 80021c8:	1891      	adds	r1, r2, r2
 80021ca:	6439      	str	r1, [r7, #64]	; 0x40
 80021cc:	415b      	adcs	r3, r3
 80021ce:	647b      	str	r3, [r7, #68]	; 0x44
 80021d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021d4:	1912      	adds	r2, r2, r4
 80021d6:	eb45 0303 	adc.w	r3, r5, r3
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021e8:	00d0      	lsls	r0, r2, #3
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	1911      	adds	r1, r2, r4
 80021f0:	6639      	str	r1, [r7, #96]	; 0x60
 80021f2:	416b      	adcs	r3, r5
 80021f4:	667b      	str	r3, [r7, #100]	; 0x64
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	1891      	adds	r1, r2, r2
 8002202:	63b9      	str	r1, [r7, #56]	; 0x38
 8002204:	415b      	adcs	r3, r3
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800220c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002210:	f7fe f800 	bl	8000214 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4ba5      	ldr	r3, [pc, #660]	; (80024b0 <UART_SetConfig+0x38c>)
 800221a:	fba3 2302 	umull	r2, r3, r3, r2
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	011e      	lsls	r6, r3, #4
 8002222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002224:	461c      	mov	r4, r3
 8002226:	f04f 0500 	mov.w	r5, #0
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	1891      	adds	r1, r2, r2
 8002230:	6339      	str	r1, [r7, #48]	; 0x30
 8002232:	415b      	adcs	r3, r3
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
 8002236:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800223a:	1912      	adds	r2, r2, r4
 800223c:	eb45 0303 	adc.w	r3, r5, r3
 8002240:	f04f 0000 	mov.w	r0, #0
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	00d9      	lsls	r1, r3, #3
 800224a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800224e:	00d0      	lsls	r0, r2, #3
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	1911      	adds	r1, r2, r4
 8002256:	65b9      	str	r1, [r7, #88]	; 0x58
 8002258:	416b      	adcs	r3, r5
 800225a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800225c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	461a      	mov	r2, r3
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	1891      	adds	r1, r2, r2
 8002268:	62b9      	str	r1, [r7, #40]	; 0x28
 800226a:	415b      	adcs	r3, r3
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002272:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002276:	f7fd ffcd 	bl	8000214 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <UART_SetConfig+0x38c>)
 8002280:	fba3 1302 	umull	r1, r3, r3, r2
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	2164      	movs	r1, #100	; 0x64
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	3332      	adds	r3, #50	; 0x32
 8002292:	4a87      	ldr	r2, [pc, #540]	; (80024b0 <UART_SetConfig+0x38c>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a0:	441e      	add	r6, r3
 80022a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a4:	4618      	mov	r0, r3
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	1894      	adds	r4, r2, r2
 80022b0:	623c      	str	r4, [r7, #32]
 80022b2:	415b      	adcs	r3, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ba:	1812      	adds	r2, r2, r0
 80022bc:	eb41 0303 	adc.w	r3, r1, r3
 80022c0:	f04f 0400 	mov.w	r4, #0
 80022c4:	f04f 0500 	mov.w	r5, #0
 80022c8:	00dd      	lsls	r5, r3, #3
 80022ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022ce:	00d4      	lsls	r4, r2, #3
 80022d0:	4622      	mov	r2, r4
 80022d2:	462b      	mov	r3, r5
 80022d4:	1814      	adds	r4, r2, r0
 80022d6:	653c      	str	r4, [r7, #80]	; 0x50
 80022d8:	414b      	adcs	r3, r1
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
 80022dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	461a      	mov	r2, r3
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	1891      	adds	r1, r2, r2
 80022e8:	61b9      	str	r1, [r7, #24]
 80022ea:	415b      	adcs	r3, r3
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022f6:	f7fd ff8d 	bl	8000214 <__aeabi_uldivmod>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <UART_SetConfig+0x38c>)
 8002300:	fba3 1302 	umull	r1, r3, r3, r2
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	2164      	movs	r1, #100	; 0x64
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	3332      	adds	r3, #50	; 0x32
 8002312:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <UART_SetConfig+0x38c>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	f003 0207 	and.w	r2, r3, #7
 800231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4432      	add	r2, r6
 8002324:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002326:	e0b9      	b.n	800249c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232a:	461c      	mov	r4, r3
 800232c:	f04f 0500 	mov.w	r5, #0
 8002330:	4622      	mov	r2, r4
 8002332:	462b      	mov	r3, r5
 8002334:	1891      	adds	r1, r2, r2
 8002336:	6139      	str	r1, [r7, #16]
 8002338:	415b      	adcs	r3, r3
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002340:	1912      	adds	r2, r2, r4
 8002342:	eb45 0303 	adc.w	r3, r5, r3
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	00d9      	lsls	r1, r3, #3
 8002350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002354:	00d0      	lsls	r0, r2, #3
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	eb12 0804 	adds.w	r8, r2, r4
 800235e:	eb43 0905 	adc.w	r9, r3, r5
 8002362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	008b      	lsls	r3, r1, #2
 8002376:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800237a:	0082      	lsls	r2, r0, #2
 800237c:	4640      	mov	r0, r8
 800237e:	4649      	mov	r1, r9
 8002380:	f7fd ff48 	bl	8000214 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <UART_SetConfig+0x38c>)
 800238a:	fba3 2302 	umull	r2, r3, r3, r2
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	011e      	lsls	r6, r3, #4
 8002392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002394:	4618      	mov	r0, r3
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	1894      	adds	r4, r2, r2
 80023a0:	60bc      	str	r4, [r7, #8]
 80023a2:	415b      	adcs	r3, r3
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023aa:	1812      	adds	r2, r2, r0
 80023ac:	eb41 0303 	adc.w	r3, r1, r3
 80023b0:	f04f 0400 	mov.w	r4, #0
 80023b4:	f04f 0500 	mov.w	r5, #0
 80023b8:	00dd      	lsls	r5, r3, #3
 80023ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023be:	00d4      	lsls	r4, r2, #3
 80023c0:	4622      	mov	r2, r4
 80023c2:	462b      	mov	r3, r5
 80023c4:	1814      	adds	r4, r2, r0
 80023c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80023c8:	414b      	adcs	r3, r1
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	008b      	lsls	r3, r1, #2
 80023e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023e4:	0082      	lsls	r2, r0, #2
 80023e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023ea:	f7fd ff13 	bl	8000214 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <UART_SetConfig+0x38c>)
 80023f4:	fba3 1302 	umull	r1, r3, r3, r2
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	3332      	adds	r3, #50	; 0x32
 8002406:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <UART_SetConfig+0x38c>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002412:	441e      	add	r6, r3
 8002414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002416:	4618      	mov	r0, r3
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	1894      	adds	r4, r2, r2
 8002422:	603c      	str	r4, [r7, #0]
 8002424:	415b      	adcs	r3, r3
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242c:	1812      	adds	r2, r2, r0
 800242e:	eb41 0303 	adc.w	r3, r1, r3
 8002432:	f04f 0400 	mov.w	r4, #0
 8002436:	f04f 0500 	mov.w	r5, #0
 800243a:	00dd      	lsls	r5, r3, #3
 800243c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002440:	00d4      	lsls	r4, r2, #3
 8002442:	4622      	mov	r2, r4
 8002444:	462b      	mov	r3, r5
 8002446:	eb12 0a00 	adds.w	sl, r2, r0
 800244a:	eb43 0b01 	adc.w	fp, r3, r1
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	008b      	lsls	r3, r1, #2
 8002462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002466:	0082      	lsls	r2, r0, #2
 8002468:	4650      	mov	r0, sl
 800246a:	4659      	mov	r1, fp
 800246c:	f7fd fed2 	bl	8000214 <__aeabi_uldivmod>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <UART_SetConfig+0x38c>)
 8002476:	fba3 1302 	umull	r1, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2164      	movs	r1, #100	; 0x64
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	3332      	adds	r3, #50	; 0x32
 8002488:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <UART_SetConfig+0x38c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	f003 020f 	and.w	r2, r3, #15
 8002494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4432      	add	r2, r6
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	377c      	adds	r7, #124	; 0x7c
 80024a0:	46bd      	mov	sp, r7
 80024a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a6:	bf00      	nop
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	51eb851f 	.word	0x51eb851f

080024b4 <__libc_init_array>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	4d0d      	ldr	r5, [pc, #52]	; (80024ec <__libc_init_array+0x38>)
 80024b8:	4c0d      	ldr	r4, [pc, #52]	; (80024f0 <__libc_init_array+0x3c>)
 80024ba:	1b64      	subs	r4, r4, r5
 80024bc:	10a4      	asrs	r4, r4, #2
 80024be:	2600      	movs	r6, #0
 80024c0:	42a6      	cmp	r6, r4
 80024c2:	d109      	bne.n	80024d8 <__libc_init_array+0x24>
 80024c4:	4d0b      	ldr	r5, [pc, #44]	; (80024f4 <__libc_init_array+0x40>)
 80024c6:	4c0c      	ldr	r4, [pc, #48]	; (80024f8 <__libc_init_array+0x44>)
 80024c8:	f000 f818 	bl	80024fc <_init>
 80024cc:	1b64      	subs	r4, r4, r5
 80024ce:	10a4      	asrs	r4, r4, #2
 80024d0:	2600      	movs	r6, #0
 80024d2:	42a6      	cmp	r6, r4
 80024d4:	d105      	bne.n	80024e2 <__libc_init_array+0x2e>
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024dc:	4798      	blx	r3
 80024de:	3601      	adds	r6, #1
 80024e0:	e7ee      	b.n	80024c0 <__libc_init_array+0xc>
 80024e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e6:	4798      	blx	r3
 80024e8:	3601      	adds	r6, #1
 80024ea:	e7f2      	b.n	80024d2 <__libc_init_array+0x1e>
 80024ec:	08002524 	.word	0x08002524
 80024f0:	08002524 	.word	0x08002524
 80024f4:	08002524 	.word	0x08002524
 80024f8:	08002528 	.word	0x08002528

080024fc <_init>:
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	bf00      	nop
 8002500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002502:	bc08      	pop	{r3}
 8002504:	469e      	mov	lr, r3
 8002506:	4770      	bx	lr

08002508 <_fini>:
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	bf00      	nop
 800250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250e:	bc08      	pop	{r3}
 8002510:	469e      	mov	lr, r3
 8002512:	4770      	bx	lr
