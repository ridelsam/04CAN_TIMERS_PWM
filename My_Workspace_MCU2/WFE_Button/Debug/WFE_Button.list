
WFE_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000284c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a78  08002a78  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a80  08002a80  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000094  08002b1c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b1c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a886  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001879  00000000  00000000  0002a94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021e98  00000000  00000000  0002c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009379  00000000  00000000  0004e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cfa6b  00000000  00000000  00057a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001274fc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000618  00000000  00000000  00127550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001de8  00000000  00000000  00127b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002a04 	.word	0x08002a04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08002a04 	.word	0x08002a04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:

extern uint8_t some_data[];


int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0

	char msg[50];

	GPIO_Init();
 80005be:	f000 f877 	bl	80006b0 <GPIO_Init>

	HAL_Init();
 80005c2:	f000 fa25 	bl	8000a10 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);

	//HAL_SuspendTick();

	UART2_Init();
 80005c6:	f000 f8d5 	bl	8000774 <UART2_Init>

	GPIO_AnalogConfig();
 80005ca:	f000 f84d 	bl	8000668 <GPIO_AnalogConfig>

	while(1)
	{

		if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
 80005ce:	4822      	ldr	r0, [pc, #136]	; (8000658 <main+0xa0>)
 80005d0:	f7ff fe1e 	bl	8000210 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	491e      	ldr	r1, [pc, #120]	; (8000658 <main+0xa0>)
 80005de:	481f      	ldr	r0, [pc, #124]	; (800065c <main+0xa4>)
 80005e0:	f000 fe9f 	bl	8001322 <HAL_UART_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x36>
		{
			Error_handler();
 80005ea:	f000 f911 	bl	8000810 <Error_handler>
		}

		memset(msg,0,sizeof(msg));
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2232      	movs	r2, #50	; 0x32
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fdcf 	bl	8002198 <memset>
		sprintf(msg,"Going to Sleep !\r\n");
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4918      	ldr	r1, [pc, #96]	; (8000660 <main+0xa8>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fdd2 	bl	80021a8 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,(uint16_t)strlen((char*)msg),HAL_MAX_DELAY);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe02 	bl	8000210 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0xa4>)
 8000618:	f000 fe83 	bl	8001322 <HAL_UART_Transmit>

		/* Systick is not required so disabled it before going to sleep*/
		HAL_SuspendTick();
 800061c:	f000 fa6a 	bl	8000af4 <HAL_SuspendTick>

		/* going to sleep here */
		__WFE();
 8000620:	bf20      	wfe

		/* Continues from here when wakes up */
		/* Enable the Systick */
		HAL_ResumeTick();
 8000622:	f000 fa77 	bl	8000b14 <HAL_ResumeTick>

		memset(msg,0,sizeof(msg));
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2232      	movs	r2, #50	; 0x32
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fdb3 	bl	8002198 <memset>
		sprintf(msg,"Woke up !\r\n");
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	490b      	ldr	r1, [pc, #44]	; (8000664 <main+0xac>)
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fdb6 	bl	80021a8 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,(uint16_t)strlen((char*)msg),HAL_MAX_DELAY);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fde6 	bl	8000210 <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	1d39      	adds	r1, r7, #4
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	4803      	ldr	r0, [pc, #12]	; (800065c <main+0xa4>)
 8000650:	f000 fe67 	bl	8001322 <HAL_UART_Transmit>
		if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
 8000654:	e7bb      	b.n	80005ce <main+0x16>
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	200000bc 	.word	0x200000bc
 8000660:	08002a1c 	.word	0x08002a1c
 8000664:	08002a30 	.word	0x08002a30

08000668 <GPIO_AnalogConfig>:


 }

void GPIO_AnalogConfig(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioA,GpioC;

	uint32_t gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_4 | \
 800066e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
						 GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7 |\
						 GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |\
						 GPIO_PIN_11 | GPIO_PIN_12 |GPIO_PIN_13 | \
						 GPIO_PIN_14 | GPIO_PIN_15;

	GpioA.Pin = gpio_pins;
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	61bb      	str	r3, [r7, #24]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000678:	2303      	movs	r3, #3
 800067a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA,&GpioA);
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	4619      	mov	r1, r3
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <GPIO_AnalogConfig+0x40>)
 8000684:	f000 fc06 	bl	8000e94 <HAL_GPIO_Init>

	gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2|  \
 8000688:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
			    GPIO_PIN_3 | GPIO_PIN_4 |  GPIO_PIN_5 | \
			    GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | \
			    GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
			    GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;

	GpioC.Pin = gpio_pins;
 800068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000690:	607b      	str	r3, [r7, #4]
	GpioC.Mode = GPIO_MODE_ANALOG;
 8000692:	2303      	movs	r3, #3
 8000694:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC,&GpioC);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <GPIO_AnalogConfig+0x44>)
 800069c:	f000 fbfa 	bl	8000e94 <HAL_GPIO_Init>


}
 80006a0:	bf00      	nop
 80006a2:	3730      	adds	r7, #48	; 0x30
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020800 	.word	0x40020800

080006b0 <GPIO_Init>:


void GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <GPIO_Init+0xb8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <GPIO_Init+0xb8>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <GPIO_Init+0xb8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <GPIO_Init+0xb8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <GPIO_Init+0xb8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <GPIO_Init+0xb8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
    __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE();
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <GPIO_Init+0xb8>)
 80006f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <GPIO_Init+0xb8>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	6513      	str	r3, [r2, #80]	; 0x50


	GPIO_InitTypeDef ledgpio , buttongpio;
#if 1
	ledgpio.Pin = GPIO_PIN_5;
 80006fa:	2320      	movs	r3, #32
 80006fc:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <GPIO_Init+0xbc>)
 800070e:	f000 fbc1 	bl	8000e94 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_12;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <GPIO_Init+0xbc>)
 8000728:	f000 fbb4 	bl	8000e94 <HAL_GPIO_Init>

#endif

	buttongpio.Pin = GPIO_PIN_13;
 800072c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000730:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_EVT_FALLING;
 8000732:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8000736:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC,&buttongpio);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4619      	mov	r1, r3
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <GPIO_Init+0xc0>)
 8000744:	f000 fba6 	bl	8000e94 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <GPIO_Init+0xbc>)
 8000750:	f000 fd34 	bl	80011bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <GPIO_Init+0xbc>)
 800075a:	f000 fd2f 	bl	80011bc <HAL_GPIO_WritePin>


}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020800 	.word	0x40020800

08000774 <UART2_Init>:



void UART2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0


	huart2.Instance = USART2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <UART2_Init+0x44>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <UART2_Init+0x48>)
 800077c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate =921600;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <UART2_Init+0x44>)
 8000780:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000784:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <UART2_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <UART2_Init+0x44>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <UART2_Init+0x44>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <UART2_Init+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <UART2_Init+0x44>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	615a      	str	r2, [r3, #20]


	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <UART2_Init+0x44>)
 80007a6:	f000 fd6f 	bl	8001288 <HAL_UART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80007b0:	f000 f82e 	bl	8000810 <Error_handler>
	}

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000bc 	.word	0x200000bc
 80007bc:	40004400 	.word	0x40004400

080007c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x34>)
 80007cc:	f7ff fd20 	bl	8000210 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x34>)
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80007dc:	f000 fda1 	bl	8001322 <HAL_UART_Transmit>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Error_handler();
 80007e6:	f000 f813 	bl	8000810 <Error_handler>
	}
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000000 	.word	0x20000000
 80007f8:	200000bc 	.word	0x200000bc

080007fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <Error_handler>:
void Error_handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	while(1);
 8000814:	e7fe      	b.n	8000814 <Error_handler+0x4>
	...

08000818 <HAL_MspInit>:
/* USER CODE END Header */

#include "main.h"

void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 fa59 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x40>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_MspInit+0x40>)
 8000828:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800082c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	f06f 000b 	mvn.w	r0, #11
 8000836:	f000 fa58 	bl	8000cea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	f06f 000a 	mvn.w	r0, #10
 8000842:	f000 fa52 	bl	8000cea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	f06f 0009 	mvn.w	r0, #9
 800084e:	f000 fa4c 	bl	8000cea <HAL_NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <HAL_UART_MspInit>:
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,1,0);

}

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <HAL_UART_MspInit+0x94>)
 8000866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_UART_MspInit+0x94>)
 800086a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800086e:	6613      	str	r3, [r2, #96]	; 0x60
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_UART_MspInit+0x94>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_UART_MspInit+0x94>)
 800087a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_UART_MspInit+0x94>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x94>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <HAL_UART_MspInit+0x94>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_UART_MspInit+0x94>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80008a8:	2304      	movs	r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80008b8:	2307      	movs	r3, #7
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <HAL_UART_MspInit+0x98>)
 80008c4:	f000 fae6 	bl	8000e94 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80008c8:	2308      	movs	r3, #8
 80008ca:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <HAL_UART_MspInit+0x98>)
 80008d4:	f000 fade 	bl	8000e94 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d8:	2026      	movs	r0, #38	; 0x26
 80008da:	f000 fa22 	bl	8000d22 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2026      	movs	r0, #38	; 0x26
 80008e4:	f000 fa01 	bl	8000cea <HAL_NVIC_SetPriority>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <SysTick_Handler>:
  */
#include "main.h"

extern UART_HandleTypeDef huart2;
void SysTick_Handler (void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008fc:	f000 f8da 	bl	8000ab4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000900:	f000 fa29 	bl	8000d56 <HAL_SYSTICK_IRQHandler>

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800090c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000910:	f000 fc6e 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f000 fd93 	bl	8001448 <HAL_UART_IRQHandler>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000bc 	.word	0x200000bc

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f001 fbf2 	bl	8002144 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20020000 	.word	0x20020000
 800098c:	00000400 	.word	0x00000400
 8000990:	200000b0 	.word	0x200000b0
 8000994:	20000118 	.word	0x20000118

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f001 fbb1 	bl	8002150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fde3 	bl	80005b8 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000a00:	08002a88 	.word	0x08002a88
  ldr r2, =_sbss
 8000a04:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000a08:	20000114 	.word	0x20000114

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f94b 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fee8 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f963 	bl	8000d3e <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f92b 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000024 	.word	0x20000024
 8000aac:	2000002c 	.word	0x2000002c
 8000ab0:	20000028 	.word	0x20000028

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000002c 	.word	0x2000002c
 8000ad8:	20000100 	.word	0x20000100

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000100 	.word	0x20000100

08000af4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_SuspendTick+0x1c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_SuspendTick+0x1c>)
 8000afe:	f023 0302 	bic.w	r3, r3, #2
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_ResumeTick+0x1c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_ResumeTick+0x1c>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff29 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff3e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff31 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d5a:	f000 f802 	bl	8000d62 <HAL_SYSTICK_Callback>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d7e:	f7ff fead 	bl	8000adc <HAL_GetTick>
 8000d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d008      	beq.n	8000da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e052      	b.n	8000e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0216 	bic.w	r2, r2, #22
 8000db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <HAL_DMA_Abort+0x62>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0208 	bic.w	r2, r2, #8
 8000de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df2:	e013      	b.n	8000e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df4:	f7ff fe72 	bl	8000adc <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d90c      	bls.n	8000e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2220      	movs	r2, #32
 8000e06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e015      	b.n	8000e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1e4      	bne.n	8000df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2e:	223f      	movs	r2, #63	; 0x3f
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d004      	beq.n	8000e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00c      	b.n	8000e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2205      	movs	r2, #5
 8000e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e165      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8154 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80ae 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_GPIO_Init+0x300>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x308>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x310>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x20a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x206>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x202>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae96 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fad6 	bl	80007c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_RCC_GetHCLKFreq+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000024 	.word	0x20000024

08001238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800123c:	f7ff fff0 	bl	8001220 <HAL_RCC_GetHCLKFreq>
 8001240:	4602      	mov	r2, r0
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	0a9b      	lsrs	r3, r3, #10
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	4903      	ldr	r1, [pc, #12]	; (800125c <HAL_RCC_GetPCLK1Freq+0x24>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	08002a3c 	.word	0x08002a3c

08001260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001264:	f7ff ffdc 	bl	8001220 <HAL_RCC_GetHCLKFreq>
 8001268:	4602      	mov	r2, r0
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	0b5b      	lsrs	r3, r3, #13
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	4903      	ldr	r1, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001276:	5ccb      	ldrb	r3, [r1, r3]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	08002a3c 	.word	0x08002a3c

08001288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e03f      	b.n	800131a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fad4 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fd71 	bl	8001db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2220      	movs	r2, #32
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2220      	movs	r2, #32
 8001314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b08a      	sub	sp, #40	; 0x28
 8001326:	af02      	add	r7, sp, #8
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4613      	mov	r3, r2
 8001330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b20      	cmp	r3, #32
 8001340:	d17c      	bne.n	800143c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_UART_Transmit+0x2c>
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e075      	b.n	800143e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_UART_Transmit+0x3e>
 800135c:	2302      	movs	r3, #2
 800135e:	e06e      	b.n	800143e <HAL_UART_Transmit+0x11c>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2221      	movs	r2, #33	; 0x21
 8001372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001376:	f7ff fbb1 	bl	8000adc <HAL_GetTick>
 800137a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	88fa      	ldrh	r2, [r7, #6]
 8001380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001390:	d108      	bne.n	80013a4 <HAL_UART_Transmit+0x82>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d104      	bne.n	80013a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	e003      	b.n	80013ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80013b4:	e02a      	b.n	800140c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2200      	movs	r2, #0
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 faef 	bl	80019a4 <UART_WaitOnFlagUntilTimeout>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e036      	b.n	800143e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10b      	bne.n	80013ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	3302      	adds	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	e007      	b.n	80013fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001410:	b29b      	uxth	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1cf      	bne.n	80013b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2200      	movs	r2, #0
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fabf 	bl	80019a4 <UART_WaitOnFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e006      	b.n	800143e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2220      	movs	r2, #32
 8001434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	e000      	b.n	800143e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800143c:	2302      	movs	r3, #2
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ba      	sub	sp, #232	; 0xe8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800147a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800148e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001492:	f003 0320 	and.w	r3, r3, #32
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_UART_IRQHandler+0x66>
 800149a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fbc9 	bl	8001c3e <UART_Receive_IT>
      return;
 80014ac:	e256      	b.n	800195c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80014ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80de 	beq.w	8001674 <HAL_UART_IRQHandler+0x22c>
 80014b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d106      	bne.n	80014d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80014c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80014c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80d1 	beq.w	8001674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80014d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_UART_IRQHandler+0xae>
 80014de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_UART_IRQHandler+0xd2>
 8001502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f043 0202 	orr.w	r2, r3, #2
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800151a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_UART_IRQHandler+0xf6>
 8001526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f043 0204 	orr.w	r2, r3, #4
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800153e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d011      	beq.n	800156e <HAL_UART_IRQHandler+0x126>
 800154a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f043 0208 	orr.w	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 81ed 	beq.w	8001952 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_UART_IRQHandler+0x14e>
 8001584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fb54 	bl	8001c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a0:	2b40      	cmp	r3, #64	; 0x40
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_UART_IRQHandler+0x17a>
 80015ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d04f      	beq.n	8001662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fa5c 	bl	8001a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d2:	2b40      	cmp	r3, #64	; 0x40
 80015d4:	d141      	bne.n	800165a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3314      	adds	r3, #20
 80015dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e4:	e853 3f00 	ldrex	r3, [r3]
 80015e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80015ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3314      	adds	r3, #20
 80015fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800160a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800160e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001612:	e841 2300 	strex	r3, r2, [r1]
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800161a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1d9      	bne.n	80015d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	2b00      	cmp	r3, #0
 8001628:	d013      	beq.n	8001652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	4a7d      	ldr	r2, [pc, #500]	; (8001824 <HAL_UART_IRQHandler+0x3dc>)
 8001630:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc0a 	bl	8000e50 <HAL_DMA_Abort_IT>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001650:	e00e      	b.n	8001670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f990 	bl	8001978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001658:	e00a      	b.n	8001670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f98c 	bl	8001978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001660:	e006      	b.n	8001670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f988 	bl	8001978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800166e:	e170      	b.n	8001952 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001670:	bf00      	nop
    return;
 8001672:	e16e      	b.n	8001952 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	2b01      	cmp	r3, #1
 800167a:	f040 814a 	bne.w	8001912 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800167e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8143 	beq.w	8001912 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800168c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 813c 	beq.w	8001912 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	f040 80b4 	bne.w	8001828 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80016cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8140 	beq.w	8001956 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80016da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80016de:	429a      	cmp	r2, r3
 80016e0:	f080 8139 	bcs.w	8001956 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80016ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f6:	f000 8088 	beq.w	800180a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	330c      	adds	r3, #12
 8001700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001708:	e853 3f00 	ldrex	r3, [r3]
 800170c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	330c      	adds	r3, #12
 8001722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800172a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800172e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001732:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001736:	e841 2300 	strex	r3, r2, [r1]
 800173a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800173e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1d9      	bne.n	80016fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3314      	adds	r3, #20
 800174c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800174e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001750:	e853 3f00 	ldrex	r3, [r3]
 8001754:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3314      	adds	r3, #20
 8001766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800176a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800176e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001770:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001776:	e841 2300 	strex	r3, r2, [r1]
 800177a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800177c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e1      	bne.n	8001746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3314      	adds	r3, #20
 8001788:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800178c:	e853 3f00 	ldrex	r3, [r3]
 8001790:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3314      	adds	r3, #20
 80017a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80017a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80017ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017ae:	e841 2300 	strex	r3, r2, [r1]
 80017b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80017b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1e3      	bne.n	8001782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2220      	movs	r2, #32
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	330c      	adds	r3, #12
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d2:	e853 3f00 	ldrex	r3, [r3]
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80017d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017da:	f023 0310 	bic.w	r3, r3, #16
 80017de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	330c      	adds	r3, #12
 80017e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80017ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80017ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017f4:	e841 2300 	strex	r3, r2, [r1]
 80017f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80017fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e3      	bne.n	80017c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fab3 	bl	8000d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001812:	b29b      	uxth	r3, r3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8b6 	bl	800198c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001820:	e099      	b.n	8001956 <HAL_UART_IRQHandler+0x50e>
 8001822:	bf00      	nop
 8001824:	08001b47 	.word	0x08001b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001830:	b29b      	uxth	r3, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800183c:	b29b      	uxth	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 808b 	beq.w	800195a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8086 	beq.w	800195a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	330c      	adds	r3, #12
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001858:	e853 3f00 	ldrex	r3, [r3]
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800185e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	330c      	adds	r3, #12
 800186e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001872:	647a      	str	r2, [r7, #68]	; 0x44
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800187a:	e841 2300 	strex	r3, r2, [r1]
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1e3      	bne.n	800184e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3314      	adds	r3, #20
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	e853 3f00 	ldrex	r3, [r3]
 8001894:	623b      	str	r3, [r7, #32]
   return(result);
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3314      	adds	r3, #20
 80018a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018aa:	633a      	str	r2, [r7, #48]	; 0x30
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b2:	e841 2300 	strex	r3, r2, [r1]
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e3      	bne.n	8001886 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	e853 3f00 	ldrex	r3, [r3]
 80018da:	60fb      	str	r3, [r7, #12]
   return(result);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	330c      	adds	r3, #12
 80018ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80018f0:	61fa      	str	r2, [r7, #28]
 80018f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018f4:	69b9      	ldr	r1, [r7, #24]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	e841 2300 	strex	r3, r2, [r1]
 80018fc:	617b      	str	r3, [r7, #20]
   return(result);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e3      	bne.n	80018cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f83e 	bl	800198c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001910:	e023      	b.n	800195a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_UART_IRQHandler+0x4ea>
 800191e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f91f 	bl	8001b6e <UART_Transmit_IT>
    return;
 8001930:	e014      	b.n	800195c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00e      	beq.n	800195c <HAL_UART_IRQHandler+0x514>
 800193e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f95f 	bl	8001c0e <UART_EndTransmit_IT>
    return;
 8001950:	e004      	b.n	800195c <HAL_UART_IRQHandler+0x514>
    return;
 8001952:	bf00      	nop
 8001954:	e002      	b.n	800195c <HAL_UART_IRQHandler+0x514>
      return;
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <HAL_UART_IRQHandler+0x514>
      return;
 800195a:	bf00      	nop
  }
}
 800195c:	37e8      	adds	r7, #232	; 0xe8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop

08001964 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019b4:	e050      	b.n	8001a58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d04c      	beq.n	8001a58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80019c4:	f7ff f88a 	bl	8000adc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d241      	bcs.n	8001a58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	330c      	adds	r3, #12
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	e853 3f00 	ldrex	r3, [r3]
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	330c      	adds	r3, #12
 80019f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019f4:	637a      	str	r2, [r7, #52]	; 0x34
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019fc:	e841 2300 	strex	r3, r2, [r1]
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e5      	bne.n	80019d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	e853 3f00 	ldrex	r3, [r3]
 8001a16:	613b      	str	r3, [r7, #16]
   return(result);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3314      	adds	r3, #20
 8001a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a28:	623a      	str	r2, [r7, #32]
 8001a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a2c:	69f9      	ldr	r1, [r7, #28]
 8001a2e:	6a3a      	ldr	r2, [r7, #32]
 8001a30:	e841 2300 	strex	r3, r2, [r1]
 8001a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e5      	bne.n	8001a08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e00f      	b.n	8001a78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d09f      	beq.n	80019b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3740      	adds	r7, #64	; 0x40
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b095      	sub	sp, #84	; 0x54
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a92:	e853 3f00 	ldrex	r3, [r3]
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ab0:	e841 2300 	strex	r3, r2, [r1]
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e5      	bne.n	8001a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	e853 3f00 	ldrex	r3, [r3]
 8001aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3314      	adds	r3, #20
 8001ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae4:	e841 2300 	strex	r3, r2, [r1]
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e5      	bne.n	8001abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d119      	bne.n	8001b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	330c      	adds	r3, #12
 8001afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	e853 3f00 	ldrex	r3, [r3]
 8001b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f023 0310 	bic.w	r3, r3, #16
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	330c      	adds	r3, #12
 8001b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b18:	61ba      	str	r2, [r7, #24]
 8001b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	e841 2300 	strex	r3, r2, [r1]
 8001b24:	613b      	str	r3, [r7, #16]
   return(result);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e5      	bne.n	8001af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b3a:	bf00      	nop
 8001b3c:	3754      	adds	r7, #84	; 0x54
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff ff09 	bl	8001978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b21      	cmp	r3, #33	; 0x21
 8001b80:	d13e      	bne.n	8001c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8a:	d114      	bne.n	8001bb6 <UART_Transmit_IT+0x48>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d110      	bne.n	8001bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	621a      	str	r2, [r3, #32]
 8001bb4:	e008      	b.n	8001bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	1c59      	adds	r1, r3, #1
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6211      	str	r1, [r2, #32]
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10f      	bne.n	8001bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fde4 	bl	80007fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b08c      	sub	sp, #48	; 0x30
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b22      	cmp	r3, #34	; 0x22
 8001c50:	f040 80ab 	bne.w	8001daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5c:	d117      	bne.n	8001c8e <UART_Receive_IT+0x50>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d113      	bne.n	8001c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	1c9a      	adds	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c8c:	e026      	b.n	8001cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca0:	d007      	beq.n	8001cb2 <UART_Receive_IT+0x74>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <UART_Receive_IT+0x82>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e008      	b.n	8001cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d15a      	bne.n	8001da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0220 	bic.w	r2, r2, #32
 8001cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d135      	bne.n	8001d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	e853 3f00 	ldrex	r3, [r3]
 8001d44:	613b      	str	r3, [r7, #16]
   return(result);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f023 0310 	bic.w	r3, r3, #16
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	330c      	adds	r3, #12
 8001d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d56:	623a      	str	r2, [r7, #32]
 8001d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5a:	69f9      	ldr	r1, [r7, #28]
 8001d5c:	6a3a      	ldr	r2, [r7, #32]
 8001d5e:	e841 2300 	strex	r3, r2, [r1]
 8001d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e5      	bne.n	8001d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d10a      	bne.n	8001d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d92:	4619      	mov	r1, r3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fdf9 	bl	800198c <HAL_UARTEx_RxEventCallback>
 8001d9a:	e002      	b.n	8001da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fde1 	bl	8001964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e002      	b.n	8001dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3730      	adds	r7, #48	; 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db8:	b09f      	sub	sp, #124	; 0x7c
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dca:	68d9      	ldr	r1, [r3, #12]
 8001dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	ea40 0301 	orr.w	r3, r0, r1
 8001dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001df8:	f021 010c 	bic.w	r1, r1, #12
 8001dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e02:	430b      	orrs	r3, r1
 8001e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e12:	6999      	ldr	r1, [r3, #24]
 8001e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	ea40 0301 	orr.w	r3, r0, r1
 8001e1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4bc5      	ldr	r3, [pc, #788]	; (8002138 <UART_SetConfig+0x384>)
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d004      	beq.n	8001e32 <UART_SetConfig+0x7e>
 8001e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4bc3      	ldr	r3, [pc, #780]	; (800213c <UART_SetConfig+0x388>)
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d103      	bne.n	8001e3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e32:	f7ff fa15 	bl	8001260 <HAL_RCC_GetPCLK2Freq>
 8001e36:	6778      	str	r0, [r7, #116]	; 0x74
 8001e38:	e002      	b.n	8001e40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e3a:	f7ff f9fd 	bl	8001238 <HAL_RCC_GetPCLK1Freq>
 8001e3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e48:	f040 80b6 	bne.w	8001fb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4e:	461c      	mov	r4, r3
 8001e50:	f04f 0500 	mov.w	r5, #0
 8001e54:	4622      	mov	r2, r4
 8001e56:	462b      	mov	r3, r5
 8001e58:	1891      	adds	r1, r2, r2
 8001e5a:	6439      	str	r1, [r7, #64]	; 0x40
 8001e5c:	415b      	adcs	r3, r3
 8001e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e64:	1912      	adds	r2, r2, r4
 8001e66:	eb45 0303 	adc.w	r3, r5, r3
 8001e6a:	f04f 0000 	mov.w	r0, #0
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	00d9      	lsls	r1, r3, #3
 8001e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e78:	00d0      	lsls	r0, r2, #3
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	1911      	adds	r1, r2, r4
 8001e80:	6639      	str	r1, [r7, #96]	; 0x60
 8001e82:	416b      	adcs	r3, r5
 8001e84:	667b      	str	r3, [r7, #100]	; 0x64
 8001e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	1891      	adds	r1, r2, r2
 8001e92:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e94:	415b      	adcs	r3, r3
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ea0:	f7fe fa0e 	bl	80002c0 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4ba5      	ldr	r3, [pc, #660]	; (8002140 <UART_SetConfig+0x38c>)
 8001eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	011e      	lsls	r6, r3, #4
 8001eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb4:	461c      	mov	r4, r3
 8001eb6:	f04f 0500 	mov.w	r5, #0
 8001eba:	4622      	mov	r2, r4
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	1891      	adds	r1, r2, r2
 8001ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8001ec2:	415b      	adcs	r3, r3
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eca:	1912      	adds	r2, r2, r4
 8001ecc:	eb45 0303 	adc.w	r3, r5, r3
 8001ed0:	f04f 0000 	mov.w	r0, #0
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	00d9      	lsls	r1, r3, #3
 8001eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ede:	00d0      	lsls	r0, r2, #3
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	1911      	adds	r1, r2, r4
 8001ee6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ee8:	416b      	adcs	r3, r5
 8001eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	1891      	adds	r1, r2, r2
 8001ef8:	62b9      	str	r1, [r7, #40]	; 0x28
 8001efa:	415b      	adcs	r3, r3
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f06:	f7fe f9db 	bl	80002c0 <__aeabi_uldivmod>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <UART_SetConfig+0x38c>)
 8001f10:	fba3 1302 	umull	r1, r3, r3, r2
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	2164      	movs	r1, #100	; 0x64
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	3332      	adds	r3, #50	; 0x32
 8001f22:	4a87      	ldr	r2, [pc, #540]	; (8002140 <UART_SetConfig+0x38c>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f30:	441e      	add	r6, r3
 8001f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f34:	4618      	mov	r0, r3
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	1894      	adds	r4, r2, r2
 8001f40:	623c      	str	r4, [r7, #32]
 8001f42:	415b      	adcs	r3, r3
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f4a:	1812      	adds	r2, r2, r0
 8001f4c:	eb41 0303 	adc.w	r3, r1, r3
 8001f50:	f04f 0400 	mov.w	r4, #0
 8001f54:	f04f 0500 	mov.w	r5, #0
 8001f58:	00dd      	lsls	r5, r3, #3
 8001f5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f5e:	00d4      	lsls	r4, r2, #3
 8001f60:	4622      	mov	r2, r4
 8001f62:	462b      	mov	r3, r5
 8001f64:	1814      	adds	r4, r2, r0
 8001f66:	653c      	str	r4, [r7, #80]	; 0x50
 8001f68:	414b      	adcs	r3, r1
 8001f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	1891      	adds	r1, r2, r2
 8001f78:	61b9      	str	r1, [r7, #24]
 8001f7a:	415b      	adcs	r3, r3
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f86:	f7fe f99b 	bl	80002c0 <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <UART_SetConfig+0x38c>)
 8001f90:	fba3 1302 	umull	r1, r3, r3, r2
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	3332      	adds	r3, #50	; 0x32
 8001fa2:	4a67      	ldr	r2, [pc, #412]	; (8002140 <UART_SetConfig+0x38c>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	f003 0207 	and.w	r2, r3, #7
 8001fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4432      	add	r2, r6
 8001fb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fb6:	e0b9      	b.n	800212c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fba:	461c      	mov	r4, r3
 8001fbc:	f04f 0500 	mov.w	r5, #0
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	1891      	adds	r1, r2, r2
 8001fc6:	6139      	str	r1, [r7, #16]
 8001fc8:	415b      	adcs	r3, r3
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd0:	1912      	adds	r2, r2, r4
 8001fd2:	eb45 0303 	adc.w	r3, r5, r3
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	00d9      	lsls	r1, r3, #3
 8001fe0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fe4:	00d0      	lsls	r0, r2, #3
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	eb12 0804 	adds.w	r8, r2, r4
 8001fee:	eb43 0905 	adc.w	r9, r3, r5
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	008b      	lsls	r3, r1, #2
 8002006:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800200a:	0082      	lsls	r2, r0, #2
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f956 	bl	80002c0 <__aeabi_uldivmod>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <UART_SetConfig+0x38c>)
 800201a:	fba3 2302 	umull	r2, r3, r3, r2
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	011e      	lsls	r6, r3, #4
 8002022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002024:	4618      	mov	r0, r3
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	1894      	adds	r4, r2, r2
 8002030:	60bc      	str	r4, [r7, #8]
 8002032:	415b      	adcs	r3, r3
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800203a:	1812      	adds	r2, r2, r0
 800203c:	eb41 0303 	adc.w	r3, r1, r3
 8002040:	f04f 0400 	mov.w	r4, #0
 8002044:	f04f 0500 	mov.w	r5, #0
 8002048:	00dd      	lsls	r5, r3, #3
 800204a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800204e:	00d4      	lsls	r4, r2, #3
 8002050:	4622      	mov	r2, r4
 8002052:	462b      	mov	r3, r5
 8002054:	1814      	adds	r4, r2, r0
 8002056:	64bc      	str	r4, [r7, #72]	; 0x48
 8002058:	414b      	adcs	r3, r1
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800205c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	008b      	lsls	r3, r1, #2
 8002070:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002074:	0082      	lsls	r2, r0, #2
 8002076:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800207a:	f7fe f921 	bl	80002c0 <__aeabi_uldivmod>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <UART_SetConfig+0x38c>)
 8002084:	fba3 1302 	umull	r1, r3, r3, r2
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	2164      	movs	r1, #100	; 0x64
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	3332      	adds	r3, #50	; 0x32
 8002096:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <UART_SetConfig+0x38c>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a2:	441e      	add	r6, r3
 80020a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a6:	4618      	mov	r0, r3
 80020a8:	f04f 0100 	mov.w	r1, #0
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	1894      	adds	r4, r2, r2
 80020b2:	603c      	str	r4, [r7, #0]
 80020b4:	415b      	adcs	r3, r3
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020bc:	1812      	adds	r2, r2, r0
 80020be:	eb41 0303 	adc.w	r3, r1, r3
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	f04f 0500 	mov.w	r5, #0
 80020ca:	00dd      	lsls	r5, r3, #3
 80020cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020d0:	00d4      	lsls	r4, r2, #3
 80020d2:	4622      	mov	r2, r4
 80020d4:	462b      	mov	r3, r5
 80020d6:	eb12 0a00 	adds.w	sl, r2, r0
 80020da:	eb43 0b01 	adc.w	fp, r3, r1
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	008b      	lsls	r3, r1, #2
 80020f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020f6:	0082      	lsls	r2, r0, #2
 80020f8:	4650      	mov	r0, sl
 80020fa:	4659      	mov	r1, fp
 80020fc:	f7fe f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <UART_SetConfig+0x38c>)
 8002106:	fba3 1302 	umull	r1, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2164      	movs	r1, #100	; 0x64
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	3332      	adds	r3, #50	; 0x32
 8002118:	4a09      	ldr	r2, [pc, #36]	; (8002140 <UART_SetConfig+0x38c>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4432      	add	r2, r6
 800212a:	609a      	str	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	377c      	adds	r7, #124	; 0x7c
 8002130:	46bd      	mov	sp, r7
 8002132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002136:	bf00      	nop
 8002138:	40011000 	.word	0x40011000
 800213c:	40011400 	.word	0x40011400
 8002140:	51eb851f 	.word	0x51eb851f

08002144 <__errno>:
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <__errno+0x8>)
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000030 	.word	0x20000030

08002150 <__libc_init_array>:
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	4d0d      	ldr	r5, [pc, #52]	; (8002188 <__libc_init_array+0x38>)
 8002154:	4c0d      	ldr	r4, [pc, #52]	; (800218c <__libc_init_array+0x3c>)
 8002156:	1b64      	subs	r4, r4, r5
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	2600      	movs	r6, #0
 800215c:	42a6      	cmp	r6, r4
 800215e:	d109      	bne.n	8002174 <__libc_init_array+0x24>
 8002160:	4d0b      	ldr	r5, [pc, #44]	; (8002190 <__libc_init_array+0x40>)
 8002162:	4c0c      	ldr	r4, [pc, #48]	; (8002194 <__libc_init_array+0x44>)
 8002164:	f000 fc4e 	bl	8002a04 <_init>
 8002168:	1b64      	subs	r4, r4, r5
 800216a:	10a4      	asrs	r4, r4, #2
 800216c:	2600      	movs	r6, #0
 800216e:	42a6      	cmp	r6, r4
 8002170:	d105      	bne.n	800217e <__libc_init_array+0x2e>
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	f855 3b04 	ldr.w	r3, [r5], #4
 8002178:	4798      	blx	r3
 800217a:	3601      	adds	r6, #1
 800217c:	e7ee      	b.n	800215c <__libc_init_array+0xc>
 800217e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002182:	4798      	blx	r3
 8002184:	3601      	adds	r6, #1
 8002186:	e7f2      	b.n	800216e <__libc_init_array+0x1e>
 8002188:	08002a80 	.word	0x08002a80
 800218c:	08002a80 	.word	0x08002a80
 8002190:	08002a80 	.word	0x08002a80
 8002194:	08002a84 	.word	0x08002a84

08002198 <memset>:
 8002198:	4402      	add	r2, r0
 800219a:	4603      	mov	r3, r0
 800219c:	4293      	cmp	r3, r2
 800219e:	d100      	bne.n	80021a2 <memset+0xa>
 80021a0:	4770      	bx	lr
 80021a2:	f803 1b01 	strb.w	r1, [r3], #1
 80021a6:	e7f9      	b.n	800219c <memset+0x4>

080021a8 <siprintf>:
 80021a8:	b40e      	push	{r1, r2, r3}
 80021aa:	b500      	push	{lr}
 80021ac:	b09c      	sub	sp, #112	; 0x70
 80021ae:	ab1d      	add	r3, sp, #116	; 0x74
 80021b0:	9002      	str	r0, [sp, #8]
 80021b2:	9006      	str	r0, [sp, #24]
 80021b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <siprintf+0x38>)
 80021ba:	9107      	str	r1, [sp, #28]
 80021bc:	9104      	str	r1, [sp, #16]
 80021be:	4909      	ldr	r1, [pc, #36]	; (80021e4 <siprintf+0x3c>)
 80021c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80021c4:	9105      	str	r1, [sp, #20]
 80021c6:	6800      	ldr	r0, [r0, #0]
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	a902      	add	r1, sp, #8
 80021cc:	f000 f868 	bl	80022a0 <_svfiprintf_r>
 80021d0:	9b02      	ldr	r3, [sp, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	b01c      	add	sp, #112	; 0x70
 80021d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021dc:	b003      	add	sp, #12
 80021de:	4770      	bx	lr
 80021e0:	20000030 	.word	0x20000030
 80021e4:	ffff0208 	.word	0xffff0208

080021e8 <__ssputs_r>:
 80021e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021ec:	688e      	ldr	r6, [r1, #8]
 80021ee:	429e      	cmp	r6, r3
 80021f0:	4682      	mov	sl, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	4690      	mov	r8, r2
 80021f6:	461f      	mov	r7, r3
 80021f8:	d838      	bhi.n	800226c <__ssputs_r+0x84>
 80021fa:	898a      	ldrh	r2, [r1, #12]
 80021fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002200:	d032      	beq.n	8002268 <__ssputs_r+0x80>
 8002202:	6825      	ldr	r5, [r4, #0]
 8002204:	6909      	ldr	r1, [r1, #16]
 8002206:	eba5 0901 	sub.w	r9, r5, r1
 800220a:	6965      	ldr	r5, [r4, #20]
 800220c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002214:	3301      	adds	r3, #1
 8002216:	444b      	add	r3, r9
 8002218:	106d      	asrs	r5, r5, #1
 800221a:	429d      	cmp	r5, r3
 800221c:	bf38      	it	cc
 800221e:	461d      	movcc	r5, r3
 8002220:	0553      	lsls	r3, r2, #21
 8002222:	d531      	bpl.n	8002288 <__ssputs_r+0xa0>
 8002224:	4629      	mov	r1, r5
 8002226:	f000 fb47 	bl	80028b8 <_malloc_r>
 800222a:	4606      	mov	r6, r0
 800222c:	b950      	cbnz	r0, 8002244 <__ssputs_r+0x5c>
 800222e:	230c      	movs	r3, #12
 8002230:	f8ca 3000 	str.w	r3, [sl]
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002244:	6921      	ldr	r1, [r4, #16]
 8002246:	464a      	mov	r2, r9
 8002248:	f000 fabe 	bl	80027c8 <memcpy>
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002256:	81a3      	strh	r3, [r4, #12]
 8002258:	6126      	str	r6, [r4, #16]
 800225a:	6165      	str	r5, [r4, #20]
 800225c:	444e      	add	r6, r9
 800225e:	eba5 0509 	sub.w	r5, r5, r9
 8002262:	6026      	str	r6, [r4, #0]
 8002264:	60a5      	str	r5, [r4, #8]
 8002266:	463e      	mov	r6, r7
 8002268:	42be      	cmp	r6, r7
 800226a:	d900      	bls.n	800226e <__ssputs_r+0x86>
 800226c:	463e      	mov	r6, r7
 800226e:	4632      	mov	r2, r6
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	4641      	mov	r1, r8
 8002274:	f000 fab6 	bl	80027e4 <memmove>
 8002278:	68a3      	ldr	r3, [r4, #8]
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	1b9b      	subs	r3, r3, r6
 800227e:	4432      	add	r2, r6
 8002280:	60a3      	str	r3, [r4, #8]
 8002282:	6022      	str	r2, [r4, #0]
 8002284:	2000      	movs	r0, #0
 8002286:	e7db      	b.n	8002240 <__ssputs_r+0x58>
 8002288:	462a      	mov	r2, r5
 800228a:	f000 fb6f 	bl	800296c <_realloc_r>
 800228e:	4606      	mov	r6, r0
 8002290:	2800      	cmp	r0, #0
 8002292:	d1e1      	bne.n	8002258 <__ssputs_r+0x70>
 8002294:	6921      	ldr	r1, [r4, #16]
 8002296:	4650      	mov	r0, sl
 8002298:	f000 fabe 	bl	8002818 <_free_r>
 800229c:	e7c7      	b.n	800222e <__ssputs_r+0x46>
	...

080022a0 <_svfiprintf_r>:
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a4:	4698      	mov	r8, r3
 80022a6:	898b      	ldrh	r3, [r1, #12]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	b09d      	sub	sp, #116	; 0x74
 80022ac:	4607      	mov	r7, r0
 80022ae:	460d      	mov	r5, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	d50e      	bpl.n	80022d2 <_svfiprintf_r+0x32>
 80022b4:	690b      	ldr	r3, [r1, #16]
 80022b6:	b963      	cbnz	r3, 80022d2 <_svfiprintf_r+0x32>
 80022b8:	2140      	movs	r1, #64	; 0x40
 80022ba:	f000 fafd 	bl	80028b8 <_malloc_r>
 80022be:	6028      	str	r0, [r5, #0]
 80022c0:	6128      	str	r0, [r5, #16]
 80022c2:	b920      	cbnz	r0, 80022ce <_svfiprintf_r+0x2e>
 80022c4:	230c      	movs	r3, #12
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	e0d1      	b.n	8002472 <_svfiprintf_r+0x1d2>
 80022ce:	2340      	movs	r3, #64	; 0x40
 80022d0:	616b      	str	r3, [r5, #20]
 80022d2:	2300      	movs	r3, #0
 80022d4:	9309      	str	r3, [sp, #36]	; 0x24
 80022d6:	2320      	movs	r3, #32
 80022d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80022e0:	2330      	movs	r3, #48	; 0x30
 80022e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800248c <_svfiprintf_r+0x1ec>
 80022e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022ea:	f04f 0901 	mov.w	r9, #1
 80022ee:	4623      	mov	r3, r4
 80022f0:	469a      	mov	sl, r3
 80022f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022f6:	b10a      	cbz	r2, 80022fc <_svfiprintf_r+0x5c>
 80022f8:	2a25      	cmp	r2, #37	; 0x25
 80022fa:	d1f9      	bne.n	80022f0 <_svfiprintf_r+0x50>
 80022fc:	ebba 0b04 	subs.w	fp, sl, r4
 8002300:	d00b      	beq.n	800231a <_svfiprintf_r+0x7a>
 8002302:	465b      	mov	r3, fp
 8002304:	4622      	mov	r2, r4
 8002306:	4629      	mov	r1, r5
 8002308:	4638      	mov	r0, r7
 800230a:	f7ff ff6d 	bl	80021e8 <__ssputs_r>
 800230e:	3001      	adds	r0, #1
 8002310:	f000 80aa 	beq.w	8002468 <_svfiprintf_r+0x1c8>
 8002314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002316:	445a      	add	r2, fp
 8002318:	9209      	str	r2, [sp, #36]	; 0x24
 800231a:	f89a 3000 	ldrb.w	r3, [sl]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80a2 	beq.w	8002468 <_svfiprintf_r+0x1c8>
 8002324:	2300      	movs	r3, #0
 8002326:	f04f 32ff 	mov.w	r2, #4294967295
 800232a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800232e:	f10a 0a01 	add.w	sl, sl, #1
 8002332:	9304      	str	r3, [sp, #16]
 8002334:	9307      	str	r3, [sp, #28]
 8002336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800233a:	931a      	str	r3, [sp, #104]	; 0x68
 800233c:	4654      	mov	r4, sl
 800233e:	2205      	movs	r2, #5
 8002340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002344:	4851      	ldr	r0, [pc, #324]	; (800248c <_svfiprintf_r+0x1ec>)
 8002346:	f7fd ff6b 	bl	8000220 <memchr>
 800234a:	9a04      	ldr	r2, [sp, #16]
 800234c:	b9d8      	cbnz	r0, 8002386 <_svfiprintf_r+0xe6>
 800234e:	06d0      	lsls	r0, r2, #27
 8002350:	bf44      	itt	mi
 8002352:	2320      	movmi	r3, #32
 8002354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002358:	0711      	lsls	r1, r2, #28
 800235a:	bf44      	itt	mi
 800235c:	232b      	movmi	r3, #43	; 0x2b
 800235e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002362:	f89a 3000 	ldrb.w	r3, [sl]
 8002366:	2b2a      	cmp	r3, #42	; 0x2a
 8002368:	d015      	beq.n	8002396 <_svfiprintf_r+0xf6>
 800236a:	9a07      	ldr	r2, [sp, #28]
 800236c:	4654      	mov	r4, sl
 800236e:	2000      	movs	r0, #0
 8002370:	f04f 0c0a 	mov.w	ip, #10
 8002374:	4621      	mov	r1, r4
 8002376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800237a:	3b30      	subs	r3, #48	; 0x30
 800237c:	2b09      	cmp	r3, #9
 800237e:	d94e      	bls.n	800241e <_svfiprintf_r+0x17e>
 8002380:	b1b0      	cbz	r0, 80023b0 <_svfiprintf_r+0x110>
 8002382:	9207      	str	r2, [sp, #28]
 8002384:	e014      	b.n	80023b0 <_svfiprintf_r+0x110>
 8002386:	eba0 0308 	sub.w	r3, r0, r8
 800238a:	fa09 f303 	lsl.w	r3, r9, r3
 800238e:	4313      	orrs	r3, r2
 8002390:	9304      	str	r3, [sp, #16]
 8002392:	46a2      	mov	sl, r4
 8002394:	e7d2      	b.n	800233c <_svfiprintf_r+0x9c>
 8002396:	9b03      	ldr	r3, [sp, #12]
 8002398:	1d19      	adds	r1, r3, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	9103      	str	r1, [sp, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bfbb      	ittet	lt
 80023a2:	425b      	neglt	r3, r3
 80023a4:	f042 0202 	orrlt.w	r2, r2, #2
 80023a8:	9307      	strge	r3, [sp, #28]
 80023aa:	9307      	strlt	r3, [sp, #28]
 80023ac:	bfb8      	it	lt
 80023ae:	9204      	strlt	r2, [sp, #16]
 80023b0:	7823      	ldrb	r3, [r4, #0]
 80023b2:	2b2e      	cmp	r3, #46	; 0x2e
 80023b4:	d10c      	bne.n	80023d0 <_svfiprintf_r+0x130>
 80023b6:	7863      	ldrb	r3, [r4, #1]
 80023b8:	2b2a      	cmp	r3, #42	; 0x2a
 80023ba:	d135      	bne.n	8002428 <_svfiprintf_r+0x188>
 80023bc:	9b03      	ldr	r3, [sp, #12]
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	9203      	str	r2, [sp, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bfb8      	it	lt
 80023c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80023cc:	3402      	adds	r4, #2
 80023ce:	9305      	str	r3, [sp, #20]
 80023d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800249c <_svfiprintf_r+0x1fc>
 80023d4:	7821      	ldrb	r1, [r4, #0]
 80023d6:	2203      	movs	r2, #3
 80023d8:	4650      	mov	r0, sl
 80023da:	f7fd ff21 	bl	8000220 <memchr>
 80023de:	b140      	cbz	r0, 80023f2 <_svfiprintf_r+0x152>
 80023e0:	2340      	movs	r3, #64	; 0x40
 80023e2:	eba0 000a 	sub.w	r0, r0, sl
 80023e6:	fa03 f000 	lsl.w	r0, r3, r0
 80023ea:	9b04      	ldr	r3, [sp, #16]
 80023ec:	4303      	orrs	r3, r0
 80023ee:	3401      	adds	r4, #1
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f6:	4826      	ldr	r0, [pc, #152]	; (8002490 <_svfiprintf_r+0x1f0>)
 80023f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023fc:	2206      	movs	r2, #6
 80023fe:	f7fd ff0f 	bl	8000220 <memchr>
 8002402:	2800      	cmp	r0, #0
 8002404:	d038      	beq.n	8002478 <_svfiprintf_r+0x1d8>
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <_svfiprintf_r+0x1f4>)
 8002408:	bb1b      	cbnz	r3, 8002452 <_svfiprintf_r+0x1b2>
 800240a:	9b03      	ldr	r3, [sp, #12]
 800240c:	3307      	adds	r3, #7
 800240e:	f023 0307 	bic.w	r3, r3, #7
 8002412:	3308      	adds	r3, #8
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002418:	4433      	add	r3, r6
 800241a:	9309      	str	r3, [sp, #36]	; 0x24
 800241c:	e767      	b.n	80022ee <_svfiprintf_r+0x4e>
 800241e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002422:	460c      	mov	r4, r1
 8002424:	2001      	movs	r0, #1
 8002426:	e7a5      	b.n	8002374 <_svfiprintf_r+0xd4>
 8002428:	2300      	movs	r3, #0
 800242a:	3401      	adds	r4, #1
 800242c:	9305      	str	r3, [sp, #20]
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0c0a 	mov.w	ip, #10
 8002434:	4620      	mov	r0, r4
 8002436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800243a:	3a30      	subs	r2, #48	; 0x30
 800243c:	2a09      	cmp	r2, #9
 800243e:	d903      	bls.n	8002448 <_svfiprintf_r+0x1a8>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0c5      	beq.n	80023d0 <_svfiprintf_r+0x130>
 8002444:	9105      	str	r1, [sp, #20]
 8002446:	e7c3      	b.n	80023d0 <_svfiprintf_r+0x130>
 8002448:	fb0c 2101 	mla	r1, ip, r1, r2
 800244c:	4604      	mov	r4, r0
 800244e:	2301      	movs	r3, #1
 8002450:	e7f0      	b.n	8002434 <_svfiprintf_r+0x194>
 8002452:	ab03      	add	r3, sp, #12
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	462a      	mov	r2, r5
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <_svfiprintf_r+0x1f8>)
 800245a:	a904      	add	r1, sp, #16
 800245c:	4638      	mov	r0, r7
 800245e:	f3af 8000 	nop.w
 8002462:	1c42      	adds	r2, r0, #1
 8002464:	4606      	mov	r6, r0
 8002466:	d1d6      	bne.n	8002416 <_svfiprintf_r+0x176>
 8002468:	89ab      	ldrh	r3, [r5, #12]
 800246a:	065b      	lsls	r3, r3, #25
 800246c:	f53f af2c 	bmi.w	80022c8 <_svfiprintf_r+0x28>
 8002470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002472:	b01d      	add	sp, #116	; 0x74
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002478:	ab03      	add	r3, sp, #12
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	462a      	mov	r2, r5
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <_svfiprintf_r+0x1f8>)
 8002480:	a904      	add	r1, sp, #16
 8002482:	4638      	mov	r0, r7
 8002484:	f000 f87a 	bl	800257c <_printf_i>
 8002488:	e7eb      	b.n	8002462 <_svfiprintf_r+0x1c2>
 800248a:	bf00      	nop
 800248c:	08002a44 	.word	0x08002a44
 8002490:	08002a4e 	.word	0x08002a4e
 8002494:	00000000 	.word	0x00000000
 8002498:	080021e9 	.word	0x080021e9
 800249c:	08002a4a 	.word	0x08002a4a

080024a0 <_printf_common>:
 80024a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a4:	4616      	mov	r6, r2
 80024a6:	4699      	mov	r9, r3
 80024a8:	688a      	ldr	r2, [r1, #8]
 80024aa:	690b      	ldr	r3, [r1, #16]
 80024ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024b0:	4293      	cmp	r3, r2
 80024b2:	bfb8      	it	lt
 80024b4:	4613      	movlt	r3, r2
 80024b6:	6033      	str	r3, [r6, #0]
 80024b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024bc:	4607      	mov	r7, r0
 80024be:	460c      	mov	r4, r1
 80024c0:	b10a      	cbz	r2, 80024c6 <_printf_common+0x26>
 80024c2:	3301      	adds	r3, #1
 80024c4:	6033      	str	r3, [r6, #0]
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	0699      	lsls	r1, r3, #26
 80024ca:	bf42      	ittt	mi
 80024cc:	6833      	ldrmi	r3, [r6, #0]
 80024ce:	3302      	addmi	r3, #2
 80024d0:	6033      	strmi	r3, [r6, #0]
 80024d2:	6825      	ldr	r5, [r4, #0]
 80024d4:	f015 0506 	ands.w	r5, r5, #6
 80024d8:	d106      	bne.n	80024e8 <_printf_common+0x48>
 80024da:	f104 0a19 	add.w	sl, r4, #25
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	6832      	ldr	r2, [r6, #0]
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	42ab      	cmp	r3, r5
 80024e6:	dc26      	bgt.n	8002536 <_printf_common+0x96>
 80024e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024ec:	1e13      	subs	r3, r2, #0
 80024ee:	6822      	ldr	r2, [r4, #0]
 80024f0:	bf18      	it	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	0692      	lsls	r2, r2, #26
 80024f6:	d42b      	bmi.n	8002550 <_printf_common+0xb0>
 80024f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024fc:	4649      	mov	r1, r9
 80024fe:	4638      	mov	r0, r7
 8002500:	47c0      	blx	r8
 8002502:	3001      	adds	r0, #1
 8002504:	d01e      	beq.n	8002544 <_printf_common+0xa4>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	68e5      	ldr	r5, [r4, #12]
 800250a:	6832      	ldr	r2, [r6, #0]
 800250c:	f003 0306 	and.w	r3, r3, #6
 8002510:	2b04      	cmp	r3, #4
 8002512:	bf08      	it	eq
 8002514:	1aad      	subeq	r5, r5, r2
 8002516:	68a3      	ldr	r3, [r4, #8]
 8002518:	6922      	ldr	r2, [r4, #16]
 800251a:	bf0c      	ite	eq
 800251c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002520:	2500      	movne	r5, #0
 8002522:	4293      	cmp	r3, r2
 8002524:	bfc4      	itt	gt
 8002526:	1a9b      	subgt	r3, r3, r2
 8002528:	18ed      	addgt	r5, r5, r3
 800252a:	2600      	movs	r6, #0
 800252c:	341a      	adds	r4, #26
 800252e:	42b5      	cmp	r5, r6
 8002530:	d11a      	bne.n	8002568 <_printf_common+0xc8>
 8002532:	2000      	movs	r0, #0
 8002534:	e008      	b.n	8002548 <_printf_common+0xa8>
 8002536:	2301      	movs	r3, #1
 8002538:	4652      	mov	r2, sl
 800253a:	4649      	mov	r1, r9
 800253c:	4638      	mov	r0, r7
 800253e:	47c0      	blx	r8
 8002540:	3001      	adds	r0, #1
 8002542:	d103      	bne.n	800254c <_printf_common+0xac>
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800254c:	3501      	adds	r5, #1
 800254e:	e7c6      	b.n	80024de <_printf_common+0x3e>
 8002550:	18e1      	adds	r1, r4, r3
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	2030      	movs	r0, #48	; 0x30
 8002556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800255a:	4422      	add	r2, r4
 800255c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002564:	3302      	adds	r3, #2
 8002566:	e7c7      	b.n	80024f8 <_printf_common+0x58>
 8002568:	2301      	movs	r3, #1
 800256a:	4622      	mov	r2, r4
 800256c:	4649      	mov	r1, r9
 800256e:	4638      	mov	r0, r7
 8002570:	47c0      	blx	r8
 8002572:	3001      	adds	r0, #1
 8002574:	d0e6      	beq.n	8002544 <_printf_common+0xa4>
 8002576:	3601      	adds	r6, #1
 8002578:	e7d9      	b.n	800252e <_printf_common+0x8e>
	...

0800257c <_printf_i>:
 800257c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002580:	460c      	mov	r4, r1
 8002582:	4691      	mov	r9, r2
 8002584:	7e27      	ldrb	r7, [r4, #24]
 8002586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002588:	2f78      	cmp	r7, #120	; 0x78
 800258a:	4680      	mov	r8, r0
 800258c:	469a      	mov	sl, r3
 800258e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002592:	d807      	bhi.n	80025a4 <_printf_i+0x28>
 8002594:	2f62      	cmp	r7, #98	; 0x62
 8002596:	d80a      	bhi.n	80025ae <_printf_i+0x32>
 8002598:	2f00      	cmp	r7, #0
 800259a:	f000 80d8 	beq.w	800274e <_printf_i+0x1d2>
 800259e:	2f58      	cmp	r7, #88	; 0x58
 80025a0:	f000 80a3 	beq.w	80026ea <_printf_i+0x16e>
 80025a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025ac:	e03a      	b.n	8002624 <_printf_i+0xa8>
 80025ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025b2:	2b15      	cmp	r3, #21
 80025b4:	d8f6      	bhi.n	80025a4 <_printf_i+0x28>
 80025b6:	a001      	add	r0, pc, #4	; (adr r0, 80025bc <_printf_i+0x40>)
 80025b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025bc:	08002615 	.word	0x08002615
 80025c0:	08002629 	.word	0x08002629
 80025c4:	080025a5 	.word	0x080025a5
 80025c8:	080025a5 	.word	0x080025a5
 80025cc:	080025a5 	.word	0x080025a5
 80025d0:	080025a5 	.word	0x080025a5
 80025d4:	08002629 	.word	0x08002629
 80025d8:	080025a5 	.word	0x080025a5
 80025dc:	080025a5 	.word	0x080025a5
 80025e0:	080025a5 	.word	0x080025a5
 80025e4:	080025a5 	.word	0x080025a5
 80025e8:	08002735 	.word	0x08002735
 80025ec:	08002659 	.word	0x08002659
 80025f0:	08002717 	.word	0x08002717
 80025f4:	080025a5 	.word	0x080025a5
 80025f8:	080025a5 	.word	0x080025a5
 80025fc:	08002757 	.word	0x08002757
 8002600:	080025a5 	.word	0x080025a5
 8002604:	08002659 	.word	0x08002659
 8002608:	080025a5 	.word	0x080025a5
 800260c:	080025a5 	.word	0x080025a5
 8002610:	0800271f 	.word	0x0800271f
 8002614:	680b      	ldr	r3, [r1, #0]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	600a      	str	r2, [r1, #0]
 800261c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002624:	2301      	movs	r3, #1
 8002626:	e0a3      	b.n	8002770 <_printf_i+0x1f4>
 8002628:	6825      	ldr	r5, [r4, #0]
 800262a:	6808      	ldr	r0, [r1, #0]
 800262c:	062e      	lsls	r6, r5, #24
 800262e:	f100 0304 	add.w	r3, r0, #4
 8002632:	d50a      	bpl.n	800264a <_printf_i+0xce>
 8002634:	6805      	ldr	r5, [r0, #0]
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	2d00      	cmp	r5, #0
 800263a:	da03      	bge.n	8002644 <_printf_i+0xc8>
 800263c:	232d      	movs	r3, #45	; 0x2d
 800263e:	426d      	negs	r5, r5
 8002640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002644:	485e      	ldr	r0, [pc, #376]	; (80027c0 <_printf_i+0x244>)
 8002646:	230a      	movs	r3, #10
 8002648:	e019      	b.n	800267e <_printf_i+0x102>
 800264a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800264e:	6805      	ldr	r5, [r0, #0]
 8002650:	600b      	str	r3, [r1, #0]
 8002652:	bf18      	it	ne
 8002654:	b22d      	sxthne	r5, r5
 8002656:	e7ef      	b.n	8002638 <_printf_i+0xbc>
 8002658:	680b      	ldr	r3, [r1, #0]
 800265a:	6825      	ldr	r5, [r4, #0]
 800265c:	1d18      	adds	r0, r3, #4
 800265e:	6008      	str	r0, [r1, #0]
 8002660:	0628      	lsls	r0, r5, #24
 8002662:	d501      	bpl.n	8002668 <_printf_i+0xec>
 8002664:	681d      	ldr	r5, [r3, #0]
 8002666:	e002      	b.n	800266e <_printf_i+0xf2>
 8002668:	0669      	lsls	r1, r5, #25
 800266a:	d5fb      	bpl.n	8002664 <_printf_i+0xe8>
 800266c:	881d      	ldrh	r5, [r3, #0]
 800266e:	4854      	ldr	r0, [pc, #336]	; (80027c0 <_printf_i+0x244>)
 8002670:	2f6f      	cmp	r7, #111	; 0x6f
 8002672:	bf0c      	ite	eq
 8002674:	2308      	moveq	r3, #8
 8002676:	230a      	movne	r3, #10
 8002678:	2100      	movs	r1, #0
 800267a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800267e:	6866      	ldr	r6, [r4, #4]
 8002680:	60a6      	str	r6, [r4, #8]
 8002682:	2e00      	cmp	r6, #0
 8002684:	bfa2      	ittt	ge
 8002686:	6821      	ldrge	r1, [r4, #0]
 8002688:	f021 0104 	bicge.w	r1, r1, #4
 800268c:	6021      	strge	r1, [r4, #0]
 800268e:	b90d      	cbnz	r5, 8002694 <_printf_i+0x118>
 8002690:	2e00      	cmp	r6, #0
 8002692:	d04d      	beq.n	8002730 <_printf_i+0x1b4>
 8002694:	4616      	mov	r6, r2
 8002696:	fbb5 f1f3 	udiv	r1, r5, r3
 800269a:	fb03 5711 	mls	r7, r3, r1, r5
 800269e:	5dc7      	ldrb	r7, [r0, r7]
 80026a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026a4:	462f      	mov	r7, r5
 80026a6:	42bb      	cmp	r3, r7
 80026a8:	460d      	mov	r5, r1
 80026aa:	d9f4      	bls.n	8002696 <_printf_i+0x11a>
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d10b      	bne.n	80026c8 <_printf_i+0x14c>
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	07df      	lsls	r7, r3, #31
 80026b4:	d508      	bpl.n	80026c8 <_printf_i+0x14c>
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	6861      	ldr	r1, [r4, #4]
 80026ba:	4299      	cmp	r1, r3
 80026bc:	bfde      	ittt	le
 80026be:	2330      	movle	r3, #48	; 0x30
 80026c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026c8:	1b92      	subs	r2, r2, r6
 80026ca:	6122      	str	r2, [r4, #16]
 80026cc:	f8cd a000 	str.w	sl, [sp]
 80026d0:	464b      	mov	r3, r9
 80026d2:	aa03      	add	r2, sp, #12
 80026d4:	4621      	mov	r1, r4
 80026d6:	4640      	mov	r0, r8
 80026d8:	f7ff fee2 	bl	80024a0 <_printf_common>
 80026dc:	3001      	adds	r0, #1
 80026de:	d14c      	bne.n	800277a <_printf_i+0x1fe>
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	b004      	add	sp, #16
 80026e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ea:	4835      	ldr	r0, [pc, #212]	; (80027c0 <_printf_i+0x244>)
 80026ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	680e      	ldr	r6, [r1, #0]
 80026f4:	061f      	lsls	r7, r3, #24
 80026f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80026fa:	600e      	str	r6, [r1, #0]
 80026fc:	d514      	bpl.n	8002728 <_printf_i+0x1ac>
 80026fe:	07d9      	lsls	r1, r3, #31
 8002700:	bf44      	itt	mi
 8002702:	f043 0320 	orrmi.w	r3, r3, #32
 8002706:	6023      	strmi	r3, [r4, #0]
 8002708:	b91d      	cbnz	r5, 8002712 <_printf_i+0x196>
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	f023 0320 	bic.w	r3, r3, #32
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	2310      	movs	r3, #16
 8002714:	e7b0      	b.n	8002678 <_printf_i+0xfc>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	6023      	str	r3, [r4, #0]
 800271e:	2378      	movs	r3, #120	; 0x78
 8002720:	4828      	ldr	r0, [pc, #160]	; (80027c4 <_printf_i+0x248>)
 8002722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002726:	e7e3      	b.n	80026f0 <_printf_i+0x174>
 8002728:	065e      	lsls	r6, r3, #25
 800272a:	bf48      	it	mi
 800272c:	b2ad      	uxthmi	r5, r5
 800272e:	e7e6      	b.n	80026fe <_printf_i+0x182>
 8002730:	4616      	mov	r6, r2
 8002732:	e7bb      	b.n	80026ac <_printf_i+0x130>
 8002734:	680b      	ldr	r3, [r1, #0]
 8002736:	6826      	ldr	r6, [r4, #0]
 8002738:	6960      	ldr	r0, [r4, #20]
 800273a:	1d1d      	adds	r5, r3, #4
 800273c:	600d      	str	r5, [r1, #0]
 800273e:	0635      	lsls	r5, r6, #24
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	d501      	bpl.n	8002748 <_printf_i+0x1cc>
 8002744:	6018      	str	r0, [r3, #0]
 8002746:	e002      	b.n	800274e <_printf_i+0x1d2>
 8002748:	0671      	lsls	r1, r6, #25
 800274a:	d5fb      	bpl.n	8002744 <_printf_i+0x1c8>
 800274c:	8018      	strh	r0, [r3, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	6123      	str	r3, [r4, #16]
 8002752:	4616      	mov	r6, r2
 8002754:	e7ba      	b.n	80026cc <_printf_i+0x150>
 8002756:	680b      	ldr	r3, [r1, #0]
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	600a      	str	r2, [r1, #0]
 800275c:	681e      	ldr	r6, [r3, #0]
 800275e:	6862      	ldr	r2, [r4, #4]
 8002760:	2100      	movs	r1, #0
 8002762:	4630      	mov	r0, r6
 8002764:	f7fd fd5c 	bl	8000220 <memchr>
 8002768:	b108      	cbz	r0, 800276e <_printf_i+0x1f2>
 800276a:	1b80      	subs	r0, r0, r6
 800276c:	6060      	str	r0, [r4, #4]
 800276e:	6863      	ldr	r3, [r4, #4]
 8002770:	6123      	str	r3, [r4, #16]
 8002772:	2300      	movs	r3, #0
 8002774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002778:	e7a8      	b.n	80026cc <_printf_i+0x150>
 800277a:	6923      	ldr	r3, [r4, #16]
 800277c:	4632      	mov	r2, r6
 800277e:	4649      	mov	r1, r9
 8002780:	4640      	mov	r0, r8
 8002782:	47d0      	blx	sl
 8002784:	3001      	adds	r0, #1
 8002786:	d0ab      	beq.n	80026e0 <_printf_i+0x164>
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	079b      	lsls	r3, r3, #30
 800278c:	d413      	bmi.n	80027b6 <_printf_i+0x23a>
 800278e:	68e0      	ldr	r0, [r4, #12]
 8002790:	9b03      	ldr	r3, [sp, #12]
 8002792:	4298      	cmp	r0, r3
 8002794:	bfb8      	it	lt
 8002796:	4618      	movlt	r0, r3
 8002798:	e7a4      	b.n	80026e4 <_printf_i+0x168>
 800279a:	2301      	movs	r3, #1
 800279c:	4632      	mov	r2, r6
 800279e:	4649      	mov	r1, r9
 80027a0:	4640      	mov	r0, r8
 80027a2:	47d0      	blx	sl
 80027a4:	3001      	adds	r0, #1
 80027a6:	d09b      	beq.n	80026e0 <_printf_i+0x164>
 80027a8:	3501      	adds	r5, #1
 80027aa:	68e3      	ldr	r3, [r4, #12]
 80027ac:	9903      	ldr	r1, [sp, #12]
 80027ae:	1a5b      	subs	r3, r3, r1
 80027b0:	42ab      	cmp	r3, r5
 80027b2:	dcf2      	bgt.n	800279a <_printf_i+0x21e>
 80027b4:	e7eb      	b.n	800278e <_printf_i+0x212>
 80027b6:	2500      	movs	r5, #0
 80027b8:	f104 0619 	add.w	r6, r4, #25
 80027bc:	e7f5      	b.n	80027aa <_printf_i+0x22e>
 80027be:	bf00      	nop
 80027c0:	08002a55 	.word	0x08002a55
 80027c4:	08002a66 	.word	0x08002a66

080027c8 <memcpy>:
 80027c8:	440a      	add	r2, r1
 80027ca:	4291      	cmp	r1, r2
 80027cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80027d0:	d100      	bne.n	80027d4 <memcpy+0xc>
 80027d2:	4770      	bx	lr
 80027d4:	b510      	push	{r4, lr}
 80027d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027de:	4291      	cmp	r1, r2
 80027e0:	d1f9      	bne.n	80027d6 <memcpy+0xe>
 80027e2:	bd10      	pop	{r4, pc}

080027e4 <memmove>:
 80027e4:	4288      	cmp	r0, r1
 80027e6:	b510      	push	{r4, lr}
 80027e8:	eb01 0402 	add.w	r4, r1, r2
 80027ec:	d902      	bls.n	80027f4 <memmove+0x10>
 80027ee:	4284      	cmp	r4, r0
 80027f0:	4623      	mov	r3, r4
 80027f2:	d807      	bhi.n	8002804 <memmove+0x20>
 80027f4:	1e43      	subs	r3, r0, #1
 80027f6:	42a1      	cmp	r1, r4
 80027f8:	d008      	beq.n	800280c <memmove+0x28>
 80027fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002802:	e7f8      	b.n	80027f6 <memmove+0x12>
 8002804:	4402      	add	r2, r0
 8002806:	4601      	mov	r1, r0
 8002808:	428a      	cmp	r2, r1
 800280a:	d100      	bne.n	800280e <memmove+0x2a>
 800280c:	bd10      	pop	{r4, pc}
 800280e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002816:	e7f7      	b.n	8002808 <memmove+0x24>

08002818 <_free_r>:
 8002818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800281a:	2900      	cmp	r1, #0
 800281c:	d048      	beq.n	80028b0 <_free_r+0x98>
 800281e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002822:	9001      	str	r0, [sp, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f1a1 0404 	sub.w	r4, r1, #4
 800282a:	bfb8      	it	lt
 800282c:	18e4      	addlt	r4, r4, r3
 800282e:	f000 f8d3 	bl	80029d8 <__malloc_lock>
 8002832:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <_free_r+0x9c>)
 8002834:	9801      	ldr	r0, [sp, #4]
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	4615      	mov	r5, r2
 800283a:	b933      	cbnz	r3, 800284a <_free_r+0x32>
 800283c:	6063      	str	r3, [r4, #4]
 800283e:	6014      	str	r4, [r2, #0]
 8002840:	b003      	add	sp, #12
 8002842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002846:	f000 b8cd 	b.w	80029e4 <__malloc_unlock>
 800284a:	42a3      	cmp	r3, r4
 800284c:	d90b      	bls.n	8002866 <_free_r+0x4e>
 800284e:	6821      	ldr	r1, [r4, #0]
 8002850:	1862      	adds	r2, r4, r1
 8002852:	4293      	cmp	r3, r2
 8002854:	bf04      	itt	eq
 8002856:	681a      	ldreq	r2, [r3, #0]
 8002858:	685b      	ldreq	r3, [r3, #4]
 800285a:	6063      	str	r3, [r4, #4]
 800285c:	bf04      	itt	eq
 800285e:	1852      	addeq	r2, r2, r1
 8002860:	6022      	streq	r2, [r4, #0]
 8002862:	602c      	str	r4, [r5, #0]
 8002864:	e7ec      	b.n	8002840 <_free_r+0x28>
 8002866:	461a      	mov	r2, r3
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b10b      	cbz	r3, 8002870 <_free_r+0x58>
 800286c:	42a3      	cmp	r3, r4
 800286e:	d9fa      	bls.n	8002866 <_free_r+0x4e>
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	1855      	adds	r5, r2, r1
 8002874:	42a5      	cmp	r5, r4
 8002876:	d10b      	bne.n	8002890 <_free_r+0x78>
 8002878:	6824      	ldr	r4, [r4, #0]
 800287a:	4421      	add	r1, r4
 800287c:	1854      	adds	r4, r2, r1
 800287e:	42a3      	cmp	r3, r4
 8002880:	6011      	str	r1, [r2, #0]
 8002882:	d1dd      	bne.n	8002840 <_free_r+0x28>
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	6053      	str	r3, [r2, #4]
 800288a:	4421      	add	r1, r4
 800288c:	6011      	str	r1, [r2, #0]
 800288e:	e7d7      	b.n	8002840 <_free_r+0x28>
 8002890:	d902      	bls.n	8002898 <_free_r+0x80>
 8002892:	230c      	movs	r3, #12
 8002894:	6003      	str	r3, [r0, #0]
 8002896:	e7d3      	b.n	8002840 <_free_r+0x28>
 8002898:	6825      	ldr	r5, [r4, #0]
 800289a:	1961      	adds	r1, r4, r5
 800289c:	428b      	cmp	r3, r1
 800289e:	bf04      	itt	eq
 80028a0:	6819      	ldreq	r1, [r3, #0]
 80028a2:	685b      	ldreq	r3, [r3, #4]
 80028a4:	6063      	str	r3, [r4, #4]
 80028a6:	bf04      	itt	eq
 80028a8:	1949      	addeq	r1, r1, r5
 80028aa:	6021      	streq	r1, [r4, #0]
 80028ac:	6054      	str	r4, [r2, #4]
 80028ae:	e7c7      	b.n	8002840 <_free_r+0x28>
 80028b0:	b003      	add	sp, #12
 80028b2:	bd30      	pop	{r4, r5, pc}
 80028b4:	200000b4 	.word	0x200000b4

080028b8 <_malloc_r>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	1ccd      	adds	r5, r1, #3
 80028bc:	f025 0503 	bic.w	r5, r5, #3
 80028c0:	3508      	adds	r5, #8
 80028c2:	2d0c      	cmp	r5, #12
 80028c4:	bf38      	it	cc
 80028c6:	250c      	movcc	r5, #12
 80028c8:	2d00      	cmp	r5, #0
 80028ca:	4606      	mov	r6, r0
 80028cc:	db01      	blt.n	80028d2 <_malloc_r+0x1a>
 80028ce:	42a9      	cmp	r1, r5
 80028d0:	d903      	bls.n	80028da <_malloc_r+0x22>
 80028d2:	230c      	movs	r3, #12
 80028d4:	6033      	str	r3, [r6, #0]
 80028d6:	2000      	movs	r0, #0
 80028d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028da:	f000 f87d 	bl	80029d8 <__malloc_lock>
 80028de:	4921      	ldr	r1, [pc, #132]	; (8002964 <_malloc_r+0xac>)
 80028e0:	680a      	ldr	r2, [r1, #0]
 80028e2:	4614      	mov	r4, r2
 80028e4:	b99c      	cbnz	r4, 800290e <_malloc_r+0x56>
 80028e6:	4f20      	ldr	r7, [pc, #128]	; (8002968 <_malloc_r+0xb0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b923      	cbnz	r3, 80028f6 <_malloc_r+0x3e>
 80028ec:	4621      	mov	r1, r4
 80028ee:	4630      	mov	r0, r6
 80028f0:	f000 f862 	bl	80029b8 <_sbrk_r>
 80028f4:	6038      	str	r0, [r7, #0]
 80028f6:	4629      	mov	r1, r5
 80028f8:	4630      	mov	r0, r6
 80028fa:	f000 f85d 	bl	80029b8 <_sbrk_r>
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	d123      	bne.n	800294a <_malloc_r+0x92>
 8002902:	230c      	movs	r3, #12
 8002904:	6033      	str	r3, [r6, #0]
 8002906:	4630      	mov	r0, r6
 8002908:	f000 f86c 	bl	80029e4 <__malloc_unlock>
 800290c:	e7e3      	b.n	80028d6 <_malloc_r+0x1e>
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	1b5b      	subs	r3, r3, r5
 8002912:	d417      	bmi.n	8002944 <_malloc_r+0x8c>
 8002914:	2b0b      	cmp	r3, #11
 8002916:	d903      	bls.n	8002920 <_malloc_r+0x68>
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	441c      	add	r4, r3
 800291c:	6025      	str	r5, [r4, #0]
 800291e:	e004      	b.n	800292a <_malloc_r+0x72>
 8002920:	6863      	ldr	r3, [r4, #4]
 8002922:	42a2      	cmp	r2, r4
 8002924:	bf0c      	ite	eq
 8002926:	600b      	streq	r3, [r1, #0]
 8002928:	6053      	strne	r3, [r2, #4]
 800292a:	4630      	mov	r0, r6
 800292c:	f000 f85a 	bl	80029e4 <__malloc_unlock>
 8002930:	f104 000b 	add.w	r0, r4, #11
 8002934:	1d23      	adds	r3, r4, #4
 8002936:	f020 0007 	bic.w	r0, r0, #7
 800293a:	1ac2      	subs	r2, r0, r3
 800293c:	d0cc      	beq.n	80028d8 <_malloc_r+0x20>
 800293e:	1a1b      	subs	r3, r3, r0
 8002940:	50a3      	str	r3, [r4, r2]
 8002942:	e7c9      	b.n	80028d8 <_malloc_r+0x20>
 8002944:	4622      	mov	r2, r4
 8002946:	6864      	ldr	r4, [r4, #4]
 8002948:	e7cc      	b.n	80028e4 <_malloc_r+0x2c>
 800294a:	1cc4      	adds	r4, r0, #3
 800294c:	f024 0403 	bic.w	r4, r4, #3
 8002950:	42a0      	cmp	r0, r4
 8002952:	d0e3      	beq.n	800291c <_malloc_r+0x64>
 8002954:	1a21      	subs	r1, r4, r0
 8002956:	4630      	mov	r0, r6
 8002958:	f000 f82e 	bl	80029b8 <_sbrk_r>
 800295c:	3001      	adds	r0, #1
 800295e:	d1dd      	bne.n	800291c <_malloc_r+0x64>
 8002960:	e7cf      	b.n	8002902 <_malloc_r+0x4a>
 8002962:	bf00      	nop
 8002964:	200000b4 	.word	0x200000b4
 8002968:	200000b8 	.word	0x200000b8

0800296c <_realloc_r>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	4607      	mov	r7, r0
 8002970:	4614      	mov	r4, r2
 8002972:	460e      	mov	r6, r1
 8002974:	b921      	cbnz	r1, 8002980 <_realloc_r+0x14>
 8002976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800297a:	4611      	mov	r1, r2
 800297c:	f7ff bf9c 	b.w	80028b8 <_malloc_r>
 8002980:	b922      	cbnz	r2, 800298c <_realloc_r+0x20>
 8002982:	f7ff ff49 	bl	8002818 <_free_r>
 8002986:	4625      	mov	r5, r4
 8002988:	4628      	mov	r0, r5
 800298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800298c:	f000 f830 	bl	80029f0 <_malloc_usable_size_r>
 8002990:	42a0      	cmp	r0, r4
 8002992:	d20f      	bcs.n	80029b4 <_realloc_r+0x48>
 8002994:	4621      	mov	r1, r4
 8002996:	4638      	mov	r0, r7
 8002998:	f7ff ff8e 	bl	80028b8 <_malloc_r>
 800299c:	4605      	mov	r5, r0
 800299e:	2800      	cmp	r0, #0
 80029a0:	d0f2      	beq.n	8002988 <_realloc_r+0x1c>
 80029a2:	4631      	mov	r1, r6
 80029a4:	4622      	mov	r2, r4
 80029a6:	f7ff ff0f 	bl	80027c8 <memcpy>
 80029aa:	4631      	mov	r1, r6
 80029ac:	4638      	mov	r0, r7
 80029ae:	f7ff ff33 	bl	8002818 <_free_r>
 80029b2:	e7e9      	b.n	8002988 <_realloc_r+0x1c>
 80029b4:	4635      	mov	r5, r6
 80029b6:	e7e7      	b.n	8002988 <_realloc_r+0x1c>

080029b8 <_sbrk_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4d06      	ldr	r5, [pc, #24]	; (80029d4 <_sbrk_r+0x1c>)
 80029bc:	2300      	movs	r3, #0
 80029be:	4604      	mov	r4, r0
 80029c0:	4608      	mov	r0, r1
 80029c2:	602b      	str	r3, [r5, #0]
 80029c4:	f7fd ffb2 	bl	800092c <_sbrk>
 80029c8:	1c43      	adds	r3, r0, #1
 80029ca:	d102      	bne.n	80029d2 <_sbrk_r+0x1a>
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	b103      	cbz	r3, 80029d2 <_sbrk_r+0x1a>
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
 80029d4:	20000104 	.word	0x20000104

080029d8 <__malloc_lock>:
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <__malloc_lock+0x8>)
 80029da:	f000 b811 	b.w	8002a00 <__retarget_lock_acquire_recursive>
 80029de:	bf00      	nop
 80029e0:	2000010c 	.word	0x2000010c

080029e4 <__malloc_unlock>:
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <__malloc_unlock+0x8>)
 80029e6:	f000 b80c 	b.w	8002a02 <__retarget_lock_release_recursive>
 80029ea:	bf00      	nop
 80029ec:	2000010c 	.word	0x2000010c

080029f0 <_malloc_usable_size_r>:
 80029f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029f4:	1f18      	subs	r0, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bfbc      	itt	lt
 80029fa:	580b      	ldrlt	r3, [r1, r0]
 80029fc:	18c0      	addlt	r0, r0, r3
 80029fe:	4770      	bx	lr

08002a00 <__retarget_lock_acquire_recursive>:
 8002a00:	4770      	bx	lr

08002a02 <__retarget_lock_release_recursive>:
 8002a02:	4770      	bx	lr

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
