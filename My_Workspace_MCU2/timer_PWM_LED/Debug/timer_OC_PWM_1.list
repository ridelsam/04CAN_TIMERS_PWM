
timer_OC_PWM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002938  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b1c  08002b1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002b30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002b30  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e318  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0d  00000000  00000000  0002e354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  000308f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218b2  00000000  00000000  000313e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc3f  00000000  00000000  00052c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf91b  00000000  00000000  000608d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001301ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030dc  00000000  00000000  00130240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ae4 	.word	0x08002ae4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002ae4 	.word	0x08002ae4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
TIM_HandleTypeDef htimer2;
UART_HandleTypeDef huart2;


int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

	HAL_Init();
 8000500:	f000 fabc 	bl	8000a7c <HAL_Init>


	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000504:	2032      	movs	r0, #50	; 0x32
 8000506:	f000 f82d 	bl	8000564 <SystemClock_Config_HSE>

	GPIO_Init();
 800050a:	f000 f8c9 	bl	80006a0 <GPIO_Init>

	UART2_Init();
 800050e:	f000 f8eb 	bl	80006e8 <UART2_Init>

	TIMER2_Init();
 8000512:	f000 f90f 	bl	8000734 <TIMER2_Init>

	if ( HAL_TIM_PWM_Start(&htimer2,TIM_CHANNEL_1) != HAL_OK)
 8000516:	2100      	movs	r1, #0
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <main+0x64>)
 800051a:	f001 fb55 	bl	8001bc8 <HAL_TIM_PWM_Start>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <main+0x2c>
	{
		Error_handler();
 8000524:	f000 f98c 	bl	8000840 <Error_handler>
	}

	if ( HAL_TIM_PWM_Start(&htimer2,TIM_CHANNEL_2) != HAL_OK)
 8000528:	2104      	movs	r1, #4
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x64>)
 800052c:	f001 fb4c 	bl	8001bc8 <HAL_TIM_PWM_Start>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <main+0x3e>
	{
		Error_handler();
 8000536:	f000 f983 	bl	8000840 <Error_handler>
	}

	if ( HAL_TIM_PWM_Start(&htimer2,TIM_CHANNEL_3) != HAL_OK)
 800053a:	2108      	movs	r1, #8
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x64>)
 800053e:	f001 fb43 	bl	8001bc8 <HAL_TIM_PWM_Start>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <main+0x50>
	{
		Error_handler();
 8000548:	f000 f97a 	bl	8000840 <Error_handler>
	}

	if ( HAL_TIM_PWM_Start(&htimer2,TIM_CHANNEL_4) != HAL_OK)
 800054c:	210c      	movs	r1, #12
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x64>)
 8000550:	f001 fb3a 	bl	8001bc8 <HAL_TIM_PWM_Start>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <main+0x62>
	{
		Error_handler();
 800055a:	f000 f971 	bl	8000840 <Error_handler>
	}

	while(1);
 800055e:	e7fe      	b.n	800055e <main+0x62>
 8000560:	20000028 	.word	0x20000028

08000564 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b096      	sub	sp, #88	; 0x58
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800056e:	2300      	movs	r3, #0
 8000570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 8000574:	2307      	movs	r3, #7
 8000576:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	623b      	str	r3, [r7, #32]
	Osc_Init.LSEState = RCC_LSE_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b78      	cmp	r3, #120	; 0x78
 8000594:	d038      	beq.n	8000608 <SystemClock_Config_HSE+0xa4>
 8000596:	2b78      	cmp	r3, #120	; 0x78
 8000598:	dc7c      	bgt.n	8000694 <SystemClock_Config_HSE+0x130>
 800059a:	2b32      	cmp	r3, #50	; 0x32
 800059c:	d002      	beq.n	80005a4 <SystemClock_Config_HSE+0x40>
 800059e:	2b54      	cmp	r3, #84	; 0x54
 80005a0:	d019      	beq.n	80005d6 <SystemClock_Config_HSE+0x72>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 80005a2:	e077      	b.n	8000694 <SystemClock_Config_HSE+0x130>
		  Osc_Init.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 80005a8:	2332      	movs	r3, #50	; 0x32
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80005d4:	e032      	b.n	800063c <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80005da:	2354      	movs	r3, #84	; 0x54
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000606:	e019      	b.n	800063c <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 800060c:	2378      	movs	r3, #120	; 0x78
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062c:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800063a:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ffd3 	bl	80015ec <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config_HSE+0xec>
	{
			Error_handler();
 800064c:	f000 f8f8 	bl	8000840 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000650:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd50 	bl	8001100 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config_HSE+0x106>
	{
		Error_handler();
 8000666:	f000 f8eb 	bl	8000840 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800066a:	f000 fe2f 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 800066e:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SystemClock_Config_HSE+0x138>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	099b      	lsrs	r3, r3, #6
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fb75 	bl	8000d6a <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000680:	2004      	movs	r0, #4
 8000682:	f000 fb7f 	bl	8000d84 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	f04f 30ff 	mov.w	r0, #4294967295
 800068e:	f000 fb42 	bl	8000d16 <HAL_NVIC_SetPriority>
 8000692:	e000      	b.n	8000696 <SystemClock_Config_HSE+0x132>
	   return ;
 8000694:	bf00      	nop



 }
 8000696:	3758      	adds	r7, #88	; 0x58
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	10624dd3 	.word	0x10624dd3

080006a0 <GPIO_Init>:

void GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <GPIO_Init+0x40>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <GPIO_Init+0x40>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <GPIO_Init+0x40>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80006c2:	2320      	movs	r3, #32
 80006c4:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <GPIO_Init+0x44>)
 80006d4:	f000 fb80 	bl	8000dd8 <HAL_GPIO_Init>
}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000

080006e8 <UART2_Init>:



void UART2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <UART2_Init+0x44>)
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <UART2_Init+0x48>)
 80006f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <UART2_Init+0x44>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <UART2_Init+0x44>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <UART2_Init+0x44>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <UART2_Init+0x44>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <UART2_Init+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <UART2_Init+0x44>)
 8000714:	220c      	movs	r2, #12
 8000716:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <UART2_Init+0x44>)
 800071a:	f001 ffa2 	bl	8002662 <HAL_UART_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000724:	f000 f88c 	bl	8000840 <Error_handler>
	}


}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000070 	.word	0x20000070
 8000730:	40004400 	.word	0x40004400

08000734 <TIMER2_Init>:


 void TIMER2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
	 TIM_OC_InitTypeDef tim2PWM_Config;
	 htimer2.Instance = TIM2;
 800073a:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <TIMER2_Init+0x104>)
 800073c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000740:	601a      	str	r2, [r3, #0]
	 htimer2.Init.Period = 10000-1;
 8000742:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <TIMER2_Init+0x104>)
 8000744:	f242 720f 	movw	r2, #9999	; 0x270f
 8000748:	60da      	str	r2, [r3, #12]
	 htimer2.Init.Prescaler = 4999;
 800074a:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <TIMER2_Init+0x104>)
 800074c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000750:	605a      	str	r2, [r3, #4]
	 if ( HAL_TIM_PWM_Init(&htimer2) != HAL_OK)
 8000752:	4839      	ldr	r0, [pc, #228]	; (8000838 <TIMER2_Init+0x104>)
 8000754:	f001 f9e8 	bl	8001b28 <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <TIMER2_Init+0x2e>
	 {
		 Error_handler();
 800075e:	f000 f86f 	bl	8000840 <Error_handler>
	 }

	 memset(&tim2PWM_Config,0,sizeof(tim2PWM_Config));
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	221c      	movs	r2, #28
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f9b3 	bl	8002ad4 <memset>

	 tim2PWM_Config.OCMode = TIM_OCMODE_PWM1;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	607b      	str	r3, [r7, #4]
	 tim2PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]


	tim2PWM_Config.Pulse =  (htimer2.Init.Period * 25 ) /100;
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <TIMER2_Init+0x104>)
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	009a      	lsls	r2, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <TIMER2_Init+0x108>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	095b      	lsrs	r3, r3, #5
 800078c:	60bb      	str	r3, [r7, #8]

	 if( HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM_Config,TIM_CHANNEL_1) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	4828      	ldr	r0, [pc, #160]	; (8000838 <TIMER2_Init+0x104>)
 8000796:	f001 fbe7 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <TIMER2_Init+0x70>
	 {
		 Error_handler();
 80007a0:	f000 f84e 	bl	8000840 <Error_handler>
	 }

	 tim2PWM_Config.Pulse =  (htimer2.Init.Period * 45 ) /100;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <TIMER2_Init+0x104>)
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	011a      	lsls	r2, r3, #4
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <TIMER2_Init+0x108>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	095b      	lsrs	r3, r3, #5
 80007ba:	60bb      	str	r3, [r7, #8]
	 if( HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM_Config,TIM_CHANNEL_2) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2204      	movs	r2, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <TIMER2_Init+0x104>)
 80007c4:	f001 fbd0 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <TIMER2_Init+0x9e>
	 {
		 Error_handler();
 80007ce:	f000 f837 	bl	8000840 <Error_handler>
	 }

	 tim2PWM_Config.Pulse =  (htimer2.Init.Period * 75 ) /100;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <TIMER2_Init+0x104>)
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	011a      	lsls	r2, r3, #4
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	4a16      	ldr	r2, [pc, #88]	; (800083c <TIMER2_Init+0x108>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	60bb      	str	r3, [r7, #8]
	 if( HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM_Config,TIM_CHANNEL_3) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2208      	movs	r2, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <TIMER2_Init+0x104>)
 80007f2:	f001 fbb9 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <TIMER2_Init+0xcc>
	 {
		 Error_handler();
 80007fc:	f000 f820 	bl	8000840 <Error_handler>
	 }

	 tim2PWM_Config.Pulse =  (htimer2.Init.Period * 95 ) /100;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <TIMER2_Init+0x104>)
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	015b      	lsls	r3, r3, #5
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <TIMER2_Init+0x108>)
 8000810:	fba2 2303 	umull	r2, r3, r2, r3
 8000814:	095b      	lsrs	r3, r3, #5
 8000816:	60bb      	str	r3, [r7, #8]
	 if( HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM_Config,TIM_CHANNEL_4) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	220c      	movs	r2, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <TIMER2_Init+0x104>)
 8000820:	f001 fba2 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <TIMER2_Init+0xfa>
	 {
		 Error_handler();
 800082a:	f000 f809 	bl	8000840 <Error_handler>
	 }
}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000028 	.word	0x20000028
 800083c:	51eb851f 	.word	0x51eb851f

08000840 <Error_handler>:


void Error_handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	while(1);
 8000844:	e7fe      	b.n	8000844 <Error_handler+0x4>
	...

08000848 <HAL_MspInit>:
/* USER CODE END Header */

#include "main.h"

void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 fa57 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x40>)
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <HAL_MspInit+0x40>)
 8000858:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800085c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	f06f 000b 	mvn.w	r0, #11
 8000866:	f000 fa56 	bl	8000d16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	f06f 000a 	mvn.w	r0, #10
 8000872:	f000 fa50 	bl	8000d16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	f06f 0009 	mvn.w	r0, #9
 800087e:	f000 fa4a 	bl	8000d16 <HAL_NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef tim2OC_ch_gpios;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a29      	ldr	r2, [pc, #164]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_TIM_PWM_MspInit+0xb8>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
	 /* PA0 --> TIM2_CH1
	 PA1 --> TIM2_CH2
	 PB10 --> TIM2_CH3
	 PB2 --> TIM2_CH4 */

	tim2OC_ch_gpios.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e8:	2303      	movs	r3, #3
 80008ea:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_PULLDOWN;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <HAL_TIM_PWM_MspInit+0xbc>)
 8000904:	f000 fa68 	bl	8000dd8 <HAL_GPIO_Init>

	tim2OC_ch_gpios.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000908:	f240 4304 	movw	r3, #1028	; 0x404
 800090c:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_PULLDOWN;
 8000912:	2302      	movs	r3, #2
 8000914:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 800091a:	2301      	movs	r3, #1
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &tim2OC_ch_gpios);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_TIM_PWM_MspInit+0xc0>)
 8000926:	f000 fa57 	bl	8000dd8 <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	201c      	movs	r0, #28
 8000930:	f000 f9f1 	bl	8000d16 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000934:	201c      	movs	r0, #28
 8000936:	f000 fa0a 	bl	8000d4e <HAL_NVIC_EnableIRQ>


}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400

08000950 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000990:	2304      	movs	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80009a0:	2307      	movs	r3, #7
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009ac:	f000 fa14 	bl	8000dd8 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80009b0:	2308      	movs	r3, #8
 80009b2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009bc:	f000 fa0c 	bl	8000dd8 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c0:	2026      	movs	r0, #38	; 0x26
 80009c2:	f000 f9c4 	bl	8000d4e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	2026      	movs	r0, #38	; 0x26
 80009cc:	f000 f9a3 	bl	8000d16 <HAL_NVIC_SetPriority>

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler (void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80009e4:	f000 f89c 	bl	8000b20 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80009e8:	f000 f9e8 	bl	8000dbc <HAL_SYSTICK_IRQHandler>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <TIM2_IRQHandler+0x10>)
 80009f6:	f001 f9af 	bl	8001d58 <HAL_TIM_IRQHandler>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000028 	.word	0x20000028

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ffd7 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f002 f819 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd4f 	bl	80004fc <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	200000b8 	.word	0x200000b8

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f92b 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff feca 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f943 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f90b 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200000b4 	.word	0x200000b4

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000b4 	.word	0x200000b4

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff3e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff31 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d106      	bne.n	8000da0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d9e:	e005      	b.n	8000dac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000da6:	f023 0304 	bic.w	r3, r3, #4
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000dc0:	f000 f802 	bl	8000dc8 <HAL_SYSTICK_Callback>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e165      	b.n	80010c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8154 	bne.w	80010ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80ae 	beq.w	80010ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a5c      	ldr	r2, [pc, #368]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a58      	ldr	r2, [pc, #352]	; (80010dc <HAL_GPIO_Init+0x304>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	; (80010e0 <HAL_GPIO_Init+0x308>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x21a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <HAL_GPIO_Init+0x30c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x216>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	; (80010e8 <HAL_GPIO_Init+0x310>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x212>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x20a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x206>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	; (80010f8 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x202>
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	e00c      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00a      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001036:	4a31      	ldr	r2, [pc, #196]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x324>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <HAL_GPIO_Init+0x324>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x324>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_GPIO_Init+0x324>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	f67f ae96 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40021800 	.word	0x40021800
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0cc      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d90c      	bls.n	800113c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0b8      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001154:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800115e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	494d      	ldr	r1, [pc, #308]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d044      	beq.n	8001220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e07f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d003      	beq.n	80011be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e06f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e067      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 0203 	bic.w	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4934      	ldr	r1, [pc, #208]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fcaa 	bl	8000b48 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	e00a      	b.n	800120e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f7ff fca6 	bl	8000b48 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e04f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 020c 	and.w	r2, r3, #12
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	429a      	cmp	r2, r3
 800121e:	d1eb      	bne.n	80011f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20c      	bcs.n	8001248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e032      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4916      	ldr	r1, [pc, #88]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	490e      	ldr	r1, [pc, #56]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001286:	f000 f855 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 800128a:	4602      	mov	r2, r0
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	490a      	ldr	r1, [pc, #40]	; (80012c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fc0a 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	08002afc 	.word	0x08002afc
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000

080012e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012e8:	f7ff fff0 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	4903      	ldr	r1, [pc, #12]	; (8001308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	08002b0c 	.word	0x08002b0c

0800130c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001310:	f7ff ffdc 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	0b5b      	lsrs	r3, r3, #13
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	4903      	ldr	r1, [pc, #12]	; (8001330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	08002b0c 	.word	0x08002b0c

08001334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001338:	b087      	sub	sp, #28
 800133a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800133c:	2600      	movs	r6, #0
 800133e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001340:	2600      	movs	r6, #0
 8001342:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001344:	2600      	movs	r6, #0
 8001346:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001348:	2600      	movs	r6, #0
 800134a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800134c:	2600      	movs	r6, #0
 800134e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001350:	4ea3      	ldr	r6, [pc, #652]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001352:	68b6      	ldr	r6, [r6, #8]
 8001354:	f006 060c 	and.w	r6, r6, #12
 8001358:	2e0c      	cmp	r6, #12
 800135a:	f200 8137 	bhi.w	80015cc <HAL_RCC_GetSysClockFreq+0x298>
 800135e:	f20f 0c08 	addw	ip, pc, #8
 8001362:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001366:	bf00      	nop
 8001368:	0800139d 	.word	0x0800139d
 800136c:	080015cd 	.word	0x080015cd
 8001370:	080015cd 	.word	0x080015cd
 8001374:	080015cd 	.word	0x080015cd
 8001378:	080013a3 	.word	0x080013a3
 800137c:	080015cd 	.word	0x080015cd
 8001380:	080015cd 	.word	0x080015cd
 8001384:	080015cd 	.word	0x080015cd
 8001388:	080013a9 	.word	0x080013a9
 800138c:	080015cd 	.word	0x080015cd
 8001390:	080015cd 	.word	0x080015cd
 8001394:	080015cd 	.word	0x080015cd
 8001398:	080014bf 	.word	0x080014bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800139c:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800139e:	613b      	str	r3, [r7, #16]
       break;
 80013a0:	e117      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80013a4:	613b      	str	r3, [r7, #16]
      break;
 80013a6:	e114      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a8:	4b8d      	ldr	r3, [pc, #564]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013b0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b2:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d024      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013be:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	099b      	lsrs	r3, r3, #6
 80013c4:	461a      	mov	r2, r3
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f240 14ff 	movw	r4, #511	; 0x1ff
 80013ce:	f04f 0500 	mov.w	r5, #0
 80013d2:	ea02 0004 	and.w	r0, r2, r4
 80013d6:	ea03 0105 	and.w	r1, r3, r5
 80013da:	4b83      	ldr	r3, [pc, #524]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80013dc:	fb03 f201 	mul.w	r2, r3, r1
 80013e0:	2300      	movs	r3, #0
 80013e2:	fb03 f300 	mul.w	r3, r3, r0
 80013e6:	4413      	add	r3, r2
 80013e8:	4a7f      	ldr	r2, [pc, #508]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80013ea:	fba0 0102 	umull	r0, r1, r0, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	4619      	mov	r1, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	461a      	mov	r2, r3
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	f7fe ff03 	bl	8000204 <__aeabi_uldivmod>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4613      	mov	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e04c      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001408:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	461a      	mov	r2, r3
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	ea02 0800 	and.w	r8, r2, r0
 8001420:	ea03 0901 	and.w	r9, r3, r1
 8001424:	4640      	mov	r0, r8
 8001426:	4649      	mov	r1, r9
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	014b      	lsls	r3, r1, #5
 8001432:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001436:	0142      	lsls	r2, r0, #5
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	ebb0 0008 	subs.w	r0, r0, r8
 8001440:	eb61 0109 	sbc.w	r1, r1, r9
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	018b      	lsls	r3, r1, #6
 800144e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001452:	0182      	lsls	r2, r0, #6
 8001454:	1a12      	subs	r2, r2, r0
 8001456:	eb63 0301 	sbc.w	r3, r3, r1
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	00d9      	lsls	r1, r3, #3
 8001464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001468:	00d0      	lsls	r0, r2, #3
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	eb12 0208 	adds.w	r2, r2, r8
 8001472:	eb43 0309 	adc.w	r3, r3, r9
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	0299      	lsls	r1, r3, #10
 8001480:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001484:	0290      	lsls	r0, r2, #10
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	461a      	mov	r2, r3
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f7fe feb5 	bl	8000204 <__aeabi_uldivmod>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4613      	mov	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014a2:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0c1b      	lsrs	r3, r3, #16
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	3301      	adds	r3, #1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	613b      	str	r3, [r7, #16]
      break;
 80014bc:	e089      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014be:	4948      	ldr	r1, [pc, #288]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80014c0:	6849      	ldr	r1, [r1, #4]
 80014c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80014c6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c8:	4945      	ldr	r1, [pc, #276]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80014ca:	6849      	ldr	r1, [r1, #4]
 80014cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80014d0:	2900      	cmp	r1, #0
 80014d2:	d024      	beq.n	800151e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d4:	4942      	ldr	r1, [pc, #264]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80014d6:	6849      	ldr	r1, [r1, #4]
 80014d8:	0989      	lsrs	r1, r1, #6
 80014da:	4608      	mov	r0, r1
 80014dc:	f04f 0100 	mov.w	r1, #0
 80014e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80014e4:	f04f 0500 	mov.w	r5, #0
 80014e8:	ea00 0204 	and.w	r2, r0, r4
 80014ec:	ea01 0305 	and.w	r3, r1, r5
 80014f0:	493d      	ldr	r1, [pc, #244]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80014f2:	fb01 f003 	mul.w	r0, r1, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	fb01 f102 	mul.w	r1, r1, r2
 80014fc:	1844      	adds	r4, r0, r1
 80014fe:	493a      	ldr	r1, [pc, #232]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001500:	fba2 0101 	umull	r0, r1, r2, r1
 8001504:	1863      	adds	r3, r4, r1
 8001506:	4619      	mov	r1, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	461a      	mov	r2, r3
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f7fe fe78 	bl	8000204 <__aeabi_uldivmod>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4613      	mov	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e04a      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	099b      	lsrs	r3, r3, #6
 8001524:	461a      	mov	r2, r3
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	ea02 0400 	and.w	r4, r2, r0
 8001536:	ea03 0501 	and.w	r5, r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	014b      	lsls	r3, r1, #5
 8001548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800154c:	0142      	lsls	r2, r0, #5
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	1b00      	subs	r0, r0, r4
 8001554:	eb61 0105 	sbc.w	r1, r1, r5
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	018b      	lsls	r3, r1, #6
 8001562:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001566:	0182      	lsls	r2, r0, #6
 8001568:	1a12      	subs	r2, r2, r0
 800156a:	eb63 0301 	sbc.w	r3, r3, r1
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	00d9      	lsls	r1, r3, #3
 8001578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800157c:	00d0      	lsls	r0, r2, #3
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	1912      	adds	r2, r2, r4
 8001584:	eb45 0303 	adc.w	r3, r5, r3
 8001588:	f04f 0000 	mov.w	r0, #0
 800158c:	f04f 0100 	mov.w	r1, #0
 8001590:	0299      	lsls	r1, r3, #10
 8001592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001596:	0290      	lsls	r0, r2, #10
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	461a      	mov	r2, r3
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	f7fe fe2c 	bl	8000204 <__aeabi_uldivmod>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4613      	mov	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	0f1b      	lsrs	r3, r3, #28
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	613b      	str	r3, [r7, #16]
      break;
 80015ca:	e002      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80015ce:	613b      	str	r3, [r7, #16]
      break;
 80015d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d2:	693b      	ldr	r3, [r7, #16]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	00f42400 	.word	0x00f42400
 80015e8:	017d7840 	.word	0x017d7840

080015ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e28d      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8083 	beq.w	8001712 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800160c:	4b94      	ldr	r3, [pc, #592]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b04      	cmp	r3, #4
 8001616:	d019      	beq.n	800164c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001618:	4b91      	ldr	r3, [pc, #580]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001620:	2b08      	cmp	r3, #8
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001624:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001630:	d00c      	beq.n	800164c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d112      	bne.n	8001664 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164a:	d10b      	bne.n	8001664 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	4b84      	ldr	r3, [pc, #528]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <HAL_RCC_OscConfig+0x124>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d157      	bne.n	8001710 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e25a      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d106      	bne.n	800167c <HAL_RCC_OscConfig+0x90>
 800166e:	4b7c      	ldr	r3, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7b      	ldr	r2, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xcc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xb4>
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b73      	ldr	r3, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a72      	ldr	r2, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xcc>
 80016a0:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6e      	ldr	r2, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6b      	ldr	r2, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fa42 	bl	8000b48 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fa3e 	bl	8000b48 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e21f      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b61      	ldr	r3, [pc, #388]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xdc>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fa2e 	bl	8000b48 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa2a 	bl	8000b48 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e20b      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b57      	ldr	r3, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x104>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06f      	beq.n	80017fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d017      	beq.n	800175a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001732:	2b08      	cmp	r3, #8
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x186>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1d3      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x278>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff f9d7 	bl	8000b48 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff f9d3 	bl	8000b48 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1b4      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4925      	ldr	r1, [pc, #148]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x278>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f9b6 	bl	8000b48 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff f9b2 	bl	8000b48 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e193      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f996 	bl	8000b48 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f992 	bl	8000b48 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e173      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x274>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x234>
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff f97f 	bl	8000b48 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e00e      	b.n	800186c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff f97b 	bl	8000b48 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d907      	bls.n	800186c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e15c      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b8a      	ldr	r3, [pc, #552]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ea      	bne.n	800184e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8097 	beq.w	80019b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b83      	ldr	r3, [pc, #524]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b7f      	ldr	r3, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a7e      	ldr	r2, [pc, #504]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f93b 	bl	8000b48 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff f937 	bl	8000b48 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e118      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x4b0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x31e>
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x358>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x340>
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a60      	ldr	r2, [pc, #384]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a5d      	ldr	r2, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x358>
 800192c:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a59      	ldr	r2, [pc, #356]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f8fc 	bl	8000b48 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f8f8 	bl	8000b48 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0d7      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ee      	beq.n	8001954 <HAL_RCC_OscConfig+0x368>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f8e6 	bl	8000b48 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff f8e2 	bl	8000b48 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0c1      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ee      	bne.n	8001980 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a3a      	ldr	r2, [pc, #232]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80ad 	beq.w	8001b18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d060      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d145      	bne.n	8001a5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_RCC_OscConfig+0x4b4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f8b6 	bl	8000b48 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f8b2 	bl	8000b48 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e093      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	071b      	lsls	r3, r3, #28
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x4b4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f887 	bl	8000b48 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f883 	bl	8000b48 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e064      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x452>
 8001a5c:	e05c      	b.n	8001b18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x4b4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f870 	bl	8000b48 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f86c 	bl	8000b48 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e04d      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x480>
 8001a8a:	e045      	b.n	8001b18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e040      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_RCC_OscConfig+0x538>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d030      	beq.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d129      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d122      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d119      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e041      	b.n	8001bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fe9c 	bl	800088c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 faf2 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_TIM_PWM_Start+0x24>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e022      	b.n	8001c32 <HAL_TIM_PWM_Start+0x6a>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d109      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x3e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	bf14      	ite	ne
 8001bfe:	2301      	movne	r3, #1
 8001c00:	2300      	moveq	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	e015      	b.n	8001c32 <HAL_TIM_PWM_Start+0x6a>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d109      	bne.n	8001c20 <HAL_TIM_PWM_Start+0x58>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	e008      	b.n	8001c32 <HAL_TIM_PWM_Start+0x6a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07c      	b.n	8001d34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <HAL_TIM_PWM_Start+0x82>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c48:	e013      	b.n	8001c72 <HAL_TIM_PWM_Start+0xaa>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_PWM_Start+0x92>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c58:	e00b      	b.n	8001c72 <HAL_TIM_PWM_Start+0xaa>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d104      	bne.n	8001c6a <HAL_TIM_PWM_Start+0xa2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c68:	e003      	b.n	8001c72 <HAL_TIM_PWM_Start+0xaa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fcb8 	bl	80025f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_TIM_PWM_Start+0x174>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_TIM_PWM_Start+0xcc>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <HAL_TIM_PWM_Start+0x178>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_TIM_PWM_Start+0xd0>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_TIM_PWM_Start+0xd2>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_TIM_PWM_Start+0x174>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d022      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc0:	d01d      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_TIM_PWM_Start+0x17c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d018      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_TIM_PWM_Start+0x180>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_TIM_PWM_Start+0x184>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00e      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_TIM_PWM_Start+0x178>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_TIM_PWM_Start+0x188>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d004      	beq.n	8001cfe <HAL_TIM_PWM_Start+0x136>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <HAL_TIM_PWM_Start+0x18c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d111      	bne.n	8001d22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d010      	beq.n	8001d32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	e007      	b.n	8001d32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40010400 	.word	0x40010400
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40000c00 	.word	0x40000c00
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40001800 	.word	0x40001800

08001d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0202 	mvn.w	r2, #2
 8001d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f9ba 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f9ac 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f9bd 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0204 	mvn.w	r2, #4
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f990 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f982 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f993 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0208 	mvn.w	r2, #8
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f966 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f958 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f969 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0210 	mvn.w	r2, #16
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2208      	movs	r2, #8
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f93c 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f92e 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f93f 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0201 	mvn.w	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f908 	bl	80020ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fba3 	bl	800264e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f904 	bl	800213c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0220 	mvn.w	r2, #32
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fb6d 	bl	800263a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e0ae      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	f200 809f 	bhi.w	80020d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fd1 	.word	0x08001fd1
 8001fa0:	080020d5 	.word	0x080020d5
 8001fa4:	080020d5 	.word	0x080020d5
 8001fa8:	080020d5 	.word	0x080020d5
 8001fac:	08002011 	.word	0x08002011
 8001fb0:	080020d5 	.word	0x080020d5
 8001fb4:	080020d5 	.word	0x080020d5
 8001fb8:	080020d5 	.word	0x080020d5
 8001fbc:	08002053 	.word	0x08002053
 8001fc0:	080020d5 	.word	0x080020d5
 8001fc4:	080020d5 	.word	0x080020d5
 8001fc8:	080020d5 	.word	0x080020d5
 8001fcc:	08002093 	.word	0x08002093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f95a 	bl	8002290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0208 	orr.w	r2, r2, #8
 8001fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6999      	ldr	r1, [r3, #24]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	619a      	str	r2, [r3, #24]
      break;
 800200e:	e064      	b.n	80020da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f9aa 	bl	8002370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6999      	ldr	r1, [r3, #24]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	021a      	lsls	r2, r3, #8
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	619a      	str	r2, [r3, #24]
      break;
 8002050:	e043      	b.n	80020da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f9ff 	bl	800245c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0208 	orr.w	r2, r2, #8
 800206c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0204 	bic.w	r2, r2, #4
 800207c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69d9      	ldr	r1, [r3, #28]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	61da      	str	r2, [r3, #28]
      break;
 8002090:	e023      	b.n	80020da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fa53 	bl	8002544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69d9      	ldr	r1, [r3, #28]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	021a      	lsls	r2, r3, #8
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	61da      	str	r2, [r3, #28]
      break;
 80020d2:	e002      	b.n	80020da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	75fb      	strb	r3, [r7, #23]
      break;
 80020d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <TIM_Base_SetConfig+0x114>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <TIM_Base_SetConfig+0x118>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <TIM_Base_SetConfig+0x11c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <TIM_Base_SetConfig+0x120>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <TIM_Base_SetConfig+0x124>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <TIM_Base_SetConfig+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d027      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <TIM_Base_SetConfig+0x118>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d023      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <TIM_Base_SetConfig+0x11c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <TIM_Base_SetConfig+0x120>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a29      	ldr	r2, [pc, #164]	; (8002274 <TIM_Base_SetConfig+0x124>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d017      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <TIM_Base_SetConfig+0x128>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <TIM_Base_SetConfig+0x12c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <TIM_Base_SetConfig+0x130>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0x134>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <TIM_Base_SetConfig+0x138>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <TIM_Base_SetConfig+0x13c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <TIM_Base_SetConfig+0x114>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0xf8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <TIM_Base_SetConfig+0x124>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800
 8002284:	40001800 	.word	0x40001800
 8002288:	40001c00 	.word	0x40001c00
 800228c:	40002000 	.word	0x40002000

08002290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f023 0302 	bic.w	r3, r3, #2
 80022d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a20      	ldr	r2, [pc, #128]	; (8002368 <TIM_OC1_SetConfig+0xd8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d003      	beq.n	80022f4 <TIM_OC1_SetConfig+0x64>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <TIM_OC1_SetConfig+0xdc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10c      	bne.n	800230e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0308 	bic.w	r3, r3, #8
 80022fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <TIM_OC1_SetConfig+0xd8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_OC1_SetConfig+0x8e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <TIM_OC1_SetConfig+0xdc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d111      	bne.n	8002342 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800232c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	621a      	str	r2, [r3, #32]
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40010000 	.word	0x40010000
 800236c:	40010400 	.word	0x40010400

08002370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f023 0210 	bic.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0320 	bic.w	r3, r3, #32
 80023ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a22      	ldr	r2, [pc, #136]	; (8002454 <TIM_OC2_SetConfig+0xe4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <TIM_OC2_SetConfig+0x68>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a21      	ldr	r2, [pc, #132]	; (8002458 <TIM_OC2_SetConfig+0xe8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10d      	bne.n	80023f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <TIM_OC2_SetConfig+0xe4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d003      	beq.n	8002404 <TIM_OC2_SetConfig+0x94>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <TIM_OC2_SetConfig+0xe8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d113      	bne.n	800242c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800240a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	621a      	str	r2, [r3, #32]
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40010400 	.word	0x40010400

0800245c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a21      	ldr	r2, [pc, #132]	; (800253c <TIM_OC3_SetConfig+0xe0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <TIM_OC3_SetConfig+0x66>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a20      	ldr	r2, [pc, #128]	; (8002540 <TIM_OC3_SetConfig+0xe4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10d      	bne.n	80024de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <TIM_OC3_SetConfig+0xe0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <TIM_OC3_SetConfig+0x92>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a15      	ldr	r2, [pc, #84]	; (8002540 <TIM_OC3_SetConfig+0xe4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d113      	bne.n	8002516 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	621a      	str	r2, [r3, #32]
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40010000 	.word	0x40010000
 8002540:	40010400 	.word	0x40010400

08002544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800258e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	031b      	lsls	r3, r3, #12
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <TIM_OC4_SetConfig+0xa4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <TIM_OC4_SetConfig+0x68>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <TIM_OC4_SetConfig+0xa8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d109      	bne.n	80025c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40010400 	.word	0x40010400

080025f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2201      	movs	r2, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a1a      	ldr	r2, [r3, #32]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e03f      	b.n	80026f4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fe f961 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2224      	movs	r2, #36	; 0x24
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f828 	bl	80026fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002700:	b09f      	sub	sp, #124	; 0x7c
 8002702:	af00      	add	r7, sp, #0
 8002704:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	ea40 0301 	orr.w	r3, r0, r1
 800271c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	431a      	orrs	r2, r3
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	431a      	orrs	r2, r3
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4313      	orrs	r3, r2
 8002734:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002740:	f021 010c 	bic.w	r1, r1, #12
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800274a:	430b      	orrs	r3, r1
 800274c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275a:	6999      	ldr	r1, [r3, #24]
 800275c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	ea40 0301 	orr.w	r3, r0, r1
 8002764:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4bc5      	ldr	r3, [pc, #788]	; (8002a80 <UART_SetConfig+0x384>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d004      	beq.n	800277a <UART_SetConfig+0x7e>
 8002770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4bc3      	ldr	r3, [pc, #780]	; (8002a84 <UART_SetConfig+0x388>)
 8002776:	429a      	cmp	r2, r3
 8002778:	d103      	bne.n	8002782 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800277a:	f7fe fdc7 	bl	800130c <HAL_RCC_GetPCLK2Freq>
 800277e:	6778      	str	r0, [r7, #116]	; 0x74
 8002780:	e002      	b.n	8002788 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002782:	f7fe fdaf 	bl	80012e4 <HAL_RCC_GetPCLK1Freq>
 8002786:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002790:	f040 80b6 	bne.w	8002900 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002796:	461c      	mov	r4, r3
 8002798:	f04f 0500 	mov.w	r5, #0
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	1891      	adds	r1, r2, r2
 80027a2:	6439      	str	r1, [r7, #64]	; 0x40
 80027a4:	415b      	adcs	r3, r3
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
 80027a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027ac:	1912      	adds	r2, r2, r4
 80027ae:	eb45 0303 	adc.w	r3, r5, r3
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	00d9      	lsls	r1, r3, #3
 80027bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027c0:	00d0      	lsls	r0, r2, #3
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	1911      	adds	r1, r2, r4
 80027c8:	6639      	str	r1, [r7, #96]	; 0x60
 80027ca:	416b      	adcs	r3, r5
 80027cc:	667b      	str	r3, [r7, #100]	; 0x64
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	1891      	adds	r1, r2, r2
 80027da:	63b9      	str	r1, [r7, #56]	; 0x38
 80027dc:	415b      	adcs	r3, r3
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027e8:	f7fd fd0c 	bl	8000204 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4ba5      	ldr	r3, [pc, #660]	; (8002a88 <UART_SetConfig+0x38c>)
 80027f2:	fba3 2302 	umull	r2, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	011e      	lsls	r6, r3, #4
 80027fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fc:	461c      	mov	r4, r3
 80027fe:	f04f 0500 	mov.w	r5, #0
 8002802:	4622      	mov	r2, r4
 8002804:	462b      	mov	r3, r5
 8002806:	1891      	adds	r1, r2, r2
 8002808:	6339      	str	r1, [r7, #48]	; 0x30
 800280a:	415b      	adcs	r3, r3
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
 800280e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002812:	1912      	adds	r2, r2, r4
 8002814:	eb45 0303 	adc.w	r3, r5, r3
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	00d9      	lsls	r1, r3, #3
 8002822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002826:	00d0      	lsls	r0, r2, #3
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	1911      	adds	r1, r2, r4
 800282e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002830:	416b      	adcs	r3, r5
 8002832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	461a      	mov	r2, r3
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	1891      	adds	r1, r2, r2
 8002840:	62b9      	str	r1, [r7, #40]	; 0x28
 8002842:	415b      	adcs	r3, r3
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800284a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800284e:	f7fd fcd9 	bl	8000204 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b8c      	ldr	r3, [pc, #560]	; (8002a88 <UART_SetConfig+0x38c>)
 8002858:	fba3 1302 	umull	r1, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2164      	movs	r1, #100	; 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a87      	ldr	r2, [pc, #540]	; (8002a88 <UART_SetConfig+0x38c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002878:	441e      	add	r6, r3
 800287a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287c:	4618      	mov	r0, r3
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	1894      	adds	r4, r2, r2
 8002888:	623c      	str	r4, [r7, #32]
 800288a:	415b      	adcs	r3, r3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
 800288e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002892:	1812      	adds	r2, r2, r0
 8002894:	eb41 0303 	adc.w	r3, r1, r3
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	f04f 0500 	mov.w	r5, #0
 80028a0:	00dd      	lsls	r5, r3, #3
 80028a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028a6:	00d4      	lsls	r4, r2, #3
 80028a8:	4622      	mov	r2, r4
 80028aa:	462b      	mov	r3, r5
 80028ac:	1814      	adds	r4, r2, r0
 80028ae:	653c      	str	r4, [r7, #80]	; 0x50
 80028b0:	414b      	adcs	r3, r1
 80028b2:	657b      	str	r3, [r7, #84]	; 0x54
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	1891      	adds	r1, r2, r2
 80028c0:	61b9      	str	r1, [r7, #24]
 80028c2:	415b      	adcs	r3, r3
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028ce:	f7fd fc99 	bl	8000204 <__aeabi_uldivmod>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <UART_SetConfig+0x38c>)
 80028d8:	fba3 1302 	umull	r1, r3, r3, r2
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	2164      	movs	r1, #100	; 0x64
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	3332      	adds	r3, #50	; 0x32
 80028ea:	4a67      	ldr	r2, [pc, #412]	; (8002a88 <UART_SetConfig+0x38c>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	f003 0207 	and.w	r2, r3, #7
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4432      	add	r2, r6
 80028fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028fe:	e0b9      	b.n	8002a74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002902:	461c      	mov	r4, r3
 8002904:	f04f 0500 	mov.w	r5, #0
 8002908:	4622      	mov	r2, r4
 800290a:	462b      	mov	r3, r5
 800290c:	1891      	adds	r1, r2, r2
 800290e:	6139      	str	r1, [r7, #16]
 8002910:	415b      	adcs	r3, r3
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002918:	1912      	adds	r2, r2, r4
 800291a:	eb45 0303 	adc.w	r3, r5, r3
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	00d9      	lsls	r1, r3, #3
 8002928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800292c:	00d0      	lsls	r0, r2, #3
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	eb12 0804 	adds.w	r8, r2, r4
 8002936:	eb43 0905 	adc.w	r9, r3, r5
 800293a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	008b      	lsls	r3, r1, #2
 800294e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002952:	0082      	lsls	r2, r0, #2
 8002954:	4640      	mov	r0, r8
 8002956:	4649      	mov	r1, r9
 8002958:	f7fd fc54 	bl	8000204 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <UART_SetConfig+0x38c>)
 8002962:	fba3 2302 	umull	r2, r3, r3, r2
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	011e      	lsls	r6, r3, #4
 800296a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296c:	4618      	mov	r0, r3
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	1894      	adds	r4, r2, r2
 8002978:	60bc      	str	r4, [r7, #8]
 800297a:	415b      	adcs	r3, r3
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002982:	1812      	adds	r2, r2, r0
 8002984:	eb41 0303 	adc.w	r3, r1, r3
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	f04f 0500 	mov.w	r5, #0
 8002990:	00dd      	lsls	r5, r3, #3
 8002992:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002996:	00d4      	lsls	r4, r2, #3
 8002998:	4622      	mov	r2, r4
 800299a:	462b      	mov	r3, r5
 800299c:	1814      	adds	r4, r2, r0
 800299e:	64bc      	str	r4, [r7, #72]	; 0x48
 80029a0:	414b      	adcs	r3, r1
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	008b      	lsls	r3, r1, #2
 80029b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029bc:	0082      	lsls	r2, r0, #2
 80029be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029c2:	f7fd fc1f 	bl	8000204 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <UART_SetConfig+0x38c>)
 80029cc:	fba3 1302 	umull	r1, r3, r3, r2
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	2164      	movs	r1, #100	; 0x64
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	3332      	adds	r3, #50	; 0x32
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <UART_SetConfig+0x38c>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ea:	441e      	add	r6, r3
 80029ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ee:	4618      	mov	r0, r3
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	1894      	adds	r4, r2, r2
 80029fa:	603c      	str	r4, [r7, #0]
 80029fc:	415b      	adcs	r3, r3
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a04:	1812      	adds	r2, r2, r0
 8002a06:	eb41 0303 	adc.w	r3, r1, r3
 8002a0a:	f04f 0400 	mov.w	r4, #0
 8002a0e:	f04f 0500 	mov.w	r5, #0
 8002a12:	00dd      	lsls	r5, r3, #3
 8002a14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a18:	00d4      	lsls	r4, r2, #3
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	eb12 0a00 	adds.w	sl, r2, r0
 8002a22:	eb43 0b01 	adc.w	fp, r3, r1
 8002a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	008b      	lsls	r3, r1, #2
 8002a3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a3e:	0082      	lsls	r2, r0, #2
 8002a40:	4650      	mov	r0, sl
 8002a42:	4659      	mov	r1, fp
 8002a44:	f7fd fbde 	bl	8000204 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <UART_SetConfig+0x38c>)
 8002a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2164      	movs	r1, #100	; 0x64
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	3332      	adds	r3, #50	; 0x32
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <UART_SetConfig+0x38c>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	f003 020f 	and.w	r2, r3, #15
 8002a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4432      	add	r2, r6
 8002a72:	609a      	str	r2, [r3, #8]
}
 8002a74:	bf00      	nop
 8002a76:	377c      	adds	r7, #124	; 0x7c
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a7e:	bf00      	nop
 8002a80:	40011000 	.word	0x40011000
 8002a84:	40011400 	.word	0x40011400
 8002a88:	51eb851f 	.word	0x51eb851f

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	4d0d      	ldr	r5, [pc, #52]	; (8002ac4 <__libc_init_array+0x38>)
 8002a90:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	2600      	movs	r6, #0
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	4d0b      	ldr	r5, [pc, #44]	; (8002acc <__libc_init_array+0x40>)
 8002a9e:	4c0c      	ldr	r4, [pc, #48]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa0:	f000 f820 	bl	8002ae4 <_init>
 8002aa4:	1b64      	subs	r4, r4, r5
 8002aa6:	10a4      	asrs	r4, r4, #2
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002b1c 	.word	0x08002b1c
 8002ac8:	08002b1c 	.word	0x08002b1c
 8002acc:	08002b1c 	.word	0x08002b1c
 8002ad0:	08002b20 	.word	0x08002b20

08002ad4 <memset>:
 8002ad4:	4402      	add	r2, r0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <memset+0xa>
 8002adc:	4770      	bx	lr
 8002ade:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae2:	e7f9      	b.n	8002ad8 <memset+0x4>

08002ae4 <_init>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	bf00      	nop
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr

08002af0 <_fini>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr
